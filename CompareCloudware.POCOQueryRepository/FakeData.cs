using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using CompareCloudware.Domain.Contracts.Repositories;
using CompareCloudware.POCOQueryRepository;
using CompareCloudware.Domain.Models;
using GhostscriptSharp;
using System.Drawing;
using System.IO;

//using Moq;
//using NUnit.Framework;

namespace CompareCloudware.POCOQueryRepository
{
    public class FakeData
    {
        private ICloudCompareContext testContextInstance;

        string PDF_TEST_CASE_STUDY_FILEPATH = "J:\\CloudCompare\\CloudCompare.Web\\Documents\\CaseStudies\\";
        string PDF_TEST_CASE_STUDY_FILENAME = "pdftown.com_986_ac-electrics.pdf";
        int PDF_TEST_WHITE_PAPER_PAGE_COUNT = 257;
        string PDF_TEST_WHITE_PAPER_FILEPATH = "J:\\CloudCompare\\CloudCompare.Web\\Documents\\WhitePapers\\";
        string PDF_TEST_WHITE_PAPER_FILENAME = "grohe_bathroom_brochure.pdf";
        int PDF_TEST_CASE_STUDY_PAGE_COUNT = 146;
        string OUTPUT_FILE_LOCATION = "J:\\CloudCompare\\CloudCompare.Web\\Documents\\";
        int IMAGE_FILE_HEIGHT = 50;
        int IMAGE_FILE_WIDTH = 50;

        string MPU_FILEPATH = "J:\\CompareCloudware\\CompareCloudware.Web\\Images\\MPUs\\";
        string MPU_FILE1 = "emulex.jpg";
        string MPU_FILE2 = "evault.jpg";
        string MPU_FILE3 = "gotomeeting.jpg";
        string MPU_FILE4 = "ibm2.jpg";
        string MPU_FILE5 = "ibm.jpg";
        string MPU_FILE6 = "rackspace.jpg";
        string MPU_FILE7 = "raritan.jpg";
        string MPU_FILE8 = "sgi_nas.jpg";
        string MPU_FILE9 = "sharesoftware.jpg";
        string MPU_FILE10 = "starline.jpg";
        string MPU_FILE11 = "webex.jpg";

        string SKYSCRAPER_FILEPATH = "J:\\CompareCloudware\\CompareCloudware.Web\\Images\\Skyscrapers\\";
        string SKYSCRAPER_FILE1 = "bamboo.jpg";
        string SKYSCRAPER_FILE2 = "intel.jpg";
        string SKYSCRAPER_FILE3 = "neustar.jpg";
        string SKYSCRAPER_FILE4 = "symantec.jpg";

        string PORTRAIT_FILEPATH = "J:\\CompareCloudware\\CompareCloudware.Web\\Images\\Portraits\\";
        string PORTRAIT_ANDREW = "andrewmiller.jpg";
        string PORTRAIT_CAROLINE = "carolineread.jpg";
        string PORTRAIT_GARY = "garygould.jpg";
        string PORTRAIT_IAN = "ianwilson.jpg";

        //string MULTIPLE_FILE_LOCATION = "J:\\CloudCompare\\CloudCompare.Web\\Documents\\WhitePapers\\output%d.jpg";

        /// <summary>
        ///Gets or sets the test context which provides
        ///information about and functionality for the current test run.
        ///</summary>
        public ICloudCompareContext FakeContext
        {
            get
            {
                return testContextInstance;
            }
            set
            {
                testContextInstance = value;
            }
        }

        //[TestMethod]
        public void LoadFakeReferenceData(ICloudCompareContext context)
        {
            //set the context to a fake stub
            //this.FakeContext = new FakeCloudCompareContext();
            this.FakeContext = context;

            //_context = new StationEntities();

            //now use this fake stub as the repository
            var repository = new QueryRepository(this.FakeContext);

            //add our sample fake station entities to the repository
            Feature f;
            FeatureType ft;
            CompareCloudware.Domain.Models.OperatingSystem o;
            MobilePlatform mp;
            Browser b;
            LicenceTypeMinimum ltMin;
            LicenceTypeMaximum ltMax;
            Language l;
            SupportType st;
            SupportDays sd;
            SupportHours sh;
            SupportTerritory sterritory;
            Category c;
            MinimumContract mc;
            PaymentFrequency pf;
            SetupFee sf;
            PaymentOption po;
            FreeTrialPeriod ftp;
            Vendor v;
            ThumbnailDocument td;
            ThumbnailDocumentType tdt;
            AdvertisingImage ai;
            AdvertisingImageType ait;
            Tag t;
            TagType tt;
            ContentText ct;
            ContentTextType ctt;

            #region CATEGORIES
            c = new Category()
            {
                CategoryName = "Voice"
                //CategoryName = "Phone"
            };
            repository.AddCategory(c);
            c = new Category()
            {
                CategoryName = "Customer Management"
            };
            repository.AddCategory(c);
            c = new Category()
            {
                //CategoryName = "Web Conference"
                CategoryName = "Web Conferencing"
            };
            repository.AddCategory(c);
            c = new Category()
            {
                CategoryName = "Email"
            };
            repository.AddCategory(c);
            c = new Category()
            {
                CategoryName = "Office"
            };
            repository.AddCategory(c);
            c = new Category()
            {
                CategoryName = "Storage And Backup"
            };
            repository.AddCategory(c);
            c = new Category()
            {
                CategoryName = "Project Management"
            };
            repository.AddCategory(c);
            c = new Category()
            {
                CategoryName = "Financial"
            };
            repository.AddCategory(c);
            c = new Category()
            {
                CategoryName = "Security"
            };
            repository.AddCategory(c);
            #endregion

            #region FEATURETYPES
            ft = new FeatureType()
            {
                FeatureTypeName = "Category",
            };
            repository.AddFeatureType(ft);

            ft = new FeatureType()
            {
                FeatureTypeName = "LicenceTypeMinimum",
            };
            repository.AddFeatureType(ft);

            ft = new FeatureType()
            {
                FeatureTypeName = "LicenceTypeMaximum",
            };
            repository.AddFeatureType(ft);
            ft = new FeatureType()
            {
                FeatureTypeName = "OperatingSystem",
            };
            repository.AddFeatureType(ft);
            ft = new FeatureType()
            {
                FeatureTypeName = "Browser",
            };
            repository.AddFeatureType(ft);
            ft = new FeatureType()
            {
                FeatureTypeName = "Feature",
            };
            repository.AddFeatureType(ft);

            ft = new FeatureType()
            {
                FeatureTypeName = "SupportType",
            };
            repository.AddFeatureType(ft);

            ft = new FeatureType()
            {
                FeatureTypeName = "SupportDays",
            };
            repository.AddFeatureType(ft);

            ft = new FeatureType()
            {
                FeatureTypeName = "SupportHours",
            };
            repository.AddFeatureType(ft);

            ft = new FeatureType()
            {
                FeatureTypeName = "Language",
            };
            repository.AddFeatureType(ft);
            #endregion

            this.FakeContext.SaveChanges();

            #region FEATURES

            #region VOICE FEATURES
            f = new Feature()
            {
                FeatureName = "Use Existing Handset",
                Categories = new List<Category>(),
                //Category = repository.FindCategoryByName("VOICE"),
            };
            f.Categories.Add(repository.FindCategoryByName("VOICE"));
            repository.AddFeature(f);
            f = new Feature()
            {
                FeatureName = "Keep Existing Number",
                Categories = new List<Category>(),
                //Category = repository.FindCategoryByName("VOICE"),
            };
            f.Categories.Add(repository.FindCategoryByName("VOICE"));
            repository.AddFeature(f);
            f = new Feature()
            {
                FeatureName = "Emergency Calls",
                Categories = new List<Category>(),
                //Category = repository.FindCategoryByName("VOICE"),
            };
            f.Categories.Add(repository.FindCategoryByName("VOICE"));
            repository.AddFeature(f);
            f = new Feature()
            {
                FeatureName = "PC Required (for Calls)",
                Categories = new List<Category>(),
                //Category = repository.FindCategoryByName("VOICE"),
            };
            f.Categories.Add(repository.FindCategoryByName("VOICE"));
            repository.AddFeature(f);
            f = new Feature()
            {
                FeatureName = "Inclusive UK Landline Calls",
                Categories = new List<Category>(),
                //Category = repository.FindCategoryByName("VOICE"),
            };
            f.Categories.Add(repository.FindCategoryByName("VOICE"));
            repository.AddFeature(f);
            f = new Feature()
            {
                FeatureName = "Inclusive Mobile Calls",
                Categories = new List<Category>(),
                //Category = repository.FindCategoryByName("VOICE"),
            };
            f.Categories.Add(repository.FindCategoryByName("VOICE"));
            repository.AddFeature(f);
            f = new Feature()
            {
                FeatureName = "Inclusive International Calls (Landline Only)",
                Categories = new List<Category>(),
                //Category = repository.FindCategoryByName("VOICE"),
            };
            f.Categories.Add(repository.FindCategoryByName("VOICE"));
            repository.AddFeature(f);
            f = new Feature()
            {
                FeatureName = "Virtual Landline Number",
                Categories = new List<Category>(),
                //Category = repository.FindCategoryByName("VOICE"),
            };
            f.Categories.Add(repository.FindCategoryByName("VOICE"));
            repository.AddFeature(f);
            f = new Feature()
            {
                FeatureName = "Local Dialling Code",
                Categories = new List<Category>(),
                //Category = repository.FindCategoryByName("VOICE"),
            };
            f.Categories.Add(repository.FindCategoryByName("VOICE"));
            repository.AddFeature(f);
            f = new Feature()
            {
                FeatureName = "Freephone/Local Rate Number",
                Categories = new List<Category>(),
                //Category = repository.FindCategoryByName("VOICE"),
            };
            f.Categories.Add(repository.FindCategoryByName("VOICE"));
            repository.AddFeature(f);
            f = new Feature()
            {
                FeatureName = "Dial-by-name Directory",
                Categories = new List<Category>(),
                //Category = repository.FindCategoryByName("VOICE"),
            };
            f.Categories.Add(repository.FindCategoryByName("VOICE"));
            repository.AddFeature(f);
            f = new Feature()
            {
                FeatureName = "Video Calling",
                Categories = new List<Category>(),
                //Category = repository.FindCategoryByName("VOICE"),
            };
            f.Categories.Add(repository.FindCategoryByName("VOICE"));
            repository.AddFeature(f);
            f = new Feature()
            {
                FeatureName = "Auto-Reception/Call Handling",
                Categories = new List<Category>(),
                //Category = repository.FindCategoryByName("VOICE"),
            };
            f.Categories.Add(repository.FindCategoryByName("VOICE"));
            repository.AddFeature(f);
            f = new Feature()
            {
                FeatureName = "Answering Rules",
                Categories = new List<Category>(),
                //Category = repository.FindCategoryByName("VOICE"),
            };
            f.Categories.Add(repository.FindCategoryByName("VOICE"));
            repository.AddFeature(f);
            f = new Feature()
            {
                FeatureName = "Call Centre/Interactive Voice Response",
                Categories = new List<Category>(),
                //Category = repository.FindCategoryByName("VOICE"),
            };
            f.Categories.Add(repository.FindCategoryByName("VOICE"));
            repository.AddFeature(f);
            f = new Feature()
            {
                FeatureName = "Music-on-hold",
                Categories = new List<Category>(),
                //Category = repository.FindCategoryByName("VOICE"),
            };
            f.Categories.Add(repository.FindCategoryByName("VOICE"));
            repository.AddFeature(f);
            f = new Feature()
            {
                FeatureName = "Voicemail",
                Categories = new List<Category>(),
                //Category = repository.FindCategoryByName("VOICE"),
            };
            f.Categories.Add(repository.FindCategoryByName("VOICE"));
            repository.AddFeature(f);
            f = new Feature()
            {
                FeatureName = "SMS Sending",
                Categories = new List<Category>(),
                //Category = repository.FindCategoryByName("VOICE"),
            };
            f.Categories.Add(repository.FindCategoryByName("VOICE"));
            repository.AddFeature(f);
            f = new Feature()
            {
                FeatureName = "Call Forwarding",
                Categories = new List<Category>(),
                //Category = repository.FindCategoryByName("VOICE"),
            };
            f.Categories.Add(repository.FindCategoryByName("VOICE"));
            repository.AddFeature(f);
            f = new Feature()
            {
                FeatureName = "Fixed-to-mobile Integration",
                Categories = new List<Category>(),
                //Category = repository.FindCategoryByName("VOICE"),
            };
            f.Categories.Add(repository.FindCategoryByName("VOICE"));
            repository.AddFeature(f);
            f = new Feature()
            {
                FeatureName = "Hardware Supplied",
                Categories = new List<Category>(),
                //Category = repository.FindCategoryByName("VOICE"),
            };
            f.Categories.Add(repository.FindCategoryByName("VOICE"));
            repository.AddFeature(f);
            #endregion

            #region CUSTOMER MANAGEMENT FEATURES
            f = new Feature()
            {
                FeatureName = "Unlimited Contacts",
                Categories = new List<Category>(),
                //Category = repository.FindCategoryByName("CUSTOMER MANAGEMENT"),
            };
            f.Categories.Add(repository.FindCategoryByName("CUSTOMER MANAGEMENT"));
            repository.AddFeature(f);
            f = new Feature()
            {
                FeatureName = "Unlimited Storage (for Documents, PPTs, PDFs)",
                Categories = new List<Category>(),
                //Category = repository.FindCategoryByName("CUSTOMER MANAGEMENT"),
            };
            f.Categories.Add(repository.FindCategoryByName("CUSTOMER MANAGEMENT"));
            repository.AddFeature(f);
            f = new Feature()
            {
                FeatureName = "Sales Opportunity Management",
                Categories = new List<Category>(),
                //Category = repository.FindCategoryByName("CUSTOMER MANAGEMENT"),
            };
            f.Categories.Add(repository.FindCategoryByName("CUSTOMER MANAGEMENT"));
            repository.AddFeature(f);
            f = new Feature()
            {
                FeatureName = "Sales Forecasting",
                Categories = new List<Category>(),
                //Category = repository.FindCategoryByName("CUSTOMER MANAGEMENT"),
            };
            f.Categories.Add(repository.FindCategoryByName("CUSTOMER MANAGEMENT"));
            repository.AddFeature(f);
            f = new Feature()
            {
                FeatureName = "Web to Lead Form",
                Categories = new List<Category>(),
                //Category = repository.FindCategoryByName("CUSTOMER MANAGEMENT"),
            };
            f.Categories.Add(repository.FindCategoryByName("CUSTOMER MANAGEMENT"));
            repository.AddFeature(f);
            f = new Feature()
            {
                FeatureName = "Email Marketing",
                Categories = new List<Category>(),
                //Category = repository.FindCategoryByName("CUSTOMER MANAGEMENT"),
            };
            f.Categories.Add(repository.FindCategoryByName("CUSTOMER MANAGEMENT"));
            repository.AddFeature(f);
            f = new Feature()
            {
                FeatureName = "Campaign Tracking and Management",
                Categories = new List<Category>(),
                //Category = repository.FindCategoryByName("CUSTOMER MANAGEMENT"),
            };
            f.Categories.Add(repository.FindCategoryByName("CUSTOMER MANAGEMENT"));
            repository.AddFeature(f);
            f = new Feature()
            {
                FeatureName = "Email Integration",
                Categories = new List<Category>(),
                //Category = repository.FindCategoryByName("CUSTOMER MANAGEMENT"),
            };
            f.Categories.Add(repository.FindCategoryByName("CUSTOMER MANAGEMENT"));
            repository.AddFeature(f);
            f = new Feature()
            {
                FeatureName = "Customer Helpdesk",
                Categories = new List<Category>(),
                //Category = repository.FindCategoryByName("CUSTOMER MANAGEMENT"),
            };
            f.Categories.Add(repository.FindCategoryByName("CUSTOMER MANAGEMENT"));
            repository.AddFeature(f);
            f = new Feature()
            {
                FeatureName = "Case Queueing & Tracking",
                Categories = new List<Category>(),
                //Category = repository.FindCategoryByName("CUSTOMER MANAGEMENT"),
            };
            f.Categories.Add(repository.FindCategoryByName("CUSTOMER MANAGEMENT"));
            repository.AddFeature(f);
            f = new Feature()
            {
                FeatureName = "Unlimited Cases",
                Categories = new List<Category>(),
                //Category = repository.FindCategoryByName("CUSTOMER MANAGEMENT"),
            };
            f.Categories.Add(repository.FindCategoryByName("CUSTOMER MANAGEMENT"));
            repository.AddFeature(f);
            f = new Feature()
            {
                FeatureName = "Document Management",
                Categories = new List<Category>(),
                //Category = repository.FindCategoryByName("CUSTOMER MANAGEMENT"),
            };
            f.Categories.Add(repository.FindCategoryByName("CUSTOMER MANAGEMENT"));
            repository.AddFeature(f);
            f = new Feature()
            {
                FeatureName = "Custom Reports",
                Categories = new List<Category>(),
                //Category = repository.FindCategoryByName("CUSTOMER MANAGEMENT"),
            };
            f.Categories.Add(repository.FindCategoryByName("CUSTOMER MANAGEMENT"));
            repository.AddFeature(f);
            f = new Feature()
            {
                FeatureName = "Full SSL Security",
                Categories = new List<Category>(),
                //Category = repository.FindCategoryByName("CUSTOMER MANAGEMENT"),
            };
            f.Categories.Add(repository.FindCategoryByName("CUSTOMER MANAGEMENT"));
            repository.AddFeature(f);
            f = new Feature()
            {
                FeatureName = "Mobile Integration",
                Categories = new List<Category>(),
                //Category = repository.FindCategoryByName("CUSTOMER MANAGEMENT"),
            };
            f.Categories.Add(repository.FindCategoryByName("CUSTOMER MANAGEMENT"));
            repository.AddFeature(f);
            f = new Feature()
            {
                FeatureName = "Invoice Creation & Management",
                Categories = new List<Category>(),
                //Category = repository.FindCategoryByName("CUSTOMER MANAGEMENT"),
            };
            f.Categories.Add(repository.FindCategoryByName("CUSTOMER MANAGEMENT"));
            repository.AddFeature(f);
            f = new Feature()
            {
                FeatureName = "Inventory & Order Management",
                Categories = new List<Category>(),
                //Category = repository.FindCategoryByName("CUSTOMER MANAGEMENT"),
            };
            f.Categories.Add(repository.FindCategoryByName("CUSTOMER MANAGEMENT"));
            repository.AddFeature(f);
            f = new Feature()
            {
                FeatureName = "Open API/3rd Party Integration",
                Categories = new List<Category>(),
                //Category = repository.FindCategoryByName("CUSTOMER MANAGEMENT"),
            };
            f.Categories.Add(repository.FindCategoryByName("CUSTOMER MANAGEMENT"));
            repository.AddFeature(f);
            f = new Feature()
            {
                FeatureName = "Social Media Integration",
                Categories = new List<Category>(),
                //Category = repository.FindCategoryByName("CUSTOMER MANAGEMENT"),
            };
            f.Categories.Add(repository.FindCategoryByName("CUSTOMER MANAGEMENT"));
            repository.AddFeature(f);
            f = new Feature()
            {
                FeatureName = "User Customization",
                Categories = new List<Category>(),
                //Category = repository.FindCategoryByName("CUSTOMER MANAGEMENT"),
            };
            f.Categories.Add(repository.FindCategoryByName("CUSTOMER MANAGEMENT"));
            repository.AddFeature(f);
            #endregion

            #region WEB CONFERENCING FEATURES
            f = new Feature()
            {
                FeatureName = "Maximum Meeting Attendees",
                Categories = new List<Category>(),
                //Category = repository.FindCategoryByName("WEB CONFERENCING"),
            };
            f.Categories.Add(repository.FindCategoryByName("WEB CONFERENCING"));
            repository.AddFeature(f);
            f = new Feature()
            {
                FeatureName = "Maximum Webinar/Event Attendees",
                Categories = new List<Category>(),
                //Category = repository.FindCategoryByName("WEB CONFERENCING"),
            };
            f.Categories.Add(repository.FindCategoryByName("WEB CONFERENCING"));
            repository.AddFeature(f);
            f = new Feature()
            {
                FeatureName = "High Definition Video",
                Categories = new List<Category>(),
                //Category = repository.FindCategoryByName("WEB CONFERENCING"),
            };
            f.Categories.Add(repository.FindCategoryByName("WEB CONFERENCING"));
            repository.AddFeature(f);
            f = new Feature()
            {
                FeatureName = "Presenter Preparation Mode",
                Categories = new List<Category>(),
                //Category = repository.FindCategoryByName("WEB CONFERENCING"),
            };
            f.Categories.Add(repository.FindCategoryByName("WEB CONFERENCING"));
            repository.AddFeature(f);
            f = new Feature()
            {
                FeatureName = "Multiple Meeting Hosts/Chairperson",
                Categories = new List<Category>(),
                //Category = repository.FindCategoryByName("WEB CONFERENCING"),
            };
            f.Categories.Add(repository.FindCategoryByName("WEB CONFERENCING"));
            repository.AddFeature(f);
            f = new Feature()
            {
                FeatureName = "Individual Usage Reports",
                Categories = new List<Category>(),
                //Category = repository.FindCategoryByName("WEB CONFERENCING"),
            };
            f.Categories.Add(repository.FindCategoryByName("WEB CONFERENCING"));
            repository.AddFeature(f);
            f = new Feature()
            {
                FeatureName = "'On The Fly' Invitations For Additional Participants",
                Categories = new List<Category>(),
                //Category = repository.FindCategoryByName("WEB CONFERENCING"),
            };
            f.Categories.Add(repository.FindCategoryByName("WEB CONFERENCING"));
            repository.AddFeature(f);
            f = new Feature()
            {
                FeatureName = "Instant Meeting Function",
                Categories = new List<Category>(),
                //Category = repository.FindCategoryByName("WEB CONFERENCING"),
            };
            f.Categories.Add(repository.FindCategoryByName("WEB CONFERENCING"));
            repository.AddFeature(f);
            f = new Feature()
            {
                FeatureName = "Active Speaker Video Switching",
                Categories = new List<Category>(),
                //Category = repository.FindCategoryByName("WEB CONFERENCING"),
            };
            f.Categories.Add(repository.FindCategoryByName("WEB CONFERENCING"));
            repository.AddFeature(f);
            f = new Feature()
            {
                FeatureName = "Full Desktop Sharing",
                Categories = new List<Category>(),
                //Category = repository.FindCategoryByName("WEB CONFERENCING"),
            };
            f.Categories.Add(repository.FindCategoryByName("WEB CONFERENCING"));
            repository.AddFeature(f);
            f = new Feature()
            {
                FeatureName = "Single Application Share",
                Categories = new List<Category>(),
                //Category = repository.FindCategoryByName("WEB CONFERENCING"),
            };
            f.Categories.Add(repository.FindCategoryByName("WEB CONFERENCING"));
            repository.AddFeature(f);
            f = new Feature()
            {
                FeatureName = "Upload Multiple Presentations",
                Categories = new List<Category>(),
                //Category = repository.FindCategoryByName("WEB CONFERENCING"),
            };
            f.Categories.Add(repository.FindCategoryByName("WEB CONFERENCING"));
            repository.AddFeature(f);
            f = new Feature()
            {
                FeatureName = "Private Chat Mode",
                Categories = new List<Category>(),
                //Category = repository.FindCategoryByName("WEB CONFERENCING"),
            };
            f.Categories.Add(repository.FindCategoryByName("WEB CONFERENCING"));
            repository.AddFeature(f);
            f = new Feature()
            {
                FeatureName = "SSL Security",
                Categories = new List<Category>(),
                //Category = repository.FindCategoryByName("WEB CONFERENCING"),
            };
            f.Categories.Add(repository.FindCategoryByName("WEB CONFERENCING"));
            repository.AddFeature(f);
            f = new Feature()
            {
                FeatureName = "Record & Replay Service",
                Categories = new List<Category>(),
                //Category = repository.FindCategoryByName("WEB CONFERENCING"),
            };
            f.Categories.Add(repository.FindCategoryByName("WEB CONFERENCING"));
            repository.AddFeature(f);
            f = new Feature()
            {
                FeatureName = "Interface Company Branding",
                Categories = new List<Category>(),
                //Category = repository.FindCategoryByName("WEB CONFERENCING"),
            };
            f.Categories.Add(repository.FindCategoryByName("WEB CONFERENCING"));
            repository.AddFeature(f);
            f = new Feature()
            {
                FeatureName = "Inactivity Time Out",
                Categories = new List<Category>(),
                //Category = repository.FindCategoryByName("WEB CONFERENCING"),
            };
            f.Categories.Add(repository.FindCategoryByName("WEB CONFERENCING"));
            repository.AddFeature(f);
            f = new Feature()
            {
                FeatureName = "Fixed Line & Mobile Dial-In",
                Categories = new List<Category>(),
                //Category = repository.FindCategoryByName("WEB CONFERENCING"),
            };
            f.Categories.Add(repository.FindCategoryByName("WEB CONFERENCING"));
            repository.AddFeature(f);
            f = new Feature()
            {
                FeatureName = "Free VoIP Calling",
                Categories = new List<Category>(),
                //Category = repository.FindCategoryByName("WEB CONFERENCING"),
            };
            f.Categories.Add(repository.FindCategoryByName("WEB CONFERENCING"));
            repository.AddFeature(f);
            f = new Feature()
            {
                FeatureName = "MS Outlook Integration (to book meetings)",
                Categories = new List<Category>(),
                //Category = repository.FindCategoryByName("WEB CONFERENCING"),
            };
            f.Categories.Add(repository.FindCategoryByName("WEB CONFERENCING"));
            repository.AddFeature(f);
            #endregion

            #region EMAIL FEATURES
            f = new Feature()
            {
                FeatureName = "Number of Mailboxes/Email Addresses",
                Categories = new List<Category>(),
                //Category = repository.FindCategoryByName("EMAIL"),
            };
            f.Categories.Add(repository.FindCategoryByName("EMAIL"));
            repository.AddFeature(f);
            f = new Feature()
            {
                FeatureName = "Storage Limit",
                Categories = new List<Category>(),
                //Category = repository.FindCategoryByName("EMAIL"),
            };
            f.Categories.Add(repository.FindCategoryByName("EMAIL"));
            repository.AddFeature(f);
            f = new Feature()
            {
                FeatureName = "Individual File Size Limit (Attachments)",
                Categories = new List<Category>(),
                //Category = repository.FindCategoryByName("EMAIL"),
            };
            f.Categories.Add(repository.FindCategoryByName("EMAIL"));
            repository.AddFeature(f);
            f = new Feature()
            {
                FeatureName = "No Daily Mail Limits (Inbox/Outbox)",
                Categories = new List<Category>(),
                //Category = repository.FindCategoryByName("EMAIL"),
            };
            f.Categories.Add(repository.FindCategoryByName("EMAIL"));
            repository.AddFeature(f);
            f = new Feature()
            {
                FeatureName = "Migrate Company Domain",
                Categories = new List<Category>(),
                //Category = repository.FindCategoryByName("EMAIL"),
            };
            f.Categories.Add(repository.FindCategoryByName("EMAIL"));
            repository.AddFeature(f);
            f = new Feature()
            {
                FeatureName = "Anti-Virus",
                Categories = new List<Category>(),
                //Category = repository.FindCategoryByName("EMAIL"),
            };
            f.Categories.Add(repository.FindCategoryByName("EMAIL"));
            repository.AddFeature(f);
            f = new Feature()
            {
                FeatureName = "Spam Guard / Anti-Phishing",
                Categories = new List<Category>(),
                //Category = repository.FindCategoryByName("EMAIL"),
            };
            f.Categories.Add(repository.FindCategoryByName("EMAIL"));
            repository.AddFeature(f);
            f = new Feature()
            {
                FeatureName = "Block Addresses / Blacklist",
                Categories = new List<Category>(),
                //Category = repository.FindCategoryByName("EMAIL"),
            };
            f.Categories.Add(repository.FindCategoryByName("EMAIL"));
            repository.AddFeature(f);
            f = new Feature()
            {
                FeatureName = "Aliases",
                Categories = new List<Category>(),
                //Category = repository.FindCategoryByName("EMAIL"),
            };
            f.Categories.Add(repository.FindCategoryByName("EMAIL"));
            repository.AddFeature(f);
            f = new Feature()
            {
                FeatureName = "Ad-free",
                Categories = new List<Category>(),
                //Category = repository.FindCategoryByName("EMAIL"),
            };
            f.Categories.Add(repository.FindCategoryByName("EMAIL"));
            repository.AddFeature(f);
            f = new Feature()
            {
                FeatureName = "Email Archiving",
                Categories = new List<Category>(),
                //Category = repository.FindCategoryByName("EMAIL"),
            };
            f.Categories.Add(repository.FindCategoryByName("EMAIL"));
            repository.AddFeature(f);
            f = new Feature()
            {
                FeatureName = "Quick Filter Toolbar",
                Categories = new List<Category>(),
                //Category = repository.FindCategoryByName("EMAIL"),
            };
            f.Categories.Add(repository.FindCategoryByName("EMAIL"));
            repository.AddFeature(f);
            f = new Feature()
            {
                FeatureName = "Smart Folders",
                Categories = new List<Category>(),
                //Category = repository.FindCategoryByName("EMAIL"),
            };
            f.Categories.Add(repository.FindCategoryByName("EMAIL"));
            repository.AddFeature(f);
            f = new Feature()
            {
                FeatureName = "Account Groups",
                Categories = new List<Category>(),
                //Category = repository.FindCategoryByName("EMAIL"),
            };
            f.Categories.Add(repository.FindCategoryByName("EMAIL"));
            repository.AddFeature(f);
            f = new Feature()
            {
                FeatureName = "Instant Messaging (IM)",
                Categories = new List<Category>(),
                //Category = repository.FindCategoryByName("EMAIL"),
            };
            f.Categories.Add(repository.FindCategoryByName("EMAIL"));
            repository.AddFeature(f);
            f = new Feature()
            {
                FeatureName = "Track Conversations",
                Categories = new List<Category>(),
                //Category = repository.FindCategoryByName("EMAIL"),
            };
            f.Categories.Add(repository.FindCategoryByName("EMAIL"));
            repository.AddFeature(f);
            f = new Feature()
            {
                FeatureName = "Social Media Integration",
                Categories = new List<Category>(),
                //Category = repository.FindCategoryByName("EMAIL"),
            };
            f.Categories.Add(repository.FindCategoryByName("EMAIL"));
            repository.AddFeature(f);
            f = new Feature()
            {
                FeatureName = "MS Outlook Compatible",
                Categories = new List<Category>(),
                //Category = repository.FindCategoryByName("EMAIL"),
            };
            f.Categories.Add(repository.FindCategoryByName("EMAIL"));
            repository.AddFeature(f);
            f = new Feature()
            {
                FeatureName = "Email Migration Service",
                Categories = new List<Category>(),
                //Category = repository.FindCategoryByName("EMAIL"),
            };
            f.Categories.Add(repository.FindCategoryByName("EMAIL"));
            repository.AddFeature(f);
            f = new Feature()
            {
                FeatureName = "SSL Security",
                Categories = new List<Category>(),
                //Category = repository.FindCategoryByName("EMAIL"),
            };
            f.Categories.Add(repository.FindCategoryByName("EMAIL"));
            repository.AddFeature(f);
            #endregion

            #region OFFICE FEATURES
            f = new Feature()
            {
                FeatureName = "Advanced Proofing & Editing",
                Categories = new List<Category>(),
                //Category = repository.FindCategoryByName("OFFICE"),
            };
            f.Categories.Add(repository.FindCategoryByName("OFFICE"));
            repository.AddFeature(f);
            f = new Feature()
            {
                FeatureName = "Advanced Referencing & Indexing",
                Categories = new List<Category>(),
                //Category = repository.FindCategoryByName("OFFICE"),
            };
            f.Categories.Add(repository.FindCategoryByName("OFFICE"));
            repository.AddFeature(f);
            f = new Feature()
            {
                FeatureName = "Mailing Features",
                Categories = new List<Category>(),
                //Category = repository.FindCategoryByName("OFFICE"),
            };
            f.Categories.Add(repository.FindCategoryByName("OFFICE"));
            repository.AddFeature(f);
            f = new Feature()
            {
                FeatureName = "Formula Management",
                Categories = new List<Category>(),
                //Category = repository.FindCategoryByName("OFFICE"),
            };
            f.Categories.Add(repository.FindCategoryByName("OFFICE"));
            repository.AddFeature(f);
            f = new Feature()
            {
                FeatureName = "Data Management",
                Categories = new List<Category>(),
                //Category = repository.FindCategoryByName("OFFICE"),
            };
            f.Categories.Add(repository.FindCategoryByName("OFFICE"));
            repository.AddFeature(f);
            f = new Feature()
            {
                FeatureName = "Advanced Charting & Tables",
                Categories = new List<Category>(),
                //Category = repository.FindCategoryByName("OFFICE"),
            };
            f.Categories.Add(repository.FindCategoryByName("OFFICE"));
            repository.AddFeature(f);
            f = new Feature()
            {
                FeatureName = "Advanced Design & Animation",
                Categories = new List<Category>(),
                //Category = repository.FindCategoryByName("OFFICE"),
            };
            f.Categories.Add(repository.FindCategoryByName("OFFICE"));
            repository.AddFeature(f);
            f = new Feature()
            {
                FeatureName = "Real-Time Collaboration",
                Categories = new List<Category>(),
                //Category = repository.FindCategoryByName("OFFICE"),
            };
            f.Categories.Add(repository.FindCategoryByName("OFFICE"));
            repository.AddFeature(f);
            f = new Feature()
            {
                FeatureName = "Automatic Version Management",
                Categories = new List<Category>(),
                //Category = repository.FindCategoryByName("OFFICE"),
            };
            f.Categories.Add(repository.FindCategoryByName("OFFICE"));
            repository.AddFeature(f);
            f = new Feature()
            {
                FeatureName = "Large Video Files >50MB",
                Categories = new List<Category>(),
                //Category = repository.FindCategoryByName("OFFICE"),
            };
            f.Categories.Add(repository.FindCategoryByName("OFFICE"));
            repository.AddFeature(f);
            f = new Feature()
            {
                FeatureName = "Own Branding",
                Categories = new List<Category>(),
                //Category = repository.FindCategoryByName("OFFICE"),
            };
            f.Categories.Add(repository.FindCategoryByName("OFFICE"));
            repository.AddFeature(f);
            f = new Feature()
            {
                FeatureName = "Shared/Collaboration Workspace",
                Categories = new List<Category>(),
                //Category = repository.FindCategoryByName("OFFICE"),
            };
            f.Categories.Add(repository.FindCategoryByName("OFFICE"));
            repository.AddFeature(f);
            f = new Feature()
            {
                FeatureName = "Email Client",
                Categories = new List<Category>(),
                //Category = repository.FindCategoryByName("OFFICE"),
            };
            f.Categories.Add(repository.FindCategoryByName("OFFICE"));
            repository.AddFeature(f);
            f = new Feature()
            {
                FeatureName = "Contact Management",
                Categories = new List<Category>(),
                //Category = repository.FindCategoryByName("OFFICE"),
            };
            f.Categories.Add(repository.FindCategoryByName("OFFICE"));
            repository.AddFeature(f);
            f = new Feature()
            {
                FeatureName = "Shared Calendar",
                Categories = new List<Category>(),
                //Category = repository.FindCategoryByName("OFFICE"),
            };
            f.Categories.Add(repository.FindCategoryByName("OFFICE"));
            repository.AddFeature(f);
            f = new Feature()
            {
                FeatureName = "Web Meetings",
                Categories = new List<Category>(),
                //Category = repository.FindCategoryByName("OFFICE"),
            };
            f.Categories.Add(repository.FindCategoryByName("OFFICE"));
            repository.AddFeature(f);
            f = new Feature()
            {
                FeatureName = "Project Management / Task Manager",
                Categories = new List<Category>(),
                //Category = repository.FindCategoryByName("OFFICE"),
            };
            f.Categories.Add(repository.FindCategoryByName("OFFICE"));
            repository.AddFeature(f);
            f = new Feature()
            {
                FeatureName = "Internet Tools",
                Categories = new List<Category>(),
                //Category = repository.FindCategoryByName("OFFICE"),
            };
            f.Categories.Add(repository.FindCategoryByName("OFFICE"));
            repository.AddFeature(f);
            f = new Feature()
            {
                FeatureName = "Web Publishing e.g. Blog",
                Categories = new List<Category>(),
                //Category = repository.FindCategoryByName("OFFICE"),
            };
            f.Categories.Add(repository.FindCategoryByName("OFFICE"));
            repository.AddFeature(f);
            f = new Feature()
            {
                FeatureName = "Social Media Integration",
                Categories = new List<Category>(),
                //Category = repository.FindCategoryByName("OFFICE"),
            };
            f.Categories.Add(repository.FindCategoryByName("OFFICE"));
            repository.AddFeature(f);
            f = new Feature()
            {
                FeatureName = "Internal Website (Intranet)",
                Categories = new List<Category>(),
                //Category = repository.FindCategoryByName("OFFICE"),
            };
            f.Categories.Add(repository.FindCategoryByName("OFFICE"));
            repository.AddFeature(f);
            f = new Feature()
            {
                FeatureName = "External Customer Website (Extranet)",
                Categories = new List<Category>(),
                //Category = repository.FindCategoryByName("OFFICE"),
            };
            f.Categories.Add(repository.FindCategoryByName("OFFICE"));
            repository.AddFeature(f);
            f = new Feature()
            {
                FeatureName = "Notes",
                Categories = new List<Category>(),
                //Category = repository.FindCategoryByName("OFFICE"),
            };
            f.Categories.Add(repository.FindCategoryByName("OFFICE"));
            repository.AddFeature(f);
            f = new Feature()
            {
                FeatureName = "Read & Edit",
                Categories = new List<Category>(),
                //Category = repository.FindCategoryByName("OFFICE"),
            };
            f.Categories.Add(repository.FindCategoryByName("OFFICE"));
            repository.AddFeature(f);
            f = new Feature()
            {
                FeatureName = "Save Web Content",
                Categories = new List<Category>(),
                //Category = repository.FindCategoryByName("OFFICE"),
            };
            f.Categories.Add(repository.FindCategoryByName("OFFICE"));
            repository.AddFeature(f);
            f = new Feature()
            {
                FeatureName = "Image Capture",
                Categories = new List<Category>(),
                //Category = repository.FindCategoryByName("OFFICE"),
            };
            f.Categories.Add(repository.FindCategoryByName("OFFICE"));
            repository.AddFeature(f);
            f = new Feature()
            {
                FeatureName = "Automatic Sync (for use on other devices)",
                Categories = new List<Category>(),
                //Category = repository.FindCategoryByName("OFFICE"),
            };
            f.Categories.Add(repository.FindCategoryByName("OFFICE"));
            repository.AddFeature(f);
            f = new Feature()
            {
                FeatureName = "MS Office Compatible",
                Categories = new List<Category>(),
                //Category = repository.FindCategoryByName("OFFICE"),
            };
            f.Categories.Add(repository.FindCategoryByName("OFFICE"));
            repository.AddFeature(f);
            f = new Feature()
            {
                FeatureName = "Offline Mode (for desktop editing)",
                Categories = new List<Category>(),
                //Category = repository.FindCategoryByName("OFFICE"),
            };
            f.Categories.Add(repository.FindCategoryByName("OFFICE"));
            repository.AddFeature(f);
            f = new Feature()
            {
                FeatureName = "Unlimited Document Storage",
                Categories = new List<Category>(),
                //Category = repository.FindCategoryByName("OFFICE"),
            };
            f.Categories.Add(repository.FindCategoryByName("OFFICE"));
            repository.AddFeature(f);
            f = new Feature()
            {
                FeatureName = "Document Revision History",
                Categories = new List<Category>(),
                //Category = repository.FindCategoryByName("OFFICE"),
            };
            f.Categories.Add(repository.FindCategoryByName("OFFICE"));
            repository.AddFeature(f);
            f = new Feature()
            {
                FeatureName = "Document Password Protection",
                Categories = new List<Category>(),
                //Category = repository.FindCategoryByName("OFFICE"),
            };
            f.Categories.Add(repository.FindCategoryByName("OFFICE"));
            repository.AddFeature(f);
            f = new Feature()
            {
                FeatureName = "Mobile/Browser Editing",
                Categories = new List<Category>(),
                //Category = repository.FindCategoryByName("OFFICE"),
            };
            f.Categories.Add(repository.FindCategoryByName("OFFICE"));
            repository.AddFeature(f);
            f = new Feature()
            {
                FeatureName = "Multi-User / Guest User",
                Categories = new List<Category>(),
                //Category = repository.FindCategoryByName("OFFICE"),
            };
            f.Categories.Add(repository.FindCategoryByName("OFFICE"));
            repository.AddFeature(f);
            f = new Feature()
            {
                FeatureName = "3rd Party APIs",
                Categories = new List<Category>(),
                //Category = repository.FindCategoryByName("OFFICE"),
            };
            f.Categories.Add(repository.FindCategoryByName("OFFICE"));
            repository.AddFeature(f);
            f = new Feature()
            {
                FeatureName = "SSL Security/Encryption",
                Categories = new List<Category>(),
                //Category = repository.FindCategoryByName("OFFICE"),
            };
            f.Categories.Add(repository.FindCategoryByName("OFFICE"));
            repository.AddFeature(f);
            #endregion

            #region STORAGE AND BACKUP
            f = new Feature()
            {
                FeatureName = "Storage Limit",
                Categories = new List<Category>(),
                //Category = repository.FindCategoryByName("STORAGE AND BACKUP"),
            };
            f.Categories.Add(repository.FindCategoryByName("STORAGE AND BACKUP"));
            repository.AddFeature(f);
            f = new Feature()
            {
                FeatureName = "Individual File Limit",
                Categories = new List<Category>(),
                //Category = repository.FindCategoryByName("STORAGE AND BACKUP"),
            };
            f.Categories.Add(repository.FindCategoryByName("STORAGE AND BACKUP"));
            repository.AddFeature(f);
            f = new Feature()
            {
                FeatureName = "Adjust Transfer Speed / Bandwidth Used",
                Categories = new List<Category>(),
                //Category = repository.FindCategoryByName("STORAGE AND BACKUP"),
            };
            f.Categories.Add(repository.FindCategoryByName("STORAGE AND BACKUP"));
            repository.AddFeature(f);
            f = new Feature()
            {
                FeatureName = "Military Grade Data Transfer",
                Categories = new List<Category>(),
                //Category = repository.FindCategoryByName("STORAGE AND BACKUP"),
            };
            f.Categories.Add(repository.FindCategoryByName("STORAGE AND BACKUP"));
            repository.AddFeature(f);
            f = new Feature()
            {
                FeatureName = "Military Grade Storage",
                Categories = new List<Category>(),
                //Category = repository.FindCategoryByName("STORAGE AND BACKUP"),
            };
            f.Categories.Add(repository.FindCategoryByName("STORAGE AND BACKUP"));
            repository.AddFeature(f);
            f = new Feature()
            {
                FeatureName = "Version History",
                Categories = new List<Category>(),
                //Category = repository.FindCategoryByName("STORAGE AND BACKUP"),
            };
            f.Categories.Add(repository.FindCategoryByName("STORAGE AND BACKUP"));
            repository.AddFeature(f);
            f = new Feature()
            {
                FeatureName = "Undelete Files (up to 30 days)",
                Categories = new List<Category>(),
                //Category = repository.FindCategoryByName("STORAGE AND BACKUP"),
            };
            f.Categories.Add(repository.FindCategoryByName("STORAGE AND BACKUP"));
            repository.AddFeature(f);
            f = new Feature()
            {
                FeatureName = "No Bandwidth Throttling",
                Categories = new List<Category>(),
                //Category = repository.FindCategoryByName("STORAGE AND BACKUP"),
            };
            f.Categories.Add(repository.FindCategoryByName("STORAGE AND BACKUP"));
            repository.AddFeature(f);
            f = new Feature()
            {
                FeatureName = "One-Click Sharing",
                Categories = new List<Category>(),
                //Category = repository.FindCategoryByName("STORAGE AND BACKUP"),
            };
            f.Categories.Add(repository.FindCategoryByName("STORAGE AND BACKUP"));
            repository.AddFeature(f);
            f = new Feature()
            {
                FeatureName = "Drag & Drop Multiple Files",
                Categories = new List<Category>(),
                //Category = repository.FindCategoryByName("STORAGE AND BACKUP"),
            };
            f.Categories.Add(repository.FindCategoryByName("STORAGE AND BACKUP"));
            repository.AddFeature(f);
            f = new Feature()
            {
                FeatureName = "Multi-User Access",
                Categories = new List<Category>(),
                //Category = repository.FindCategoryByName("STORAGE AND BACKUP"),
            };
            f.Categories.Add(repository.FindCategoryByName("STORAGE AND BACKUP"));
            repository.AddFeature(f);
            f = new Feature()
            {
                FeatureName = "Password Protected Folder Sharing",
                Categories = new List<Category>(),
                //Category = repository.FindCategoryByName("STORAGE AND BACKUP"),
            };
            f.Categories.Add(repository.FindCategoryByName("STORAGE AND BACKUP"));
            repository.AddFeature(f);
            f = new Feature()
            {
                FeatureName = "Role Based Access",
                Categories = new List<Category>(),
                //Category = repository.FindCategoryByName("STORAGE AND BACKUP"),
            };
            f.Categories.Add(repository.FindCategoryByName("STORAGE AND BACKUP"));
            repository.AddFeature(f);
            f = new Feature()
            {
                FeatureName = "Search Within Documents",
                Categories = new List<Category>(),
                //Category = repository.FindCategoryByName("STORAGE AND BACKUP"),
            };
            f.Categories.Add(repository.FindCategoryByName("STORAGE AND BACKUP"));
            repository.AddFeature(f);
            f = new Feature()
            {
                FeatureName = "Local Back-Up",
                Categories = new List<Category>(),
                //Category = repository.FindCategoryByName("STORAGE AND BACKUP"),
            };
            f.Categories.Add(repository.FindCategoryByName("STORAGE AND BACKUP"));
            repository.AddFeature(f);
            f = new Feature()
            {
                FeatureName = "Server Back-Up",
                Categories = new List<Category>(),
                //Category = repository.FindCategoryByName("STORAGE AND BACKUP"),
            };
            f.Categories.Add(repository.FindCategoryByName("STORAGE AND BACKUP"));
            repository.AddFeature(f);
            f = new Feature()
            {
                FeatureName = "Automatic Back-Up",
                Categories = new List<Category>(),
                //Category = repository.FindCategoryByName("STORAGE AND BACKUP"),
            };
            f.Categories.Add(repository.FindCategoryByName("STORAGE AND BACKUP"));
            repository.AddFeature(f);
            f = new Feature()
            {
                FeatureName = "Store Video e.g. Movies",
                Categories = new List<Category>(),
                //Category = repository.FindCategoryByName("STORAGE AND BACKUP"),
            };
            f.Categories.Add(repository.FindCategoryByName("STORAGE AND BACKUP"));
            repository.AddFeature(f);
            f = new Feature()
            {
                FeatureName = "Guaranteed Restore",
                Categories = new List<Category>(),
                //Category = repository.FindCategoryByName("STORAGE AND BACKUP"),
            };
            f.Categories.Add(repository.FindCategoryByName("STORAGE AND BACKUP"));
            repository.AddFeature(f);
            f = new Feature()
            {
                FeatureName = "Social Media Back-Up",
                Categories = new List<Category>(),
                //Category = repository.FindCategoryByName("STORAGE AND BACKUP"),
            };
            f.Categories.Add(repository.FindCategoryByName("STORAGE AND BACKUP"));
            repository.AddFeature(f);
            #endregion

            #region PROJECT MANAGEMENT
            f = new Feature()
            {
                FeatureName = "Number Of Projects",
                Categories = new List<Category>(),
                //Category = repository.FindCategoryByName("PROJECT MANAGEMENT"),
            };
            f.Categories.Add(repository.FindCategoryByName("PROJECT MANAGEMENT"));
            repository.AddFeature(f);
            f = new Feature()
            {
                FeatureName = "File Storage",
                Categories = new List<Category>(),
                //Category = repository.FindCategoryByName("PROJECT MANAGEMENT"),
            };
            f.Categories.Add(repository.FindCategoryByName("PROJECT MANAGEMENT"));
            repository.AddFeature(f);
            f = new Feature()
            {
                FeatureName = "Multi-Users Per Account",
                Categories = new List<Category>(),
                //Category = repository.FindCategoryByName("PROJECT MANAGEMENT"),
            };
            f.Categories.Add(repository.FindCategoryByName("PROJECT MANAGEMENT"));
            repository.AddFeature(f);
            f = new Feature()
            {
                FeatureName = "Document Sharing",
                Categories = new List<Category>(),
                //Category = repository.FindCategoryByName("PROJECT MANAGEMENT"),
            };
            f.Categories.Add(repository.FindCategoryByName("PROJECT MANAGEMENT"));
            repository.AddFeature(f);
            f = new Feature()
            {
                FeatureName = "Shared Workspace",
                Categories = new List<Category>(),
                //Category = repository.FindCategoryByName("PROJECT MANAGEMENT"),
            };
            f.Categories.Add(repository.FindCategoryByName("PROJECT MANAGEMENT"));
            repository.AddFeature(f);
            f = new Feature()
            {
                FeatureName = "Edited Document Tracking",
                Categories = new List<Category>(),
                //Category = repository.FindCategoryByName("PROJECT MANAGEMENT"),
            };
            f.Categories.Add(repository.FindCategoryByName("PROJECT MANAGEMENT"));
            repository.AddFeature(f);
            f = new Feature()
            {
                FeatureName = "Lockfiles",
                Categories = new List<Category>(),
                //Category = repository.FindCategoryByName("PROJECT MANAGEMENT"),
            };
            f.Categories.Add(repository.FindCategoryByName("PROJECT MANAGEMENT"));
            repository.AddFeature(f);
            f = new Feature()
            {
                FeatureName = "Update & Deadline Alerts",
                Categories = new List<Category>(),
                //Category = repository.FindCategoryByName("PROJECT MANAGEMENT"),
            };
            f.Categories.Add(repository.FindCategoryByName("PROJECT MANAGEMENT"));
            repository.AddFeature(f);
            f = new Feature()
            {
                FeatureName = "Interactive GANTT Charts",
                Categories = new List<Category>(),
                //Category = repository.FindCategoryByName("PROJECT MANAGEMENT"),
            };
            f.Categories.Add(repository.FindCategoryByName("PROJECT MANAGEMENT"));
            repository.AddFeature(f);
            f = new Feature()
            {
                FeatureName = "Budget Tracking",
                Categories = new List<Category>(),
                //Category = repository.FindCategoryByName("PROJECT MANAGEMENT"),
            };
            f.Categories.Add(repository.FindCategoryByName("PROJECT MANAGEMENT"));
            repository.AddFeature(f);
            f = new Feature()
            {
                FeatureName = "Client Invoicing",
                Categories = new List<Category>(),
                //Category = repository.FindCategoryByName("PROJECT MANAGEMENT"),
            };
            f.Categories.Add(repository.FindCategoryByName("PROJECT MANAGEMENT"));
            repository.AddFeature(f);
            f = new Feature()
            {
                FeatureName = "Project Wiki",
                Categories = new List<Category>(),
                //Category = repository.FindCategoryByName("PROJECT MANAGEMENT"),
            };
            f.Categories.Add(repository.FindCategoryByName("PROJECT MANAGEMENT"));
            repository.AddFeature(f);
            f = new Feature()
            {
                FeatureName = "Customised Reports",
                Categories = new List<Category>(),
                //Category = repository.FindCategoryByName("PROJECT MANAGEMENT"),
            };
            f.Categories.Add(repository.FindCategoryByName("PROJECT MANAGEMENT"));
            repository.AddFeature(f);
            f = new Feature()
            {
                FeatureName = "MS Project Compatible",
                Categories = new List<Category>(),
                //Category = repository.FindCategoryByName("PROJECT MANAGEMENT"),
            };
            f.Categories.Add(repository.FindCategoryByName("PROJECT MANAGEMENT"));
            repository.AddFeature(f);
            f = new Feature()
            {
                FeatureName = "SSL Security",
                Categories = new List<Category>(),
                //Category = repository.FindCategoryByName("PROJECT MANAGEMENT"),
            };
            f.Categories.Add(repository.FindCategoryByName("PROJECT MANAGEMENT"));
            repository.AddFeature(f);
            f = new Feature()
            {
                FeatureName = "Military Grade Document Security",
                Categories = new List<Category>(),
                //Category = repository.FindCategoryByName("PROJECT MANAGEMENT"),
            };
            f.Categories.Add(repository.FindCategoryByName("PROJECT MANAGEMENT"));
            repository.AddFeature(f);
            f = new Feature()
            {
                FeatureName = "Guaranteed Restore",
                Categories = new List<Category>(),
                //Category = repository.FindCategoryByName("PROJECT MANAGEMENT"),
            };
            f.Categories.Add(repository.FindCategoryByName("PROJECT MANAGEMENT"));
            repository.AddFeature(f);
            f = new Feature()
            {
                FeatureName = "Offline Mode",
                Categories = new List<Category>(),
                //Category = repository.FindCategoryByName("PROJECT MANAGEMENT"),
            };
            f.Categories.Add(repository.FindCategoryByName("PROJECT MANAGEMENT"));
            repository.AddFeature(f);
            f = new Feature()
            {
                FeatureName = "3rd Party APIs",
                Categories = new List<Category>(),
                //Category = repository.FindCategoryByName("PROJECT MANAGEMENT"),
            };
            f.Categories.Add(repository.FindCategoryByName("PROJECT MANAGEMENT"));
            repository.AddFeature(f);
            f = new Feature()
            {
                FeatureName = "Bug Tracker",
                Categories = new List<Category>(),
                //Category = repository.FindCategoryByName("PROJECT MANAGEMENT"),
            };
            f.Categories.Add(repository.FindCategoryByName("PROJECT MANAGEMENT"));
            repository.AddFeature(f);
            #endregion

            #region FINANCIAL
            f = new Feature()
            {
                FeatureName = "Unlimited Transactions",
                Categories = new List<Category>(),
                //Category = repository.FindCategoryByName("FINANCIAL"),
            };
            f.Categories.Add(repository.FindCategoryByName("FINANCIAL"));
            repository.AddFeature(f);
            f = new Feature()
            {
                FeatureName = "Unlimited Customer Records",
                Categories = new List<Category>(),
                //Category = repository.FindCategoryByName("FINANCIAL"),
            };
            f.Categories.Add(repository.FindCategoryByName("FINANCIAL"));
            repository.AddFeature(f);
            f = new Feature()
            {
                FeatureName = "Unlimited Supplier Records",
                Categories = new List<Category>(),
                //Category = repository.FindCategoryByName("FINANCIAL"),
            };
            f.Categories.Add(repository.FindCategoryByName("FINANCIAL"));
            repository.AddFeature(f);
            f = new Feature()
            {
                FeatureName = "Unlimited Product & Service Descriptions",
                Categories = new List<Category>(),
                //Category = repository.FindCategoryByName("FINANCIAL"),
            };
            f.Categories.Add(repository.FindCategoryByName("FINANCIAL"));
            repository.AddFeature(f);
            f = new Feature()
            {
                FeatureName = "Create Invoices",
                Categories = new List<Category>(),
                //Category = repository.FindCategoryByName("FINANCIAL"),
            };
            f.Categories.Add(repository.FindCategoryByName("FINANCIAL"));
            repository.AddFeature(f);
            f = new Feature()
            {
                FeatureName = "Invoice-to-Payment Matching",
                Categories = new List<Category>(),
                //Category = repository.FindCategoryByName("FINANCIAL"),
            };
            f.Categories.Add(repository.FindCategoryByName("FINANCIAL"));
            repository.AddFeature(f);
            f = new Feature()
            {
                FeatureName = "Multi-Currency Invoicing",
                Categories = new List<Category>(),
                //Category = repository.FindCategoryByName("FINANCIAL"),
            };
            f.Categories.Add(repository.FindCategoryByName("FINANCIAL"));
            repository.AddFeature(f);
            f = new Feature()
            {
                FeatureName = "Record Bank Payments",
                Categories = new List<Category>(),
                //Category = repository.FindCategoryByName("FINANCIAL"),
            };
            f.Categories.Add(repository.FindCategoryByName("FINANCIAL"));
            repository.AddFeature(f);
            f = new Feature()
            {
                FeatureName = "Customised Reports",
                Categories = new List<Category>(),
                //Category = repository.FindCategoryByName("FINANCIAL"),
            };
            f.Categories.Add(repository.FindCategoryByName("FINANCIAL"));
            repository.AddFeature(f);
            f = new Feature()
            {
                FeatureName = "SSL Security",
                Categories = new List<Category>(),
                //Category = repository.FindCategoryByName("FINANCIAL"),
            };
            f.Categories.Add(repository.FindCategoryByName("FINANCIAL"));
            repository.AddFeature(f);
            f = new Feature()
            {
                FeatureName = "Project Accounting",
                Categories = new List<Category>(),
                //Category = repository.FindCategoryByName("FINANCIAL"),
            };
            f.Categories.Add(repository.FindCategoryByName("FINANCIAL"));
            repository.AddFeature(f);
            f = new Feature()
            {
                FeatureName = "External Access (for Accountants)",
                Categories = new List<Category>(),
                //Category = repository.FindCategoryByName("FINANCIAL"),
            };
            f.Categories.Add(repository.FindCategoryByName("FINANCIAL"));
            repository.AddFeature(f);
            f = new Feature()
            {
                FeatureName = "Multi-User Access",
                Categories = new List<Category>(),
                //Category = repository.FindCategoryByName("FINANCIAL"),
            };
            f.Categories.Add(repository.FindCategoryByName("FINANCIAL"));
            repository.AddFeature(f);
            f = new Feature()
            {
                FeatureName = "MS Excel Compatible",
                Categories = new List<Category>(),
                //Category = repository.FindCategoryByName("FINANCIAL"),
            };
            f.Categories.Add(repository.FindCategoryByName("FINANCIAL"));
            repository.AddFeature(f);
            f = new Feature()
            {
                FeatureName = "Fixed Asset Depreciation Tool",
                Categories = new List<Category>(),
                //Category = repository.FindCategoryByName("FINANCIAL"),
            };
            f.Categories.Add(repository.FindCategoryByName("FINANCIAL"));
            repository.AddFeature(f);
            f = new Feature()
            {
                FeatureName = "Customer Statements",
                Categories = new List<Category>(),
                //Category = repository.FindCategoryByName("FINANCIAL"),
            };
            f.Categories.Add(repository.FindCategoryByName("FINANCIAL"));
            repository.AddFeature(f);
            f = new Feature()
            {
                FeatureName = "Purchase Order System",
                Categories = new List<Category>(),
                //Category = repository.FindCategoryByName("FINANCIAL"),
            };
            f.Categories.Add(repository.FindCategoryByName("FINANCIAL"));
            repository.AddFeature(f);
            f = new Feature()
            {
                FeatureName = "Payroll",
                Categories = new List<Category>(),
                //Category = repository.FindCategoryByName("FINANCIAL"),
            };
            f.Categories.Add(repository.FindCategoryByName("FINANCIAL"));
            repository.AddFeature(f);
            f = new Feature()
            {
                FeatureName = "VAT Filing",
                Categories = new List<Category>(),
                //Category = repository.FindCategoryByName("FINANCIAL"),
            };
            f.Categories.Add(repository.FindCategoryByName("FINANCIAL"));
            repository.AddFeature(f);
            f = new Feature()
            {
                FeatureName = "3rd Party API",
                Categories = new List<Category>(),
                //Category = repository.FindCategoryByName("FINANCIAL"),
            };
            f.Categories.Add(repository.FindCategoryByName("FINANCIAL"));
            repository.AddFeature(f);
            #endregion

            #endregion

            #region OPERATING SYSTEMS
            o = new Domain.Models.OperatingSystem()
            {
                OperatingSystemName = "Win"
            };
            repository.AddOperatingSystem(o); 
            o = new Domain.Models.OperatingSystem()
            {
                OperatingSystemName = "Mac"
            };
            repository.AddOperatingSystem(o);
            o = new Domain.Models.OperatingSystem()
            {
                OperatingSystemName = "Linux"
            };
            repository.AddOperatingSystem(o);
            o = new Domain.Models.OperatingSystem()
            {
                OperatingSystemName = "iPad"
            };
            repository.AddOperatingSystem(o);
            #endregion

            #region MOBILE PLATFORMS
            mp = new MobilePlatform()
            {
                MobilePlatformName = "All"
            };
            repository.AddMobilePlatform(mp);
            mp = new MobilePlatform()
            {
                MobilePlatformName = "Android"
            };
            repository.AddMobilePlatform(mp);
            mp = new MobilePlatform()
            {
                MobilePlatformName = "iPhone"
            };
            repository.AddMobilePlatform(mp);
            mp = new MobilePlatform()
            {
                MobilePlatformName = "Win"
            };
            repository.AddMobilePlatform(mp);
            mp = new MobilePlatform()
            {
                MobilePlatformName = "BB"
            };
            repository.AddMobilePlatform(mp);
            mp = new MobilePlatform()
            {
                MobilePlatformName = "No"
            };
            repository.AddMobilePlatform(mp);
            mp = new MobilePlatform()
            {
                MobilePlatformName = "iPad"
            };
            repository.AddMobilePlatform(mp);
            mp = new MobilePlatform()
            {
                MobilePlatformName = "Apple"
            };
            repository.AddMobilePlatform(mp);
            mp = new MobilePlatform()
            {
                MobilePlatformName = "Blackberry"
            };
            repository.AddMobilePlatform(mp);
            #endregion

            #region BROWSERS
            b = new Browser()
            {
                BrowserName = "Internet Explorer 6"
            };
            repository.AddBrowser(b);
            b = new Browser()
            {
                BrowserName = "Internet Explorer 7"
            };
            repository.AddBrowser(b);
            b = new Browser()
            {
                BrowserName = "Internet Explorer 8"
            };
            repository.AddBrowser(b);
            b = new Browser()
            {
                BrowserName = "Internet Explorer 9"
            };
            repository.AddBrowser(b);
            b = new Browser()
            {
                BrowserName = "Firefox"
            };
            repository.AddBrowser(b);
            b = new Browser()
            {
                BrowserName = "Safari"
            };
            repository.AddBrowser(b);
            b = new Browser()
            {
                BrowserName = "Opera"
            };
            repository.AddBrowser(b);
            b = new Browser()
            {
                BrowserName = "Chrome"
            };
            repository.AddBrowser(b);
            #endregion

            #region LICENCE TYPE MINIMUM
            ltMin = new LicenceTypeMinimum()
            {
                LicenceTypeMinimumName = 1
            };
            repository.AddLicenceTypeMinimum(ltMin);
            ltMin = new LicenceTypeMinimum()
            {
                LicenceTypeMinimumName = 2
            };
            repository.AddLicenceTypeMinimum(ltMin);
            ltMin = new LicenceTypeMinimum()
            {
                LicenceTypeMinimumName = 5
            };
            repository.AddLicenceTypeMinimum(ltMin);
            ltMin = new LicenceTypeMinimum()
            {
                LicenceTypeMinimumName = 3
            };
            repository.AddLicenceTypeMinimum(ltMin);
            #endregion

            #region LICENCE TYPE MAXIMUM
            ltMax = new LicenceTypeMaximum()
            {
                LicenceTypeMaximumName = 1
            };
            repository.AddLicenceTypeMaximum(ltMax);
            ltMax = new LicenceTypeMaximum()
            {
                LicenceTypeMaximumName = 2
            };
            repository.AddLicenceTypeMaximum(ltMax);
            ltMax = new LicenceTypeMaximum()
            {
                LicenceTypeMaximumName = 3
            };
            repository.AddLicenceTypeMaximum(ltMax);
            ltMax = new LicenceTypeMaximum()
            {
                LicenceTypeMaximumName = 5
            };
            repository.AddLicenceTypeMaximum(ltMax);
            ltMax = new LicenceTypeMaximum()
            {
                LicenceTypeMaximumName = 6
            };
            repository.AddLicenceTypeMaximum(ltMax);
            ltMax = new LicenceTypeMaximum()
            {
                LicenceTypeMaximumName = 8
            };
            repository.AddLicenceTypeMaximum(ltMax);
            ltMax = new LicenceTypeMaximum()
            {
                LicenceTypeMaximumName = 9
            };
            repository.AddLicenceTypeMaximum(ltMax);
            ltMax = new LicenceTypeMaximum()
            {
                LicenceTypeMaximumName = 10
            };
            repository.AddLicenceTypeMaximum(ltMax);
            ltMax = new LicenceTypeMaximum()
            {
                LicenceTypeMaximumName = 20
            };
            repository.AddLicenceTypeMaximum(ltMax);
            ltMax = new LicenceTypeMaximum()
            {
                LicenceTypeMaximumName = 50
            };
            repository.AddLicenceTypeMaximum(ltMax);
            ltMax = new LicenceTypeMaximum()
            {
                LicenceTypeMaximumName = 99
            };
            repository.AddLicenceTypeMaximum(ltMax);
            ltMax = new LicenceTypeMaximum()
            {
                LicenceTypeMaximumName = 250
            };
            repository.AddLicenceTypeMaximum(ltMax);
            ltMax = new LicenceTypeMaximum()
            {
                LicenceTypeMaximumName = 500
            };
            repository.AddLicenceTypeMaximum(ltMax);
            ltMax = new LicenceTypeMaximum()
            {
                LicenceTypeMaximumName = 16384
            };
            repository.AddLicenceTypeMaximum(ltMax);
            #endregion

            #region LANGUAGES
            l = new Language()
            {
                LanguageName = "English"
            };
            repository.AddLanguage(l);
            #endregion

            #region SUPPORT TYPES
            st = new SupportType()
            {
                SupportTypeName = "Online"
            };
            repository.AddSupportType(st);
            st = new SupportType()
            {
                SupportTypeName = "Telephone"
            };
            repository.AddSupportType(st);
            st = new SupportType()
            {
                SupportTypeName = "Email"
            };
            repository.AddSupportType(st);
            st = new SupportType()
            {
                SupportTypeName = "FAQ"
            };
            repository.AddSupportType(st);
            st = new SupportType()
            {
                SupportTypeName = "Troubleshoot"
            };
            repository.AddSupportType(st);
            st = new SupportType()
            {
                SupportTypeName = "Knowledge Base"
            };
            repository.AddSupportType(st);
            st = new SupportType()
            {
                SupportTypeName = "Community"
            };
            repository.AddSupportType(st);
            st = new SupportType()
            {
                SupportTypeName = "Free Telephone"
            };
            repository.AddSupportType(st);
            st = new SupportType()
            {
                SupportTypeName = "Local Rate Phone"
            };
            repository.AddSupportType(st);
            st = new SupportType()
            {
                SupportTypeName = "Troubleticket"
            };
            repository.AddSupportType(st);
            st = new SupportType()
            {
                SupportTypeName = "Toll Free Phone"
            };
            repository.AddSupportType(st);
            st = new SupportType()
            {
                SupportTypeName = "Chat"
            };
            repository.AddSupportType(st);
            st = new SupportType()
            {
                SupportTypeName = "CallBack"
            };
            repository.AddSupportType(st);
            #endregion

            #region SUPPORT DAYS
            sd = new SupportDays()
            {
                SupportDaysName = "7"
            };
            repository.AddSupportDays(sd);
            sd = new SupportDays()
            {
                SupportDaysName = "5"
            };
            repository.AddSupportDays(sd);
            sd = new SupportDays()
            {
                SupportDaysName = "N/A"
            };
            repository.AddSupportDays(sd);
            sd = new SupportDays()
            {
                SupportDaysName = "Mon-Fri"
            };
            repository.AddSupportDays(sd);
            #endregion

            #region SUPPORT HOURS
            sh = new SupportHours()
            {
                SupportHoursName = "24 hours"
            };
            repository.AddSupportHours(sh);
            sh = new SupportHours()
            {
                SupportHoursName = "9am-6pm"
            };
            repository.AddSupportHours(sh);
            sh = new SupportHours()
            {
                SupportHoursName = "N/A"
            };
            repository.AddSupportHours(sh);
            sh = new SupportHours()
            {
                SupportHoursName = "12 hours (business)"
            };
            repository.AddSupportHours(sh);
            sh = new SupportHours()
            {
                SupportHoursName = "12 hours"
            };
            repository.AddSupportHours(sh);
            sh = new SupportHours()
            {
                SupportHoursName = "9am-5pm"
            };
            repository.AddSupportHours(sh);
            #endregion

            #region SUPPORT TERRITORIES
            sterritory = new SupportTerritory()
            {
                SupportTerritoryName = "UK"
            };
            repository.AddSupportTerritory(sterritory);
            sterritory = new SupportTerritory()
            {
                SupportTerritoryName = "Global"
            };
            repository.AddSupportTerritory(sterritory);
            sterritory = new SupportTerritory()
            {
                SupportTerritoryName = "US"
            };
            repository.AddSupportTerritory(sterritory);
            sterritory = new SupportTerritory()
            {
                SupportTerritoryName = "Australia"
            };
            repository.AddSupportTerritory(sterritory);
            #endregion

            #region MINIMUM CONTRACTS
            mc = new MinimumContract()
            {
                MinimumContractName = "No Contract"
            };
            repository.AddMinimumContract(mc);
            mc = new MinimumContract()
            {
                MinimumContractName = "12 Months"
            };
            repository.AddMinimumContract(mc);
            mc = new MinimumContract()
            {
                MinimumContractName = "24 Months"
            };
            repository.AddMinimumContract(mc);
            mc = new MinimumContract()
            {
                MinimumContractName = "1 Month"
            };
            repository.AddMinimumContract(mc);
            mc = new MinimumContract()
            {
                MinimumContractName = "36 Months"
            };
            repository.AddMinimumContract(mc);
            mc = new MinimumContract()
            {
                MinimumContractName = "Not Applicable"
            };
            repository.AddMinimumContract(mc);
            #endregion

            #region PAYMENT FREQUENCIES
            pf = new PaymentFrequency()
            {
                PaymentFrequencyName = "Monthly"
            };
            repository.AddPaymentFrequency(pf);
            pf = new PaymentFrequency()
            {
                PaymentFrequencyName = "Not Applicable"
            };
            repository.AddPaymentFrequency(pf);
            pf = new PaymentFrequency()
            {
                PaymentFrequencyName = "On-demand"
            };
            repository.AddPaymentFrequency(pf);
            pf = new PaymentFrequency()
            {
                PaymentFrequencyName = "Annual"
            };
            repository.AddPaymentFrequency(pf);
            pf = new PaymentFrequency()
            {
                PaymentFrequencyName = "One-Off"
            };
            repository.AddPaymentFrequency(pf);
            #endregion

            #region SETUP FEES
            sf = new SetupFee()
            {
                SetupFeeName = "Not Applicable"
            };
            repository.AddSetupFee(sf);
            sf = new SetupFee()
            {
                SetupFeeName = "£27.97"
            };
            repository.AddSetupFee(sf);
            sf = new SetupFee()
            {
                SetupFeeName = "£14.99"
            };
            repository.AddSetupFee(sf);
            sf = new SetupFee()
            {
                SetupFeeName = "£4.99"
            };
            repository.AddSetupFee(sf);
            sf = new SetupFee()
            {
                SetupFeeName = "£130.00"
            };
            repository.AddSetupFee(sf);
            sf = new SetupFee()
            {
                SetupFeeName = "£29.00"
            };
            repository.AddSetupFee(sf);
            sf = new SetupFee()
            {
                SetupFeeName = "£20.00"
            };
            repository.AddSetupFee(sf);
            sf = new SetupFee()
            {
                SetupFeeName = "£24.99"
            };
            repository.AddSetupFee(sf);
            sf = new SetupFee()
            {
                SetupFeeName = "$25.00"
            };
            repository.AddSetupFee(sf);
            sf = new SetupFee()
            {
                SetupFeeName = "$49.99"
            };
            repository.AddSetupFee(sf);
            sf = new SetupFee()
            {
                SetupFeeName = "£9.21"
            };
            repository.AddSetupFee(sf);
            sf = new SetupFee()
            {
                SetupFeeName = "£19.99"
            };
            repository.AddSetupFee(sf);
            #endregion

            #region PAYMENT OPTIONS
            po = new PaymentOption()
            {
                PaymentOptionName = "Credit Card"
            };
            repository.AddPaymentOption(po);
            po = new PaymentOption()
            {
                PaymentOptionName = "Pre-Pay"
            };
            repository.AddPaymentOption(po);
            po = new PaymentOption()
            {
                PaymentOptionName = "Direct Debit"
            };
            repository.AddPaymentOption(po);
            po = new PaymentOption()
            {
                PaymentOptionName = "Debit Card"
            };
            repository.AddPaymentOption(po);
            po = new PaymentOption()
            {
                PaymentOptionName = "PayPal"
            };
            repository.AddPaymentOption(po);
            po = new PaymentOption()
            {
                PaymentOptionName = "Invoice"
            };
            repository.AddPaymentOption(po);
            #endregion

            #region FREE TRIAL PERIODS
            ftp = new FreeTrialPeriod()
            {
                FreeTrialPeriodName = "No"
            };
            repository.AddFreeTrialPeriod(ftp);
            ftp = new FreeTrialPeriod()
            {
                FreeTrialPeriodName = "Yes"
            };
            repository.AddFreeTrialPeriod(ftp);
            ftp = new FreeTrialPeriod()
            {
                FreeTrialPeriodName = "Demo"
            };
            repository.AddFreeTrialPeriod(ftp);
            ftp = new FreeTrialPeriod()
            {
                FreeTrialPeriodName = "Test Drive"
            };
            repository.AddFreeTrialPeriod(ftp);
            #endregion

            #region VENDORS
            v = new Vendor()
            {
                VendorName = "Skype",
                VendorLogoFileName = "skype logo.png",
                VendorLogo = File.ReadAllBytes("J:\\CompareCloudware\\CompareCloudware.Web\\Images\\Logos\\Voice\\skype logo.png"),
                VendorLogoFullURL = "//Images//Logos/Voice//",
            };
            repository.AddVendor(v);
            v = new Vendor()
            {
                VendorName = "Vonage",
                VendorLogoFileName = "vonage logo.jpg",
                VendorLogo = File.ReadAllBytes("J:\\CompareCloudware\\CompareCloudware.Web\\Images\\Logos\\Voice\\vonage logo.jpg"),
                VendorLogoFullURL = "//Images//Logos/Voice//",
            };
            repository.AddVendor(v);
            v = new Vendor()
            {
                VendorName = "Vodafone",
                VendorLogoFileName = "vodafone logo.jpg",
                VendorLogo = File.ReadAllBytes("J:\\CompareCloudware\\CompareCloudware.Web\\Images\\Logos\\Voice\\vodafone logo.jpg"),
                VendorLogoFullURL = "//Images//Logos/Voice//",
            };
            repository.AddVendor(v);
            v = new Vendor()
            {
                VendorName = "VoIPtalk",
                VendorLogoFileName = "voiptalk logo.png",
                VendorLogo = File.ReadAllBytes("J:\\CompareCloudware\\CompareCloudware.Web\\Images\\Logos\\Voice\\voiptalk logo.png"),
                VendorLogoFullURL = "//Images//Logos/Voice//",
            };
            repository.AddVendor(v);
            v = new Vendor()
            {
                VendorName = "Gradwell",
                VendorLogoFileName = "gradwell logo.png",
                VendorLogo = File.ReadAllBytes("J:\\CompareCloudware\\CompareCloudware.Web\\Images\\Logos\\Voice\\gradwell logo.png"),
                VendorLogoFullURL = "//Images//Logos/Voice//",
            };
            repository.AddVendor(v);
            v = new Vendor()
            {
                VendorName = "RingCentral",
                VendorLogoFileName = "ring central logo.jpg",
                VendorLogo = File.ReadAllBytes("J:\\CompareCloudware\\CompareCloudware.Web\\Images\\Logos\\Voice\\ring central logo.jpg"),
                VendorLogoFullURL = "//Images//Logos/Voice//",
            };
            repository.AddVendor(v);
            v = new Vendor()
            {
                VendorName = "BT",
                VendorLogoFileName = "bt logo.jpg",
                VendorLogo = File.ReadAllBytes("J:\\CompareCloudware\\CompareCloudware.Web\\Images\\Logos\\Voice\\bt logo.jpg"),
                VendorLogoFullURL = "//Images//Logos/Voice//",
            };
            repository.AddVendor(v);
            v = new Vendor()
            {
                VendorName = "Tpad",
                VendorLogoFileName = "tpad logo.jpg",
                VendorLogo = File.ReadAllBytes("J:\\CompareCloudware\\CompareCloudware.Web\\Images\\Logos\\Voice\\tpad logo.jpg"),
                VendorLogoFullURL = "//Images//Logos/Voice//",
            };
            repository.AddVendor(v);
            v = new Vendor()
            {
                VendorName = "yourCHOICE",
                VendorLogoFileName = "yourchoicevoip logo.png",
                VendorLogo = File.ReadAllBytes("J:\\CompareCloudware\\CompareCloudware.Web\\Images\\Logos\\Voice\\yourchoicevoip logo.png"),
                VendorLogoFullURL = "//Images//Logos/Voice//",
            };
            repository.AddVendor(v);
            v = new Vendor()
            {
                VendorName = "freespeech.co.uk",
                VendorLogoFileName = "freespeech.co.uk logo.gif",
                VendorLogo = File.ReadAllBytes("J:\\CompareCloudware\\CompareCloudware.Web\\Images\\Logos\\Voice\\freespeech.co.uk logo.gif"),
                VendorLogoFullURL = "//Images//Logos/Voice//",
            };
            repository.AddVendor(v);
            v = new Vendor()
            {
                VendorName = "magicJack",
                VendorLogoFileName = "magicjack logo.jpg",
                VendorLogo = File.ReadAllBytes("J:\\CompareCloudware\\CompareCloudware.Web\\Images\\Logos\\Voice\\magicjack logo.jpg"),
                VendorLogoFullURL = "//Images//Logos/Voice//",
            };
            repository.AddVendor(v);
            v = new Vendor()
            {
                VendorName = "Press1.co.uk",
                VendorLogoFileName = "press1.co.uk logo.gif",
                VendorLogo = File.ReadAllBytes("J:\\CompareCloudware\\CompareCloudware.Web\\Images\\Logos\\Voice\\press1.co.uk logo.gif"),
                VendorLogoFullURL = "//Images//Logos/Voice//",
            };
            repository.AddVendor(v);
            v = new Vendor()
            {
                VendorName = "usomo",
                VendorLogoFileName = "usomo logo.jpg",
                VendorLogo = File.ReadAllBytes("J:\\CompareCloudware\\CompareCloudware.Web\\Images\\Logos\\Voice\\usomo logo.jpg"),
                VendorLogoFullURL = "//Images//Logos/Voice//",
            };
            repository.AddVendor(v);
            v = new Vendor()
            {
                VendorName = "colt",
                VendorLogoFileName = "colt logo.jpg",
                VendorLogo = File.ReadAllBytes("J:\\CompareCloudware\\CompareCloudware.Web\\Images\\Logos\\Voice\\colt logo.jpg"),
                VendorLogoFullURL = "//Images//Logos/Voice//",
            };
            repository.AddVendor(v);
            v = new Vendor()
            {
                VendorName = "sureVoIP",
                VendorLogoFileName = "sure voip logo.png",
                VendorLogo = File.ReadAllBytes("J:\\CompareCloudware\\CompareCloudware.Web\\Images\\Logos\\Voice\\sure voip logo.png"),
                VendorLogoFullURL = "//Images//Logos/Voice//",
            };
            repository.AddVendor(v);
            v = new Vendor()
            {
                VendorName = "NTA:LTD",
                VendorLogoFileName = "ntaltd logo.jpg",
                VendorLogo = File.ReadAllBytes("J:\\CompareCloudware\\CompareCloudware.Web\\Images\\Logos\\Voice\\ntaltd logo.jpg"),
                VendorLogoFullURL = "//Images//Logos/Voice//",
            };
            repository.AddVendor(v);
            v = new Vendor()
            {
                VendorName = "sipgate",
                VendorLogoFileName = "sipgate logo.jpg",
                VendorLogo = File.ReadAllBytes("J:\\CompareCloudware\\CompareCloudware.Web\\Images\\Logos\\Voice\\sipgate logo.jpg"),
                VendorLogoFullURL = "//Images//Logos/Voice//",
            };
            repository.AddVendor(v);
            v = new Vendor()
            {
                VendorName = "Salesforce",
                VendorLogoFileName = "salesforce_logo.jpeg",
                VendorLogo = File.ReadAllBytes("J:\\CompareCloudware\\CompareCloudware.Web\\Images\\Logos\\Customer Management\\salesforce_logo.jpeg"),
                VendorLogoFullURL = "//Images//Logos/Customer Management//",
            };
            repository.AddVendor(v);
            v = new Vendor()
            {
                VendorName = "SUGARCRM",
                VendorLogoFileName = "sugar crm logo.jpg",
                VendorLogo = File.ReadAllBytes("J:\\CompareCloudware\\CompareCloudware.Web\\Images\\Logos\\Customer Management\\sugar crm logo.jpg"),
                VendorLogoFullURL = "//Images//Logos/Customer Management//",
            };
            repository.AddVendor(v);
            v = new Vendor()
            {
                VendorName = "ZOHOCRM",
                VendorLogoFileName = "zoho logo.gif",
                VendorLogo = File.ReadAllBytes("J:\\CompareCloudware\\CompareCloudware.Web\\Images\\Logos\\Customer Management\\zoho logo.gif"),
                VendorLogoFullURL = "//Images//Logos/Customer Management//",
            };
            repository.AddVendor(v);
            v = new Vendor()
            {
                VendorName = "Workbooks.com",
                VendorLogoFileName = "workbooks logo.png",
                VendorLogo = File.ReadAllBytes("J:\\CompareCloudware\\CompareCloudware.Web\\Images\\Logos\\Customer Management\\workbooks logo.png"),
                VendorLogoFullURL = "//Images//Logos/Customer Management//",
            };
            repository.AddVendor(v);
            v = new Vendor()
            {
                VendorName = "Microsoft Dynamics",
                VendorLogoFileName = "microsoft dynamics logo.png",
                VendorLogo = File.ReadAllBytes("J:\\CompareCloudware\\CompareCloudware.Web\\Images\\Logos\\Customer Management\\microsoft dynamics logo.png"),
                VendorLogoFullURL = "//Images//Logos/Customer Management//",
            };
            repository.AddVendor(v);
            v = new Vendor()
            {
                VendorName = "Maximizer",
                VendorLogoFileName = "maximizer logo.jpg",
                VendorLogo = File.ReadAllBytes("J:\\CompareCloudware\\CompareCloudware.Web\\Images\\Logos\\Customer Management\\maximizer logo.jpg"),
                VendorLogoFullURL = "//Images//Logos/Customer Management//",
            };
            repository.AddVendor(v);
            v = new Vendor()
            {
                VendorName = "opencrm",
                VendorLogoFileName = "open crm logo.jpg",
                VendorLogo = File.ReadAllBytes("J:\\CompareCloudware\\CompareCloudware.Web\\Images\\Logos\\Customer Management\\open crm logo.jpg"),
                VendorLogoFullURL = "//Images//Logos/Customer Management//",
            };
            repository.AddVendor(v);
            v = new Vendor()
            {
                VendorName = "TactileCRM",
                VendorLogoFileName = "tactile_crm.jpg",
                VendorLogo = File.ReadAllBytes("J:\\CompareCloudware\\CompareCloudware.Web\\Images\\Logos\\Customer Management\\tactile_crm.jpg"),
                VendorLogoFullURL = "//Images//Logos/Customer Management//",
            };
            repository.AddVendor(v);
            v = new Vendor()
            {
                VendorName = "wecandobiz",
                VendorLogoFileName = "we can do biz logo.png",
                VendorLogo = File.ReadAllBytes("J:\\CompareCloudware\\CompareCloudware.Web\\Images\\Logos\\Customer Management\\we can do biz logo.png"),
                VendorLogoFullURL = "//Images//Logos/Customer Management//",
            };
            repository.AddVendor(v);
            v = new Vendor()
            {
                VendorName = "Buddy",
                VendorLogoFileName = "buddy crm logo.jpg",
                VendorLogo = File.ReadAllBytes("J:\\CompareCloudware\\CompareCloudware.Web\\Images\\Logos\\Customer Management\\buddy crm logo.jpg"),
                VendorLogoFullURL = "//Images//Logos/Customer Management//",
            };
            repository.AddVendor(v);
            v = new Vendor()
            {
                VendorName = "sage",
                VendorLogoFileName = "sage crm logo.jpg",
                VendorLogo = File.ReadAllBytes("J:\\CompareCloudware\\CompareCloudware.Web\\Images\\Logos\\Customer Management\\sage crm logo.jpg"),
                VendorLogoFullURL = "//Images//Logos/Customer Management//",
            };
            repository.AddVendor(v);
            v = new Vendor()
            {
                VendorName = "webCRM",
                VendorLogoFileName = "web crm logo.jpg",
                VendorLogo = File.ReadAllBytes("J:\\CompareCloudware\\CompareCloudware.Web\\Images\\Logos\\Customer Management\\web crm logo.jpg"),
                VendorLogoFullURL = "//Images//Logos/Customer Management//",
            };
            repository.AddVendor(v);
            v = new Vendor()
            {
                VendorName = "capsule",
                VendorLogoFileName = "capsule crm logo.jpg",
                VendorLogo = File.ReadAllBytes("J:\\CompareCloudware\\CompareCloudware.Web\\Images\\Logos\\Customer Management\\capsule crm logo.jpg"),
                VendorLogoFullURL = "//Images//Logos/Customer Management//",
            };
            repository.AddVendor(v);
            v = new Vendor()
            {
                VendorName = "SohoOS",
                VendorLogoFileName = "soho os logo.jpg",
                VendorLogo = File.ReadAllBytes("J:\\CompareCloudware\\CompareCloudware.Web\\Images\\Logos\\Customer Management\\soho os logo.jpg"),
                VendorLogoFullURL = "//Images//Logos/Customer Management//",
            };
            repository.AddVendor(v);
            v = new Vendor()
            {
                VendorName = "Cisco webex",
                VendorLogoFileName = "cisco-webex-logo.jpg",
                VendorLogo = File.ReadAllBytes("J:\\CompareCloudware\\CompareCloudware.Web\\Images\\Logos\\Web Conferencing\\cisco-webex-logo.jpg"),
                VendorLogoFullURL = "//Images//Logos/Web Conferencing//",
            };
            repository.AddVendor(v);
            v = new Vendor()
            {
                VendorName = "GoToMeeting",
                VendorLogoFileName = "gotomeeting logo.jpg",
                VendorLogo = File.ReadAllBytes("J:\\CompareCloudware\\CompareCloudware.Web\\Images\\Logos\\Web Conferencing\\gotomeeting logo.jpg"),
                VendorLogoFullURL = "//Images//Logos/Web Conferencing//",
            };
            repository.AddVendor(v);
            v = new Vendor()
            {
                VendorName = "Microsoft Lync Online",
                VendorLogoFileName = "microsoft lync logo.jpg",
                VendorLogo = File.ReadAllBytes("J:\\CompareCloudware\\CompareCloudware.Web\\Images\\Logos\\Web Conferencing\\microsoft lync logo.jpg"),
                VendorLogoFullURL = "//Images//Logos/Web Conferencing//",
            };
            repository.AddVendor(v);
            v = new Vendor()
            {
                VendorName = "LotusLive",
                VendorLogoFileName = "lotus live logo.png",
                VendorLogo = File.ReadAllBytes("J:\\CompareCloudware\\CompareCloudware.Web\\Images\\Logos\\Web Conferencing\\lotus live logo.png"),
                VendorLogoFullURL = "//Images//Logos/Web Conferencing//",
            };
            repository.AddVendor(v);
            v = new Vendor()
            {
                VendorName = "Infinite",
                VendorLogoFileName = "infinite conferencing logo.jpg",
                VendorLogo = File.ReadAllBytes("J:\\CompareCloudware\\CompareCloudware.Web\\Images\\Logos\\Web Conferencing\\infinite conferencing logo.jpg"),
                VendorLogoFullURL = "//Images//Logos/Web Conferencing//",
            };
            repository.AddVendor(v);
            v = new Vendor()
            {
                VendorName = "ZOHO Meeting",
                VendorLogoFileName = "zoho meeting logo.gif",
                VendorLogo = File.ReadAllBytes("J:\\CompareCloudware\\CompareCloudware.Web\\Images\\Logos\\Web Conferencing\\zoho meeting logo.gif"),
                VendorLogoFullURL = "//Images//Logos/Web Conferencing//",
            };
            repository.AddVendor(v);
            v = new Vendor()
            {
                VendorName = "FUZE Meeting",
                VendorLogoFileName = "fuze meeting logo.jpg",
                VendorLogo = File.ReadAllBytes("J:\\CompareCloudware\\CompareCloudware.Web\\Images\\Logos\\Web Conferencing\\fuze meeting logo.jpg"),
                VendorLogoFullURL = "//Images//Logos/Web Conferencing//",
            };
            repository.AddVendor(v);
            v = new Vendor()
            {
                VendorName = "Yugma",
                VendorLogoFileName = "yugma logo.jpg",
                VendorLogo = File.ReadAllBytes("J:\\CompareCloudware\\CompareCloudware.Web\\Images\\Logos\\Web Conferencing\\yugma logo.jpg"),
                VendorLogoFullURL = "//Images//Logos/Web Conferencing//",
            };
            repository.AddVendor(v);
            v = new Vendor()
            {
                VendorName = "POWWOWNOW",
                VendorLogoFileName = "powwownow logo.jpg",
                VendorLogo = File.ReadAllBytes("J:\\CompareCloudware\\CompareCloudware.Web\\Images\\Logos\\Web Conferencing\\powwownow logo.jpg"),
                VendorLogoFullURL = "//Images//Logos/Web Conferencing//",
            };
            repository.AddVendor(v);
            v = new Vendor()
            {
                VendorName = "MegaMeeting",
                VendorLogoFileName = "megameeting logo.jpg",
                VendorLogo = File.ReadAllBytes("J:\\CompareCloudware\\CompareCloudware.Web\\Images\\Logos\\Web Conferencing\\megameeting logo.jpg"),
                VendorLogoFullURL = "//Images//Logos/Web Conferencing//",
            };
            repository.AddVendor(v);
            v = new Vendor()
            {
                VendorName = "meetingzone",
                VendorLogoFileName = "meeting zone logo.gif",
                VendorLogo = File.ReadAllBytes("J:\\CompareCloudware\\CompareCloudware.Web\\Images\\Logos\\Web Conferencing\\meeting zone logo.gif"),
                VendorLogoFullURL = "//Images//Logos/Web Conferencing//",
            };
            repository.AddVendor(v);
            v = new Vendor()
            {
                VendorName = "InterCall",
                VendorLogoFileName = "intercall logo.jpg",
                VendorLogo = File.ReadAllBytes("J:\\CompareCloudware\\CompareCloudware.Web\\Images\\Logos\\Web Conferencing\\intercall logo.jpg"),
                VendorLogoFullURL = "//Images//Logos/Web Conferencing//",
            };
            repository.AddVendor(v);
            v = new Vendor()
            {
                VendorName = "OnSync",
                VendorLogoFileName = "onsync logo.png",
                VendorLogo = File.ReadAllBytes("J:\\CompareCloudware\\CompareCloudware.Web\\Images\\Logos\\Web Conferencing\\onsync logo.png"),
                VendorLogoFullURL = "//Images//Logos/Web Conferencing//",
            };
            repository.AddVendor(v);
            v = new Vendor()
            {
                VendorName = "YAHOO Small Business",
                VendorLogoFileName = "yahoo logo.jpg",
                VendorLogo = File.ReadAllBytes("J:\\CompareCloudware\\CompareCloudware.Web\\Images\\Logos\\Email\\yahoo logo.jpg"),
                VendorLogoFullURL = "//Images//Logos/Email//",
            };
            repository.AddVendor(v);
            v = new Vendor()
            {
                VendorName = "Microsoft Exchange Online",
                VendorLogoFileName = "ms exchange online logo.png",
                VendorLogo = File.ReadAllBytes("J:\\CompareCloudware\\CompareCloudware.Web\\Images\\Logos\\Email\\ms exchange online logo.png"),
                VendorLogoFullURL = "//Images//Logos/Email//",
            };
            repository.AddVendor(v);
            v = new Vendor()
            {
                VendorName = "ZOHO Mail",
                VendorLogoFileName = "zoho logo.gif",
                VendorLogo = File.ReadAllBytes("J:\\CompareCloudware\\CompareCloudware.Web\\Images\\Logos\\Email\\zoho logo.gif"),
                VendorLogoFullURL = "//Images//Logos/Email//",
            };
            repository.AddVendor(v);
            v = new Vendor()
            {
                VendorName = "SMS",
                VendorLogoFileName = "sms logo.jpg",
                VendorLogo = File.ReadAllBytes("J:\\CompareCloudware\\CompareCloudware.Web\\Images\\Logos\\Email\\sms logo.jpg"),
                VendorLogoFullURL = "//Images//Logos/Email//",
            };
            repository.AddVendor(v);
            v = new Vendor()
            {
                VendorName = "BlueTie",
                VendorLogoFileName = "blue tie logo.jpg",
                VendorLogo = File.ReadAllBytes("J:\\CompareCloudware\\CompareCloudware.Web\\Images\\Logos\\Email\\blue tie logo.jpg"),
                VendorLogoFullURL = "//Images//Logos/Email//",
            };
            repository.AddVendor(v);
            v = new Vendor()
            {
                VendorName = "GMail",
                VendorLogoFileName = "gmail logo.jpg",
                VendorLogo = File.ReadAllBytes("J:\\CompareCloudware\\CompareCloudware.Web\\Images\\Logos\\Email\\gmail logo.jpg"),
                VendorLogoFullURL = "//Images//Logos/Email//",
            };
            repository.AddVendor(v);
            v = new Vendor()
            {
                VendorName = "Star",
                VendorLogoFileName = "star logo.jpg",
                VendorLogo = File.ReadAllBytes("J:\\CompareCloudware\\CompareCloudware.Web\\Images\\Logos\\Email\\star logo.jpg"),
                VendorLogoFullURL = "//Images//Logos/Email//",
            };
            repository.AddVendor(v);
            v = new Vendor()
            {
                VendorName = "HyperOffice",
                VendorLogoFileName = "hyperoffice logo.png",
                VendorLogo = File.ReadAllBytes("J:\\CompareCloudware\\CompareCloudware.Web\\Images\\Logos\\Email\\hyperoffice logo.png"),
                VendorLogoFullURL = "//Images//Logos/Email//",
            };
            repository.AddVendor(v);
            v = new Vendor()
            {
                VendorName = "FastMail",
                VendorLogoFileName = "fast mail logo.gif",
                VendorLogo = File.ReadAllBytes("J:\\CompareCloudware\\CompareCloudware.Web\\Images\\Logos\\Email\\fast mail logo.gif"),
                VendorLogoFullURL = "//Images//Logos/Email//",
            };
            repository.AddVendor(v);
            v = new Vendor()
            {
                VendorName = "webfusion",
                VendorLogoFileName = "webfusion logo.jpg",
                VendorLogo = File.ReadAllBytes("J:\\CompareCloudware\\CompareCloudware.Web\\Images\\Logos\\Email\\webfusion logo.jpg"),
                VendorLogoFullURL = "//Images//Logos/Email//",
            };
            repository.AddVendor(v);
            v = new Vendor()
            {
                VendorName = "rackspace",
                VendorLogoFileName = "rackspace logo.jpg",
                VendorLogo = File.ReadAllBytes("J:\\CompareCloudware\\CompareCloudware.Web\\Images\\Logos\\Email\\rackspace logo.jpg"),
                VendorLogoFullURL = "//Images//Logos/Email//",
            };
            repository.AddVendor(v);
            v = new Vendor()
            {
                VendorName = "eclipse",
                VendorLogoFileName = "eclipse logo.jpg",
                VendorLogo = File.ReadAllBytes("J:\\CompareCloudware\\CompareCloudware.Web\\Images\\Logos\\Email\\eclipse logo.jpg"),
                VendorLogoFullURL = "//Images//Logos/Email//",
            };
            repository.AddVendor(v);
            v = new Vendor()
            {
                VendorName = "FuseMail",
                VendorLogoFileName = "fusemail logo.png",
                VendorLogo = File.ReadAllBytes("J:\\CompareCloudware\\CompareCloudware.Web\\Images\\Logos\\Email\\fusemail logo.png"),
                VendorLogoFullURL = "//Images//Logos/Email//",
            };
            repository.AddVendor(v);
            v = new Vendor()
            {
                VendorName = "fasthosts",
                VendorLogoFileName = "fasthosts logo.jpg",
                VendorLogo = File.ReadAllBytes("J:\\CompareCloudware\\CompareCloudware.Web\\Images\\Logos\\Email\\fasthosts logo.jpg"),
                VendorLogoFullURL = "//Images//Logos/Email//",
            };
            repository.AddVendor(v);
            v = new Vendor()
            {
                VendorName = "INTERMEDIA",
                VendorLogoFileName = "intermedia logo.jpg",
                VendorLogo = File.ReadAllBytes("J:\\CompareCloudware\\CompareCloudware.Web\\Images\\Logos\\Email\\intermedia logo.jpg"),
                VendorLogoFullURL = "//Images//Logos/Email//",
            };
            repository.AddVendor(v);
            v = new Vendor()
            {
                VendorName = "1&1",
                VendorLogoFileName = "1&1 logo.jpg",
                VendorLogo = File.ReadAllBytes("J:\\CompareCloudware\\CompareCloudware.Web\\Images\\Logos\\Email\\1&1 logo.jpg"),
                VendorLogoFullURL = "//Images//Logos/Email//",
            };
            repository.AddVendor(v);
            v = new Vendor()
            {
                VendorName = "Microsoft Office 365",
                VendorLogoFileName = "microsoft office logo.png",
                VendorLogo = File.ReadAllBytes("J:\\CompareCloudware\\CompareCloudware.Web\\Images\\Logos\\Office\\microsoft office logo.png"),
                VendorLogoFullURL = "//Images//Logos/Office//",
            };
            repository.AddVendor(v);
            v = new Vendor()
            {
                VendorName = "Google Apps for Business",
                VendorLogoFileName = "google apps logo.jpg",
                VendorLogo = File.ReadAllBytes("J:\\CompareCloudware\\CompareCloudware.Web\\Images\\Logos\\Office\\google apps logo.jpg"),
                VendorLogoFullURL = "//Images//Logos/Office//",
            };
            repository.AddVendor(v);
            v = new Vendor()
            {
                VendorName = "ZOHO docs",
                VendorLogoFileName = "zoho logo.gif",
                VendorLogo = File.ReadAllBytes("J:\\CompareCloudware\\CompareCloudware.Web\\Images\\Logos\\Office\\zoho logo.gif"),
                VendorLogoFullURL = "//Images//Logos/Office//",
            };
            repository.AddVendor(v);
            v = new Vendor()
            {
                VendorName = "Think Free",
                VendorLogoFileName = "thinkfree logo.jpg",
                VendorLogo = File.ReadAllBytes("J:\\CompareCloudware\\CompareCloudware.Web\\Images\\Logos\\Office\\thinkfree logo.jpg"),
                VendorLogoFullURL = "//Images//Logos/Office//",
            };
            repository.AddVendor(v);
            v = new Vendor()
            {
                VendorName = "feng OFFICE",
                VendorLogoFileName = "feng office logo.png",
                VendorLogo = File.ReadAllBytes("J:\\CompareCloudware\\CompareCloudware.Web\\Images\\Logos\\Office\\feng office logo.png"),
                VendorLogoFullURL = "//Images//Logos/Office//",
            };
            repository.AddVendor(v);
            v = new Vendor()
            {
                VendorName = "Z CUBES",
                VendorLogoFileName = "zcubes logo.jpg",
                VendorLogo = File.ReadAllBytes("J:\\CompareCloudware\\CompareCloudware.Web\\Images\\Logos\\Office\\zcubes logo.jpg"),
                VendorLogoFullURL = "//Images//Logos/Office//",
            };
            repository.AddVendor(v);
            v = new Vendor()
            {
                VendorName = "HyperOffice",
                VendorLogoFileName = "hyperoffice logo.png",
                VendorLogo = File.ReadAllBytes("J:\\CompareCloudware\\CompareCloudware.Web\\Images\\Logos\\Office\\hyperoffice logo.png"),
                VendorLogoFullURL = "//Images//Logos/Office//",
            };
            repository.AddVendor(v);
            v = new Vendor()
            {
                VendorName = "myoffice",
                VendorLogoFileName = "my office logo.jpg",
                VendorLogo = File.ReadAllBytes("J:\\CompareCloudware\\CompareCloudware.Web\\Images\\Logos\\Office\\my office logo.jpg"),
                VendorLogoFullURL = "//Images//Logos/Office//",
            };
            repository.AddVendor(v);
            v = new Vendor()
            {
                VendorName = "Quickoffice",
                VendorLogoFileName = "quick office logo.jpg",
                VendorLogo = File.ReadAllBytes("J:\\CompareCloudware\\CompareCloudware.Web\\Images\\Logos\\Office\\quick office logo.jpg"),
                VendorLogoFullURL = "//Images//Logos/Office//",
            };
            repository.AddVendor(v);
            v = new Vendor()
            {
                VendorName = "Live Documents",
                VendorLogoFileName = "live documents logo.jpg",
                VendorLogo = File.ReadAllBytes("J:\\CompareCloudware\\CompareCloudware.Web\\Images\\Logos\\Office\\live documents logo.jpg"),
                VendorLogoFullURL = "//Images//Logos/Office//",
            };
            repository.AddVendor(v);
            v = new Vendor()
            {
                VendorName = "EVERNOTE",
                VendorLogoFileName = "evernote logo.jpg",
                VendorLogo = File.ReadAllBytes("J:\\CompareCloudware\\CompareCloudware.Web\\Images\\Logos\\Office\\evernote logo.jpg"),
                VendorLogoFullURL = "//Images//Logos/Office//",
            };
            repository.AddVendor(v);
            v = new Vendor()
            {
                VendorName = "sliderocket",
                VendorLogoFileName = "slide rocket logo.jpg",
                VendorLogo = File.ReadAllBytes("J:\\CompareCloudware\\CompareCloudware.Web\\Images\\Logos\\Office\\slide rocket logo.jpg"),
                VendorLogoFullURL = "//Images//Logos/Office//",
            };
            repository.AddVendor(v);
            v = new Vendor()
            {
                VendorName = "PREZI",
                VendorLogoFileName = "prezi logo.jpg",
                VendorLogo = File.ReadAllBytes("J:\\CompareCloudware\\CompareCloudware.Web\\Images\\Logos\\Office\\prezi logo.jpg"),
                VendorLogoFullURL = "//Images//Logos/Office//",
            };
            repository.AddVendor(v);
            v = new Vendor()
            {
                VendorName = "CARBONITE",
                VendorLogoFileName = "carbonite logo.jpg",
                VendorLogo = File.ReadAllBytes("J:\\CompareCloudware\\CompareCloudware.Web\\Images\\Logos\\Storage And Backup\\carbonite logo.jpg"),
                VendorLogoFullURL = "//Images//Logos/Storage And Backup//",
            };
            repository.AddVendor(v);
            v = new Vendor()
            {
                VendorName = "box",
                VendorLogoFileName = "box logo.jpg",
                VendorLogo = File.ReadAllBytes("J:\\CompareCloudware\\CompareCloudware.Web\\Images\\Logos\\Storage And Backup\\box logo.jpg"),
                VendorLogoFullURL = "//Images//Logos/Storage And Backup//",
            };
            repository.AddVendor(v);
            v = new Vendor()
            {
                VendorName = "OpenDrive",
                VendorLogoFileName = "open drive logo.jpg",
                VendorLogo = File.ReadAllBytes("J:\\CompareCloudware\\CompareCloudware.Web\\Images\\Logos\\Storage And Backup\\open drive logo.jpg"),
                VendorLogoFullURL = "//Images//Logos/Storage And Backup//",
            };
            repository.AddVendor(v);
            v = new Vendor()
            {
                VendorName = "ADrive",
                VendorLogoFileName = "adrive logo.jpg",
                VendorLogo = File.ReadAllBytes("J:\\CompareCloudware\\CompareCloudware.Web\\Images\\Logos\\Storage And Backup\\adrive logo.jpg"),
                VendorLogoFullURL = "//Images//Logos/Storage And Backup//",
            };
            repository.AddVendor(v);
            v = new Vendor()
            {
                VendorName = "storegate",
                VendorLogoFileName = "storegate logo.jpg",
                VendorLogo = File.ReadAllBytes("J:\\CompareCloudware\\CompareCloudware.Web\\Images\\Logos\\Storage And Backup\\storegate logo.jpg"),
                VendorLogoFullURL = "//Images//Logos/Storage And Backup//",
            };
            repository.AddVendor(v);
            v = new Vendor()
            {
                VendorName = "SugarSync",
                VendorLogoFileName = "sugar sync logo.png",
                VendorLogo = File.ReadAllBytes("J:\\CompareCloudware\\CompareCloudware.Web\\Images\\Logos\\Storage And Backup\\sugar sync logo.png"),
                VendorLogoFullURL = "//Images//Logos/Storage And Backup//",
            };
            repository.AddVendor(v);
            v = new Vendor()
            {
                VendorName = "FLIPDRIVE",
                VendorLogoFileName = "flipdrive logo.png",
                VendorLogo = File.ReadAllBytes("J:\\CompareCloudware\\CompareCloudware.Web\\Images\\Logos\\Storage And Backup\\flipdrive logo.png"),
                VendorLogoFullURL = "//Images//Logos/Storage And Backup//",
            };
            repository.AddVendor(v);
            v = new Vendor()
            {
                VendorName = "mozy",
                VendorLogoFileName = "mozy logo.jpg",
                VendorLogo = File.ReadAllBytes("J:\\CompareCloudware\\CompareCloudware.Web\\Images\\Logos\\Storage And Backup\\mozy logo.jpg"),
                VendorLogoFullURL = "//Images//Logos/Storage And Backup//",
            };
            repository.AddVendor(v);
            v = new Vendor()
            {
                VendorName = "Dropbox",
                VendorLogoFileName = "dropbox logo.png",
                VendorLogo = File.ReadAllBytes("J:\\CompareCloudware\\CompareCloudware.Web\\Images\\Logos\\Storage And Backup\\dropbox logo.png"),
                VendorLogoFullURL = "//Images//Logos/Storage And Backup//",
            };
            repository.AddVendor(v);
            v = new Vendor()
            {
                VendorName = "CRASHPLAN",
                VendorLogoFileName = "crashplan logo.png",
                VendorLogo = File.ReadAllBytes("J:\\CompareCloudware\\CompareCloudware.Web\\Images\\Logos\\Storage And Backup\\crashplan logo.png"),
                VendorLogoFullURL = "//Images//Logos/Storage And Backup//",
            };
            repository.AddVendor(v);
            v = new Vendor()
            {
                VendorName = "elephantdrive",
                VendorLogoFileName = "elephant drive logo.png",
                VendorLogo = File.ReadAllBytes("J:\\CompareCloudware\\CompareCloudware.Web\\Images\\Logos\\Storage And Backup\\elephant drive logo.png"),
                VendorLogoFullURL = "//Images//Logos/Storage And Backup//",
            };
            repository.AddVendor(v);
            v = new Vendor()
            {
                VendorName = "iDrive",
                VendorLogoFileName = "idrive logo.png",
                VendorLogo = File.ReadAllBytes("J:\\CompareCloudware\\CompareCloudware.Web\\Images\\Logos\\Storage And Backup\\idrive logo.png"),
                VendorLogoFullURL = "//Images//Logos/Storage And Backup//",
            };
            repository.AddVendor(v);
            v = new Vendor()
            {
                VendorName = "livedrive",
                VendorLogoFileName = "live drive logo.jpg",
                VendorLogo = File.ReadAllBytes("J:\\CompareCloudware\\CompareCloudware.Web\\Images\\Logos\\Storage And Backup\\live drive logo.jpg"),
                VendorLogoFullURL = "//Images//Logos/Storage And Backup//",
            };
            repository.AddVendor(v);
            v = new Vendor()
            {
                VendorName = "iBackup",
                VendorLogoFileName = "ibackup logo.png",
                VendorLogo = File.ReadAllBytes("J:\\CompareCloudware\\CompareCloudware.Web\\Images\\Logos\\Storage And Backup\\ibackup logo.png"),
                VendorLogoFullURL = "//Images//Logos/Storage And Backup//",
            };
            repository.AddVendor(v);
            v = new Vendor()
            {
                VendorName = "backupify",
                VendorLogoFileName = "backupify logo.jpg",
                VendorLogo = File.ReadAllBytes("J:\\CompareCloudware\\CompareCloudware.Web\\Images\\Logos\\Storage And Backup\\backupify logo.jpg"),
                VendorLogoFullURL = "//Images//Logos/Storage And Backup//",
            };
            repository.AddVendor(v);
            v = new Vendor()
            {
                VendorName = "ZOHO Projects",
                VendorLogoFileName = "zoho projects logo.gif",
                VendorLogo = File.ReadAllBytes("J:\\CompareCloudware\\CompareCloudware.Web\\Images\\Logos\\Project Management\\zoho projects logo.gif"),
                VendorLogoFullURL = "//Images//Logos/Project Management//",
            };
            repository.AddVendor(v);
            v = new Vendor()
            {
                VendorName = "@task",
                VendorLogoFileName = "attask logo.jpg",
                VendorLogo = File.ReadAllBytes("J:\\CompareCloudware\\CompareCloudware.Web\\Images\\Logos\\Project Management\\attask logo.jpg"),
                VendorLogoFullURL = "//Images//Logos/Project Management//",
            };
            repository.AddVendor(v);
            v = new Vendor()
            {
                VendorName = "mavenlink",
                VendorLogoFileName = "mavenlink logo.jpg",
                VendorLogo = File.ReadAllBytes("J:\\CompareCloudware\\CompareCloudware.Web\\Images\\Logos\\Project Management\\mavenlink logo.jpg"),
                VendorLogoFullURL = "//Images//Logos/Project Management//",
            };
            repository.AddVendor(v);
            v = new Vendor()
            {
                VendorName = "clarizen",
                VendorLogoFileName = "clarizen logo.png",
                VendorLogo = File.ReadAllBytes("J:\\CompareCloudware\\CompareCloudware.Web\\Images\\Logos\\Project Management\\clarizen logo.png"),
                VendorLogoFullURL = "//Images//Logos/Project Management//",
            };
            repository.AddVendor(v);
            v = new Vendor()
            {
                VendorName = "ProWorkflow",
                VendorLogoFileName = "proworkflow logo.png",
                VendorLogo = File.ReadAllBytes("J:\\CompareCloudware\\CompareCloudware.Web\\Images\\Logos\\Project Management\\proworkflow logo.png"),
                VendorLogoFullURL = "//Images//Logos/Project Management//",
            };
            repository.AddVendor(v);
            v = new Vendor()
            {
                VendorName = "HyperOffice",
                VendorLogoFileName = "hyperoffice logo.png",
                VendorLogo = File.ReadAllBytes("J:\\CompareCloudware\\CompareCloudware.Web\\Images\\Logos\\Project Management\\hyperoffice logo.png"),
                VendorLogoFullURL = "//Images//Logos/Project Management//",
            };
            repository.AddVendor(v);
            v = new Vendor()
            {
                VendorName = "WORKetc",
                VendorLogoFileName = "worketc. logo.png",
                VendorLogo = File.ReadAllBytes("J:\\CompareCloudware\\CompareCloudware.Web\\Images\\Logos\\Project Management\\worketc. logo.png"),
                VendorLogoFullURL = "//Images//Logos/Project Management//",
            };
            repository.AddVendor(v);
            v = new Vendor()
            {
                VendorName = "LiquidPlanner",
                VendorLogoFileName = "liquidplanner logo.jpg",
                VendorLogo = File.ReadAllBytes("J:\\CompareCloudware\\CompareCloudware.Web\\Images\\Logos\\Project Management\\liquidplanner logo.jpg"),
                VendorLogoFullURL = "//Images//Logos/Project Management//",
            };
            repository.AddVendor(v);
            v = new Vendor()
            {
                VendorName = "CELOXIS",
                VendorLogoFileName = "celoxis logo.png",
                VendorLogo = File.ReadAllBytes("J:\\CompareCloudware\\CompareCloudware.Web\\Images\\Logos\\Project Management\\celoxis logo.png"),
                VendorLogoFullURL = "//Images//Logos/Project Management//",
            };
            repository.AddVendor(v);
            v = new Vendor()
            {
                VendorName = "blue camroo",
                VendorLogoFileName = "blue camroo logo.jpg",
                VendorLogo = File.ReadAllBytes("J:\\CompareCloudware\\CompareCloudware.Web\\Images\\Logos\\Project Management\\blue camroo logo.jpg"),
                VendorLogoFullURL = "//Images//Logos/Project Management//",
            };
            repository.AddVendor(v);
            v = new Vendor()
            {
                VendorName = "PROJECTMANAGER.com",
                VendorLogoFileName = "project manager logo.jpg",
                VendorLogo = File.ReadAllBytes("J:\\CompareCloudware\\CompareCloudware.Web\\Images\\Logos\\Project Management\\project manager logo.jpg"),
                VendorLogoFullURL = "//Images//Logos/Project Management//",
            };
            repository.AddVendor(v);
            v = new Vendor()
            {
                VendorName = "CollaborateCloud",
                VendorLogoFileName = "collaboratecloud logo.png",
                VendorLogo = File.ReadAllBytes("J:\\CompareCloudware\\CompareCloudware.Web\\Images\\Logos\\Project Management\\collaboratecloud logo.png"),
                VendorLogoFullURL = "//Images//Logos/Project Management//",
            };
            repository.AddVendor(v);
            v = new Vendor()
            {
                VendorName = "copper",
                VendorLogoFileName = "copper project logo.png",
                VendorLogo = File.ReadAllBytes("J:\\CompareCloudware\\CompareCloudware.Web\\Images\\Logos\\Project Management\\copper project logo.png"),
                VendorLogoFullURL = "//Images//Logos/Project Management//",
            };
            repository.AddVendor(v);
            v = new Vendor()
            {
                VendorName = "projectplace",
                VendorLogoFileName = "project place logo.png",
                VendorLogo = File.ReadAllBytes("J:\\CompareCloudware\\CompareCloudware.Web\\Images\\Logos\\Project Management\\project place logo.png"),
                VendorLogoFullURL = "//Images//Logos/Project Management//",
            };
            repository.AddVendor(v);
            v = new Vendor()
            {
                VendorName = "Basecamp",
                VendorLogoFileName = "basecamp logo.gif",
                VendorLogo = File.ReadAllBytes("J:\\CompareCloudware\\CompareCloudware.Web\\Images\\Logos\\Project Management\\basecamp logo.gif"),
                VendorLogoFullURL = "//Images//Logos/Project Management//",
            };
            repository.AddVendor(v);
            v = new Vendor()
            {
                VendorName = "trafficLIVE",
                VendorLogoFileName = "traffic live logo.jpg",
                VendorLogo = File.ReadAllBytes("J:\\CompareCloudware\\CompareCloudware.Web\\Images\\Logos\\Project Management\\traffic live logo.jpg"),
                VendorLogoFullURL = "//Images//Logos/Project Management//",
            };
            repository.AddVendor(v);
            v = new Vendor()
            {
                VendorName = "iManageProject",
                VendorLogoFileName = "manage project logo.jpg",
                VendorLogo = File.ReadAllBytes("J:\\CompareCloudware\\CompareCloudware.Web\\Images\\Logos\\Project Management\\manage project logo.jpg"),
                VendorLogoFullURL = "//Images//Logos/Project Management//",
            };
            repository.AddVendor(v);
            v = new Vendor()
            {
                VendorName = "intervals",
                VendorLogoFileName = "intervals logo.png",
                VendorLogo = File.ReadAllBytes("J:\\CompareCloudware\\CompareCloudware.Web\\Images\\Logos\\Project Management\\intervals logo.png"),
                VendorLogoFullURL = "//Images//Logos/Project Management//",
            };
            repository.AddVendor(v);
            v = new Vendor()
            {
                VendorName = "Geniusproject",
                VendorLogoFileName = "genius project logo.jpg",
                VendorLogo = File.ReadAllBytes("J:\\CompareCloudware\\CompareCloudware.Web\\Images\\Logos\\Project Management\\genius project logo.jpg"),
                VendorLogoFullURL = "//Images//Logos/Project Management//",
            };
            repository.AddVendor(v);
            v = new Vendor()
            {
                VendorName = "glasscubes",
                VendorLogoFileName = "glasscubes logo.jpg",
                VendorLogo = File.ReadAllBytes("J:\\CompareCloudware\\CompareCloudware.Web\\Images\\Logos\\Project Management\\glasscubes logo.jpg"),
                VendorLogoFullURL = "//Images//Logos/Project Management//",
            };
            repository.AddVendor(v);
            v = new Vendor()
            {
                VendorName = "xero",
                VendorLogoFileName = "xero logo.jpg",
                VendorLogo = File.ReadAllBytes("J:\\CompareCloudware\\CompareCloudware.Web\\Images\\Logos\\Finance\\xero logo.jpg"),
                VendorLogoFullURL = "//Images//Logos/Finance//",
            };
            repository.AddVendor(v);
            v = new Vendor()
            {
                VendorName = "SageOne",
                VendorLogoFileName = "sage one logo.jpg",
                VendorLogo = File.ReadAllBytes("J:\\CompareCloudware\\CompareCloudware.Web\\Images\\Logos\\Finance\\sage one logo.jpg"),
                VendorLogoFullURL = "//Images//Logos/Finance//",
            };
            repository.AddVendor(v);
            v = new Vendor()
            {
                VendorName = "e-conomic",
                VendorLogoFileName = "e-conomic logo.jpg",
                VendorLogo = File.ReadAllBytes("J:\\CompareCloudware\\CompareCloudware.Web\\Images\\Logos\\Finance\\e-conomic logo.jpg"),
                VendorLogoFullURL = "//Images//Logos/Finance//",
            };
            repository.AddVendor(v);
            v = new Vendor()
            {
                VendorName = "ARITHMO",
                VendorLogoFileName = "arithmo logo.gif",
                VendorLogo = File.ReadAllBytes("J:\\CompareCloudware\\CompareCloudware.Web\\Images\\Logos\\Finance\\arithmo logo.gif"),
                VendorLogoFullURL = "//Images//Logos/Finance//",
            };
            repository.AddVendor(v);
            v = new Vendor()
            {
                VendorName = "liquid",
                VendorLogoFileName = "liquid accounts logo.jpg",
                VendorLogo = File.ReadAllBytes("J:\\CompareCloudware\\CompareCloudware.Web\\Images\\Logos\\Finance\\liquid accounts logo.jpg"),
                VendorLogoFullURL = "//Images//Logos/Finance//",
            };
            repository.AddVendor(v);
            v = new Vendor()
            {
                VendorName = "kashoo",
                VendorLogoFileName = "kashoo logo.gif",
                VendorLogo = File.ReadAllBytes("J:\\CompareCloudware\\CompareCloudware.Web\\Images\\Logos\\Finance\\kashoo logo.gif"),
                VendorLogoFullURL = "//Images//Logos/Finance//",
            };
            repository.AddVendor(v);
            v = new Vendor()
            {
                VendorName = "FRESHBOOKS",
                VendorLogoFileName = "freshbooks logo.jpg",
                VendorLogo = File.ReadAllBytes("J:\\CompareCloudware\\CompareCloudware.Web\\Images\\Logos\\Finance\\freshbooks logo.jpg"),
                VendorLogoFullURL = "//Images//Logos/Finance//",
            };
            repository.AddVendor(v);
            v = new Vendor()
            {
                VendorName = "ClearBooks",
                VendorLogoFileName = "clearbooks logo.png",
                VendorLogo = File.ReadAllBytes("J:\\CompareCloudware\\CompareCloudware.Web\\Images\\Logos\\Finance\\clearbooks logo.png"),
                VendorLogoFullURL = "//Images//Logos/Finance//",
            };
            repository.AddVendor(v);
            v = new Vendor()
            {
                VendorName = "ledgerble",
                VendorLogoFileName = "ledgerble logo.jpg",
                VendorLogo = File.ReadAllBytes("J:\\CompareCloudware\\CompareCloudware.Web\\Images\\Logos\\Finance\\ledgerble logo.jpg"),
                VendorLogoFullURL = "//Images//Logos/Finance//",
            };
            repository.AddVendor(v);
            v = new Vendor()
            {
                VendorName = "KashFlow",
                VendorLogoFileName = "kashflow logo.jpg",
                VendorLogo = File.ReadAllBytes("J:\\CompareCloudware\\CompareCloudware.Web\\Images\\Logos\\Finance\\kashflow logo.jpg"),
                VendorLogoFullURL = "//Images//Logos/Finance//",
            };
            repository.AddVendor(v);
            v = new Vendor()
            {
                VendorName = "FreeAgent",
                VendorLogoFileName = "freeagent central logo.jpg",
                VendorLogo = File.ReadAllBytes("J:\\CompareCloudware\\CompareCloudware.Web\\Images\\Logos\\Finance\\freeagent central logo.jpg"),
                VendorLogoFullURL = "//Images//Logos/Finance//",
            };
            repository.AddVendor(v);
            v = new Vendor()
            {
                VendorName = "outright",
                VendorLogoFileName = "outright logo.png",
                VendorLogo = File.ReadAllBytes("J:\\CompareCloudware\\CompareCloudware.Web\\Images\\Logos\\Finance\\outright logo.png"),
                VendorLogoFullURL = "//Images//Logos/Finance//",
            };
            repository.AddVendor(v);
            v = new Vendor()
            {
                VendorName = "ZOHO Books",
                VendorLogoFileName = "zoho books logo.png",
                VendorLogo = File.ReadAllBytes("J:\\CompareCloudware\\CompareCloudware.Web\\Images\\Logos\\Finance\\zoho books logo.png"),
                VendorLogoFullURL = "//Images//Logos/Finance//",
            };
            repository.AddVendor(v);
            v = new Vendor()
            {
                VendorName = "iCashbook",
                VendorLogoFileName = "icashbook logo.gif",
                VendorLogo = File.ReadAllBytes("J:\\CompareCloudware\\CompareCloudware.Web\\Images\\Logos\\Finance\\icashbook logo.gif"),
                VendorLogoFullURL = "//Images//Logos/Finance//",
            };
            repository.AddVendor(v);
            v = new Vendor()
            {
                VendorName = "Yendo",
                VendorLogoFileName = "yendo logo.jpg",
                VendorLogo = File.ReadAllBytes("J:\\CompareCloudware\\CompareCloudware.Web\\Images\\Logos\\Finance\\yendo logo.jpg"),
                VendorLogoFullURL = "//Images//Logos/Finance//",
            };
            repository.AddVendor(v);
            v = new Vendor()
            {
                VendorName = "intuit",
                VendorLogoFileName = "",
            };
            repository.AddVendor(v);
            #endregion

            #region THUMBNAIL DOCUMENT TYPES
            tdt = new ThumbnailDocumentType()
            {
                ThumbnailDocumentTypeName = "Case Study"
            };
            repository.AddThumbnailDocumentType(tdt);
            tdt = new ThumbnailDocumentType()
            {
                ThumbnailDocumentTypeName = "White Paper"
            };
            repository.AddThumbnailDocumentType(tdt);
            #endregion

            #region ADVERTISING IMAGE TYPES
            ait = new AdvertisingImageType()
            {
                AdvertisingImageTypeName = "MPU"
            };
            repository.AddAdvertisingImageType(ait);
            ait = new AdvertisingImageType()
            {
                AdvertisingImageTypeName = "CAROUSEL"
            };
            repository.AddAdvertisingImageType(ait);
            ait = new AdvertisingImageType()
            {
                AdvertisingImageTypeName = "SKYSCRAPER"
            };
            repository.AddAdvertisingImageType(ait);
            #endregion

            #region TAG TYPES
            tt = new TagType()
            {
                TagTypeName = "PRIMARY"
            };
            repository.AddTagType(tt);
            tt = new TagType()
            {
                TagTypeName = "SECONDARY"
            };
            repository.AddTagType(tt);
            tt = new TagType()
            {
                TagTypeName = "TERTIARY"
            };
            repository.AddTagType(tt);
            tt = new TagType()
            {
                TagTypeName = "PHRASE"
            };
            repository.AddTagType(tt);
            tt = new TagType()
            {
                TagTypeName = "VERNACULAR"
            };
            repository.AddTagType(tt);
            #endregion

            #region CONTENTTEXTTYPES
            ctt = new ContentTextType()
            {
                ContentTextTypeName = "CONFERENCING_CATEGORY_TITLE",
            };
            repository.AddContentTextType(ctt);
            ctt = new ContentTextType()
            {
                ContentTextTypeName = "PROJECTMANAGEMENT_CATEGORY_TITLE",
            };
            repository.AddContentTextType(ctt);
            ctt = new ContentTextType()
            {
                ContentTextTypeName = "STORAGEANDBACKUP_CATEGORY_TITLE",
            };
            repository.AddContentTextType(ctt);
            ctt = new ContentTextType()
            {
                ContentTextTypeName = "EMAIL_CATEGORY_TITLE",
            };
            repository.AddContentTextType(ctt);
            ctt = new ContentTextType()
            {
                ContentTextTypeName = "FINANCIAL_CATEGORY_TITLE",
            };
            repository.AddContentTextType(ctt);
            ctt = new ContentTextType()
            {
                ContentTextTypeName = "OFFICE_CATEGORY_TITLE",
            };
            repository.AddContentTextType(ctt);
            ctt = new ContentTextType()
            {
                ContentTextTypeName = "VOICE_CATEGORY_TITLE",
            };
            repository.AddContentTextType(ctt);
            ctt = new ContentTextType()
            {
                ContentTextTypeName = "CUSTOMERMANAGEMENT_CATEGORY_TITLE",
            };
            repository.AddContentTextType(ctt);

            ctt = new ContentTextType()
            {
                ContentTextTypeName = "CONFERENCING_CATEGORY_BODY",
            };
            repository.AddContentTextType(ctt);
            ctt = new ContentTextType()
            {
                ContentTextTypeName = "PROJECTMANAGEMENT_CATEGORY_BODY",
            };
            repository.AddContentTextType(ctt);
            ctt = new ContentTextType()
            {
                ContentTextTypeName = "STORAGEANDBACKUP_CATEGORY_BODY",
            };
            repository.AddContentTextType(ctt);
            ctt = new ContentTextType()
            {
                ContentTextTypeName = "EMAIL_CATEGORY_BODY",
            };
            repository.AddContentTextType(ctt);
            ctt = new ContentTextType()
            {
                ContentTextTypeName = "FINANCIAL_CATEGORY_BODY",
            };
            repository.AddContentTextType(ctt);
            ctt = new ContentTextType()
            {
                ContentTextTypeName = "OFFICE_CATEGORY_BODY",
            };
            repository.AddContentTextType(ctt);
            ctt = new ContentTextType()
            {
                ContentTextTypeName = "VOICE_CATEGORY_BODY",
            };
            repository.AddContentTextType(ctt);
            ctt = new ContentTextType()
            {
                ContentTextTypeName = "CUSTOMERMANAGEMENT_CATEGORY_BODY",
            };
            repository.AddContentTextType(ctt);
            ctt = new ContentTextType()
            {
                ContentTextTypeName = "CLOUDWAREEXPLAINED_TITLE",
            };
            repository.AddContentTextType(ctt);
            ctt = new ContentTextType()
            {
                ContentTextTypeName = "CLOUDWAREEXPLAINED_SECTION_TITLE",
            };
            repository.AddContentTextType(ctt);
            ctt = new ContentTextType()
            {
                ContentTextTypeName = "CLOUDWAREEXPLAINED_SECTION_BODY",
            };
            repository.AddContentTextType(ctt);


            ctt = new ContentTextType()
            {
                ContentTextTypeName = "10REASONSFORUSINGCLOUDWARE_TITLE",
            };
            repository.AddContentTextType(ctt);
            ctt = new ContentTextType()
            {
                ContentTextTypeName = "10REASONSFORUSINGCLOUDWARE_SECTION_TITLE",
            };
            repository.AddContentTextType(ctt);
            ctt = new ContentTextType()
            {
                ContentTextTypeName = "10REASONSFORUSINGCLOUDWARE_SECTION_BODY",
            };
            repository.AddContentTextType(ctt);


            ctt = new ContentTextType()
            {
                ContentTextTypeName = "WHATDOESMYBUSINESSNEEDTORUNCLOUDWARE_TITLE",
            };
            repository.AddContentTextType(ctt);
            ctt = new ContentTextType()
            {
                ContentTextTypeName = "WHATDOESMYBUSINESSNEEDTORUNCLOUDWARE_SUBTITLE",
            };
            repository.AddContentTextType(ctt);
            ctt = new ContentTextType()
            {
                ContentTextTypeName = "WHATDOESMYBUSINESSNEEDTORUNCLOUDWARE_SECTION_TITLE",
            };
            repository.AddContentTextType(ctt);
            ctt = new ContentTextType()
            {
                ContentTextTypeName = "WHATDOESMYBUSINESSNEEDTORUNCLOUDWARE_SECTION_BODY",
            };
            repository.AddContentTextType(ctt);

                            
                
                

            ctt = new ContentTextType()
            {
                ContentTextTypeName = "ABOUTUS_TITLE",
            };
            repository.AddContentTextType(ctt);
            ctt = new ContentTextType()
            {
                ContentTextTypeName = "ABOUTUS_SECTION_TITLE",
            };
            repository.AddContentTextType(ctt);
            ctt = new ContentTextType()
            {
                ContentTextTypeName = "ABOUTUS_SECTION_BODY",
            };
            repository.AddContentTextType(ctt);






            ctt = new ContentTextType()
            {
                ContentTextTypeName = "MANAGEMENTTEAM_TITLE",
            };
            repository.AddContentTextType(ctt);
            ctt = new ContentTextType()
            {
                ContentTextTypeName = "MANAGEMENTTEAM_SECTION_TITLE",
            };
            repository.AddContentTextType(ctt);
            ctt = new ContentTextType()
            {
                ContentTextTypeName = "MANAGEMENTTEAM_SECTION_BODY",
            };
            repository.AddContentTextType(ctt);








            ctt = new ContentTextType()
            {
                ContentTextTypeName = "VISION_TITLE",
            };
            repository.AddContentTextType(ctt);
            ctt = new ContentTextType()
            {
                ContentTextTypeName = "VISION_SECTION_TITLE",
            };
            repository.AddContentTextType(ctt);
            ctt = new ContentTextType()
            {
                ContentTextTypeName = "VISION_SECTION_BODY",
            };
            repository.AddContentTextType(ctt);









            ctt = new ContentTextType()
            {
                ContentTextTypeName = "FAQS_TITLE",
            };
            repository.AddContentTextType(ctt);
            ctt = new ContentTextType()
            {
                ContentTextTypeName = "FAQS_SECTION_TITLE",
            };
            repository.AddContentTextType(ctt);
            ctt = new ContentTextType()
            {
                ContentTextTypeName = "FAQS_SECTION_BODY",
            };
            repository.AddContentTextType(ctt);










            ctt = new ContentTextType()
            {
                ContentTextTypeName = "CAREERS_TITLE",
            };
            repository.AddContentTextType(ctt);
            ctt = new ContentTextType()
            {
                ContentTextTypeName = "CAREERS_SECTION_TITLE",
            };
            repository.AddContentTextType(ctt);
            ctt = new ContentTextType()
            {
                ContentTextTypeName = "CAREERS_SECTION_BODY",
            };
            repository.AddContentTextType(ctt);











            ctt = new ContentTextType()
            {
                ContentTextTypeName = "PRESS_TITLE",
            };
            repository.AddContentTextType(ctt);
            ctt = new ContentTextType()
            {
                ContentTextTypeName = "PRESS_SECTION_TITLE",
            };
            repository.AddContentTextType(ctt);
            ctt = new ContentTextType()
            {
                ContentTextTypeName = "PRESS_SECTION_BODY",
            };
            repository.AddContentTextType(ctt);










            ctt = new ContentTextType()
            {
                ContentTextTypeName = "CONTACTUS_TITLE",
            };
            repository.AddContentTextType(ctt);
            ctt = new ContentTextType()
            {
                ContentTextTypeName = "CONTACTUS_SECTION_TITLE",
            };
            repository.AddContentTextType(ctt);
            ctt = new ContentTextType()
            {
                ContentTextTypeName = "CONTACTUS_SECTION_BODY",
            };
            repository.AddContentTextType(ctt);

            #endregion

            //// Mock the Products Repository using Moq
            //Mock<ICloudCompareContext> mockCloudCompareRepository = new Mock<ICloudCompareContext>();

            //// Try finding a product by id
            //CloudApplication testCloudApplication = mockCloudCompareRepository.Object.FindById(2);

            //Assert.IsNotNull(testCloudApplication); // Test if null
            //Assert.IsInstanceOfType(typeof(CloudApplication),testCloudApplication); // Test type
            //Assert.AreEqual("TITLE", testCloudApplication.Title); // Verify it is the right product
        }

        public void LoadFakeProductionData(ICloudCompareContext context)
        {
            #region VENDORS SCRATCHPAD
            #endregion

            //now use this fake stub as the repository
            var repository = new QueryRepository(this.FakeContext);
            CloudApplication ca;

            #region APPLICATIONS

            #region VOICE

            #region SKYPE
            ca = new CloudApplication()
            {
                Brand = "Skype",
                ServiceName = "Unlimited World",
                CompanyURL = "www.skype.co.uk",
                OperatingSystems = new List<Domain.Models.OperatingSystem>()
                {
                    repository.FindOperatingSystemByName("WIN"),
                    repository.FindOperatingSystemByName("MAC"),
                    repository.FindOperatingSystemByName("LINUX")
                },
                MobilePlatforms = repository.GetAllMobilePlatforms(),
                Browsers = new List<Browser>()
                {
                    repository.FindBrowserByName("Internet Explorer 6"),
                    repository.FindBrowserByName("Internet Explorer 7"),
                    repository.FindBrowserByName("Internet Explorer 8"),
                    repository.FindBrowserByName("Internet Explorer 9"),
                    repository.FindBrowserByName("FIREFOX"),
                },
                LicenceTypeMinimum = repository.FindLicenceTypeMinimumByName(1),
                LicenceTypeMaximum = repository.FindLicenceTypeMaximumByName(99),
                Languages = new List<Language>()
                {
                    repository.FindLanguageByName("ENGLISH")
                },
                SupportTypes = new List<SupportType>()
                {
                    repository.FindSupportTypeByName("ONLINE")
                },
                SupportHours = repository.FindSupportHoursByName("24"),
                SupportDays = repository.FindSupportDaysByName("7"),
                SupportTerritories = new List<SupportTerritory>()
                {
                    repository.FindSupportTerritoryByName("UK"),
                },
                VideoTrainingSupport = true,
                CloudApplicationFeatures = new List<CloudApplicationFeature>()
                {
                    repository.FindFeatureByName("PC REQUIRED"),
                    repository.FindFeatureByName("INCLUSIVE UK LANDLINE CALLS"),
                    repository.FindFeatureByName("INCLUSIVE INTERNATIONAL CALLS"),
                    repository.FindFeatureByName("VIRTUAL LANDLINE NUMBER"),
                    repository.FindFeatureByName("DIAL-BY-NAME DIRECTORY"),
                    repository.FindFeatureByName("VIDEO CALLING"),
                    repository.FindFeatureByName("ANSWERING RULES"),
                    repository.FindFeatureByName("VOICEMAIL"),
                    repository.FindFeatureByName("SMS SENDING"),
                    repository.FindFeatureByName("CALL FORWARDING"),
                    repository.FindFeatureByName("FIXED-TO-MOBILE INTEGRATION"),
                },
                ApplicationCostPerMonth = 7.99M,
                CallsPackageCostPerMonth = 0M,
                SetupFee = repository.FindSetupFeeByName("NOT APPLICABLE"),
                MinimumContract = repository.FindMinimumContractByName("NO CONTRACT"),
                PaymentFrequency = repository.FindPaymentFrequencyByName("MONTHLY"),
                PaymentOptions = new List<PaymentOption>()
                {
                    repository.FindPaymentOptionByName("CREDIT CARD"),
                    repository.FindPaymentOptionByName("PRE-PAY"),
                },
                FreeTrialPeriod = repository.FindFreeTrialPeriodByName("NO"),
                Category = repository.FindCategoryByName("VOICE"),
                Vendor = repository.FindVendorByName("SKYPE"),
                Description = repository.GetDescription(),
                AddDate = DateTime.Now,
                #region Ratings,Reviews,Case Studies,White Papers
                Ratings = new List<CloudApplicationRating>()
                {
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                },
                Reviews = new List<CloudApplicationReview>()
                {
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                },
                ThumbnailDocuments = new List<ThumbnailDocument>()
                {
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("WHITE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_WHITE_PAPER_FILEPATH+PDF_TEST_WHITE_PAPER_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_WHITE_PAPER_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_WHITE_PAPER_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_WHITE_PAPER_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("WHITE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_WHITE_PAPER_FILEPATH+PDF_TEST_WHITE_PAPER_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_WHITE_PAPER_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.ebay.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_WHITE_PAPER_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_WHITE_PAPER_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("WHITE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_WHITE_PAPER_FILEPATH+PDF_TEST_WHITE_PAPER_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_WHITE_PAPER_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.facebook.com",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_WHITE_PAPER_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_WHITE_PAPER_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("CASE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_CASE_STUDY_FILEPATH+PDF_TEST_CASE_STUDY_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_CASE_STUDY_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_CASE_STUDY_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_CASE_STUDY_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("CASE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_CASE_STUDY_FILEPATH+PDF_TEST_CASE_STUDY_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_CASE_STUDY_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.ebay.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_CASE_STUDY_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_CASE_STUDY_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("CASE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_CASE_STUDY_FILEPATH+PDF_TEST_CASE_STUDY_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_CASE_STUDY_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.facebook.com",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_CASE_STUDY_FILENAME,
                        ThumbnailDocumentFileName = PDF_TEST_CASE_STUDY_FILENAME,
                    },
                },
                #endregion
            };

            repository.AddCloudApplication(ca);
            #endregion

            #region VONAGE
            ca = new CloudApplication()
            {
                Brand = "Vonage",
                ServiceName = "V-Plan 2",
                CompanyURL = "www.vonage.co.uk",
                OperatingSystems = new List<Domain.Models.OperatingSystem>()
                {
                    repository.FindOperatingSystemByName("WIN"),
                    repository.FindOperatingSystemByName("MAC"),
                },
                MobilePlatforms = new List<MobilePlatform>()
                {
                    repository.FindMobilePlatformByName("ANDROID"),
                    repository.FindMobilePlatformByName("IPHONE")
                },
                Browsers = new List<Browser>()
                {
                    repository.FindBrowserByName("Internet Explorer 6"),
                    repository.FindBrowserByName("Internet Explorer 7"),
                    repository.FindBrowserByName("Internet Explorer 8"),
                    repository.FindBrowserByName("Internet Explorer 9"),
                },
                LicenceTypeMinimum = repository.FindLicenceTypeMinimumByName(1),
                LicenceTypeMaximum = repository.FindLicenceTypeMaximumByName(8),
                Languages = new List<Language>()
                {
                    repository.FindLanguageByName("ENGLISH")
                },
                SupportTypes = new List<SupportType>()
                {
                    repository.FindSupportTypeByName("ONLINE")
                },
                SupportHours = repository.FindSupportHoursByName("24"),
                SupportDays = repository.FindSupportDaysByName("7"),
                SupportTerritories = new List<SupportTerritory>()
                {
                    repository.FindSupportTerritoryByName("UK"),
                },
                VideoTrainingSupport = false,
                CloudApplicationFeatures = new List<CloudApplicationFeature>()
                {
                    repository.FindFeatureByName("USE EXISTING HANDSET"),
                    repository.FindFeatureByName("KEEP EXISTING NUMBER"),
                    repository.FindFeatureByName("EMERGENCY CALLS"),
                    repository.FindFeatureByName("INCLUSIVE UK LANDLINE CALLS"),
                    repository.FindFeatureByName("INCLUSIVE INTERNATIONAL CALLS"),
                    repository.FindFeatureByName("VIRTUAL LANDLINE NUMBER"),
                    repository.FindFeatureByName("LOCAL DIALLING CODE"),
                    repository.FindFeatureByName("VOICEMAIL"),
                    repository.FindFeatureByName("CALL FORWARDING"),
                    repository.FindFeatureByName("HARDWARE SUPPLIED"),
                },
                ApplicationCostPerMonth = 8.99M,
                CallsPackageCostPerMonth = 0M,
                SetupFee = repository.FindSetupFeeByName("£27.97"),
                MinimumContract = repository.FindMinimumContractByName("12 MONTHS"),
                PaymentFrequency = repository.FindPaymentFrequencyByName("MONTHLY"),
                PaymentOptions = new List<PaymentOption>()
                {
                    repository.FindPaymentOptionByName("DIRECT DEBIT"),
                    repository.FindPaymentOptionByName("CREDIT CARD"),
                },
                FreeTrialPeriod = repository.FindFreeTrialPeriodByName("NO"),
                Category = repository.FindCategoryByName("VOICE"),
                Vendor = repository.FindVendorByName("Vonage"),
                Description = repository.GetDescription(),
                AddDate = DateTime.Now,
                #region Ratings,Reviews,Case Studies,White Papers
                Ratings = new List<CloudApplicationRating>()
                {
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                },
                Reviews = new List<CloudApplicationReview>()
                {
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                },
                ThumbnailDocuments = new List<ThumbnailDocument>()
                {
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("WHITE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_WHITE_PAPER_FILEPATH+PDF_TEST_WHITE_PAPER_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_WHITE_PAPER_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_WHITE_PAPER_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_WHITE_PAPER_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("WHITE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_WHITE_PAPER_FILEPATH+PDF_TEST_WHITE_PAPER_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_WHITE_PAPER_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_WHITE_PAPER_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_WHITE_PAPER_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("WHITE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_WHITE_PAPER_FILEPATH+PDF_TEST_WHITE_PAPER_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_WHITE_PAPER_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_WHITE_PAPER_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_WHITE_PAPER_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("CASE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_CASE_STUDY_FILEPATH+PDF_TEST_CASE_STUDY_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_CASE_STUDY_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_CASE_STUDY_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_CASE_STUDY_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("CASE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_CASE_STUDY_FILEPATH+PDF_TEST_CASE_STUDY_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_CASE_STUDY_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_CASE_STUDY_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_CASE_STUDY_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("CASE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_CASE_STUDY_FILEPATH+PDF_TEST_CASE_STUDY_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_CASE_STUDY_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_CASE_STUDY_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_CASE_STUDY_FILENAME,
                    },
                },
                #endregion
            };

            repository.AddCloudApplication(ca);
            #endregion

            #region VODAFONE
            ca = new CloudApplication()
            {
                Brand = "Vodafone",
                ServiceName = "One Net Express",
                CompanyURL = "www.vodafone.com",
                OperatingSystems = new List<Domain.Models.OperatingSystem>()
                {
                    repository.FindOperatingSystemByName("WIN"),
                    //repository.FindOperatingSystemByName("MAC"),
                },
                MobilePlatforms = new List<MobilePlatform>()
                {
                    repository.FindMobilePlatformByName("WIN"),
                    repository.FindMobilePlatformByName("BB"),
                    //repository.FindMobilePlatformByName("ANDROID"),
                    repository.FindMobilePlatformByName("IPHONE")
                },
                Browsers = new List<Browser>()
                {
                    repository.FindBrowserByName("Internet Explorer 6"),
                    repository.FindBrowserByName("Internet Explorer 7"),
                    repository.FindBrowserByName("Internet Explorer 8"),
                    repository.FindBrowserByName("Internet Explorer 9"),
                },
                LicenceTypeMinimum = repository.FindLicenceTypeMinimumByName(1),
                LicenceTypeMaximum = repository.FindLicenceTypeMaximumByName(9),
                Languages = new List<Language>()
                {
                    repository.FindLanguageByName("ENGLISH")
                },
                SupportTypes = new List<SupportType>()
                {
                    //repository.FindSupportTypeByName("ONLINE"),
                    repository.FindSupportTypeByName("TELEPHONE"),
                    repository.FindSupportTypeByName("EMAIL")
                },
                SupportHours = repository.FindSupportHoursByName("24"),
                SupportDays = repository.FindSupportDaysByName("7"),
                SupportTerritories = new List<SupportTerritory>()
                {
                    repository.FindSupportTerritoryByName("UK"),
                },
                VideoTrainingSupport = false,
                CloudApplicationFeatures = new List<CloudApplicationFeature>()
                {
                    //repository.FindFeatureByName("USE EXISTING HANDSET"),
                    repository.FindFeatureByName("KEEP EXISTING NUMBER"),
                    repository.FindFeatureByName("EMERGENCY CALLS"),
                    //repository.FindFeatureByName("PC REQUIRED"),
                    repository.FindFeatureByName("INCLUSIVE UK LANDLINE CALLS"),
                    repository.FindFeatureByName("INCLUSIVE MOBILE CALLS"),
                    //repository.FindFeatureByName("INCLUSIVE INTERNATIONAL CALLS"),
                    repository.FindFeatureByName("VIRTUAL LANDLINE NUMBER"),
                    repository.FindFeatureByName("LOCAL DIALLING CODE"),
                    //repository.FindFeatureByName("FREEPHONE/LOCAL RATE NUMBER"),
                    //repository.FindFeatureByName("DIAL-BY-NAME DIRECTORY"),
                    //repository.FindFeatureByName("VIDEO CALLING"),
                    repository.FindFeatureByName("AUTO-RECEPTION/CALL HANDLING"),
                    repository.FindFeatureByName("ANSWERING RULES"),
                    //repository.FindFeatureByName("CALL CENTRE/INTERACTIVE VOICE RESPONSE"),
                    repository.FindFeatureByName("MUSIC-ON-HOLD"),
                    repository.FindFeatureByName("VOICEMAIL"),
                    repository.FindFeatureByName("SMS SENDING"),
                    repository.FindFeatureByName("CALL FORWARDING"),
                    repository.FindFeatureByName("FIXED-TO-MOBILE INTEGRATION"),
                    repository.FindFeatureByName("HARDWARE SUPPLIED"),
                },
                ApplicationCostPerMonth = 55.00M,
                CallsPackageCostPerMonth = 0M,
                SetupFee = repository.FindSetupFeeByName("NOT APPLICABLE"),
                MinimumContract = repository.FindMinimumContractByName("24 MONTHS"),
                PaymentFrequency = repository.FindPaymentFrequencyByName("MONTHLY"),
                PaymentOptions = new List<PaymentOption>()
                {
                    repository.FindPaymentOptionByName("DIRECT DEBIT"),
                    //repository.FindPaymentOptionByName("CREDIT CARD"),
                },
                FreeTrialPeriod = repository.FindFreeTrialPeriodByName("NO"),
                Category = repository.FindCategoryByName("VOICE"),
                Vendor = repository.FindVendorByName("Vodafone"),
                Description = repository.GetDescription(),
                AddDate = DateTime.Now,
                #region Ratings,Reviews,Case Studies,White Papers
                Ratings = new List<CloudApplicationRating>()
                {
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                },
                Reviews = new List<CloudApplicationReview>()
                {
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                },
                ThumbnailDocuments = new List<ThumbnailDocument>()
                {
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("WHITE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_WHITE_PAPER_FILEPATH+PDF_TEST_WHITE_PAPER_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_WHITE_PAPER_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_WHITE_PAPER_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_WHITE_PAPER_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("WHITE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_WHITE_PAPER_FILEPATH+PDF_TEST_WHITE_PAPER_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_WHITE_PAPER_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_WHITE_PAPER_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_WHITE_PAPER_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("WHITE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_WHITE_PAPER_FILEPATH+PDF_TEST_WHITE_PAPER_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_WHITE_PAPER_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_WHITE_PAPER_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_WHITE_PAPER_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("CASE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_CASE_STUDY_FILEPATH+PDF_TEST_CASE_STUDY_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_CASE_STUDY_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_CASE_STUDY_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_CASE_STUDY_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("CASE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_CASE_STUDY_FILEPATH+PDF_TEST_CASE_STUDY_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_CASE_STUDY_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_CASE_STUDY_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_CASE_STUDY_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("CASE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_CASE_STUDY_FILEPATH+PDF_TEST_CASE_STUDY_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_CASE_STUDY_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_CASE_STUDY_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_CASE_STUDY_FILENAME,
                    },
                },
                #endregion
            };

            repository.AddCloudApplication(ca);
            #endregion

            #region VOIPTALK
            ca = new CloudApplication()
            {
                Brand = "VoIPtalk",
                ServiceName = "VoIPtalk Unlimited",
                CompanyURL = "www.voiptalk.org",
                OperatingSystems = new List<Domain.Models.OperatingSystem>()
                {
                    repository.FindOperatingSystemByName("WIN"),
                    repository.FindOperatingSystemByName("MAC"),
                },
                //MobilePlatforms = new List<MobilePlatform>()
                //{
                //repository.FindMobilePlatformByName("WIN"),
                //repository.FindMobilePlatformByName("BB"),
                //repository.FindMobilePlatformByName("ANDROID"),
                //repository.FindMobilePlatformByName("IPHONE")
                //},
                Browsers = new List<Browser>()
                {
                    repository.FindBrowserByName("Internet Explorer 6"),
                    repository.FindBrowserByName("Internet Explorer 7"),
                    repository.FindBrowserByName("Internet Explorer 8"),
                    repository.FindBrowserByName("Internet Explorer 9"),
                },
                LicenceTypeMinimum = repository.FindLicenceTypeMinimumByName(1),
                LicenceTypeMaximum = repository.FindLicenceTypeMaximumByName(6),
                Languages = new List<Language>()
                {
                    repository.FindLanguageByName("ENGLISH")
                },
                SupportTypes = new List<SupportType>()
                {
                    repository.FindSupportTypeByName("ONLINE"),
                    //repository.FindSupportTypeByName("TELEPHONE"),
                    //repository.FindSupportTypeByName("EMAIL")
                },
                SupportHours = repository.FindSupportHoursByName("24"),
                SupportDays = repository.FindSupportDaysByName("7"),
                SupportTerritories = new List<SupportTerritory>()
                {
                    repository.FindSupportTerritoryByName("UK"),
                },
                VideoTrainingSupport = false,
                CloudApplicationFeatures = new List<CloudApplicationFeature>()
                {
                    repository.FindFeatureByName("USE EXISTING HANDSET"),
                    repository.FindFeatureByName("KEEP EXISTING NUMBER"),
                    repository.FindFeatureByName("EMERGENCY CALLS"),
                    repository.FindFeatureByName("PC REQUIRED"),
                    repository.FindFeatureByName("INCLUSIVE UK LANDLINE CALLS"),
                    //repository.FindFeatureByName("INCLUSIVE MOBILE CALLS"),
                    repository.FindFeatureByName("INCLUSIVE INTERNATIONAL CALLS"),
                    repository.FindFeatureByName("VIRTUAL LANDLINE NUMBER"),
                    //repository.FindFeatureByName("LOCAL DIALLING CODE"),
                    //repository.FindFeatureByName("FREEPHONE/LOCAL RATE NUMBER"),
                    repository.FindFeatureByName("DIAL-BY-NAME DIRECTORY"),
                    repository.FindFeatureByName("VIDEO CALLING"),
                    //repository.FindFeatureByName("AUTO RECEPTION/CALL HANDLING"),
                    repository.FindFeatureByName("ANSWERING RULES"),
                    //repository.FindFeatureByName("CALL CENTRE/INTERACTIVE VOICE RESPONSE"),
                    //repository.FindFeatureByName("MUSIC-ON-HOLD"),
                    repository.FindFeatureByName("VOICEMAIL"),
                    repository.FindFeatureByName("SMS SENDING"),
                    repository.FindFeatureByName("CALL FORWARDING"),
                    //repository.FindFeatureByName("FIXED-TO-MOBILE INTEGRATION"),
                    //repository.FindFeatureByName("HARDWARE SUPPLIED"),
                },
                ApplicationCostPerMonth = 9.88M,
                CallsPackageCostPerMonth = 0M,
                SetupFee = repository.FindSetupFeeByName("£14.99"),
                MinimumContract = repository.FindMinimumContractByName("12 MONTHS"),
                PaymentFrequency = repository.FindPaymentFrequencyByName("MONTHLY"),
                PaymentOptions = new List<PaymentOption>()
                {
                    repository.FindPaymentOptionByName("DIRECT DEBIT"),
                    //repository.FindPaymentOptionByName("CREDIT CARD"),
                },
                FreeTrialPeriod = repository.FindFreeTrialPeriodByName("NO"),
                Category = repository.FindCategoryByName("VOICE"),
                Vendor = repository.FindVendorByName("VoIPtalk"),
                Description = repository.GetDescription(),
                AddDate = DateTime.Now,
                #region Ratings,Reviews,Case Studies,White Papers
                Ratings = new List<CloudApplicationRating>()
                {
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                },
                Reviews = new List<CloudApplicationReview>()
                {
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                },
                ThumbnailDocuments = new List<ThumbnailDocument>()
                {
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("WHITE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_WHITE_PAPER_FILEPATH+PDF_TEST_WHITE_PAPER_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_WHITE_PAPER_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_WHITE_PAPER_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_WHITE_PAPER_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("WHITE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_WHITE_PAPER_FILEPATH+PDF_TEST_WHITE_PAPER_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_WHITE_PAPER_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_WHITE_PAPER_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_WHITE_PAPER_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("WHITE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_WHITE_PAPER_FILEPATH+PDF_TEST_WHITE_PAPER_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_WHITE_PAPER_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_WHITE_PAPER_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_WHITE_PAPER_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("CASE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_CASE_STUDY_FILEPATH+PDF_TEST_CASE_STUDY_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_CASE_STUDY_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_CASE_STUDY_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_CASE_STUDY_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("CASE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_CASE_STUDY_FILEPATH+PDF_TEST_CASE_STUDY_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_CASE_STUDY_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_CASE_STUDY_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_CASE_STUDY_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("CASE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_CASE_STUDY_FILEPATH+PDF_TEST_CASE_STUDY_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_CASE_STUDY_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_CASE_STUDY_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_CASE_STUDY_FILENAME,
                    },
                },
                #endregion
            };

            repository.AddCloudApplication(ca);
            #endregion

            #region GRADWELL
            ca = new CloudApplication()
            {
                Brand = "Gradwell",
                ServiceName = "Multi-User VoIP",
                CompanyURL = "www.gradwell.com",
                OperatingSystems = new List<Domain.Models.OperatingSystem>()
                {
                    repository.FindOperatingSystemByName("WIN"),
                    repository.FindOperatingSystemByName("MAC"),
                },
                MobilePlatforms = repository.GetAllMobilePlatforms(),
                Browsers = new List<Browser>()
                {
                    repository.FindBrowserByName("Internet Explorer 6"),
                    repository.FindBrowserByName("Internet Explorer 7"),
                    repository.FindBrowserByName("Internet Explorer 8"),
                    repository.FindBrowserByName("Internet Explorer 9"),
                },
                LicenceTypeMinimum = repository.FindLicenceTypeMinimumByName(1),
                LicenceTypeMaximum = repository.FindLicenceTypeMaximumByName(10),
                Languages = new List<Language>()
                {
                    repository.FindLanguageByName("ENGLISH")
                },
                SupportTypes = new List<SupportType>()
                {
                    repository.FindSupportTypeByName("ONLINE"),
                    //repository.FindSupportTypeByName("TELEPHONE"),
                    //repository.FindSupportTypeByName("EMAIL")
                },
                SupportHours = repository.FindSupportHoursByName("9AM-5PM"),
                SupportDays = repository.FindSupportDaysByName("5"),
                SupportTerritories = new List<SupportTerritory>()
                {
                    repository.FindSupportTerritoryByName("UK"),
                },
                VideoTrainingSupport = false,
                CloudApplicationFeatures = new List<CloudApplicationFeature>()
                {
                    repository.FindFeatureByName("USE EXISTING HANDSET"),
                    repository.FindFeatureByName("KEEP EXISTING NUMBER"),
                    repository.FindFeatureByName("EMERGENCY CALLS"),
                    repository.FindFeatureByName("PC REQUIRED"),
                    repository.FindFeatureByName("INCLUSIVE UK LANDLINE CALLS"),
                    repository.FindFeatureByName("INCLUSIVE MOBILE CALLS"),
                    repository.FindFeatureByName("INCLUSIVE INTERNATIONAL CALLS"),
                    repository.FindFeatureByName("VIRTUAL LANDLINE NUMBER"),
                    repository.FindFeatureByName("LOCAL DIALLING CODE"),
                    //repository.FindFeatureByName("FREEPHONE/LOCAL RATE NUMBER"),
                    repository.FindFeatureByName("DIAL-BY-NAME DIRECTORY"),
                    //repository.FindFeatureByName("VIDEO CALLING"),
                    //repository.FindFeatureByName("AUTO RECEPTION/CALL HANDLING"),
                    repository.FindFeatureByName("ANSWERING RULES"),
                    //repository.FindFeatureByName("CALL CENTRE/INTERACTIVE VOICE RESPONSE"),
                    //repository.FindFeatureByName("MUSIC-ON-HOLD"),
                    repository.FindFeatureByName("VOICEMAIL"),
                    //repository.FindFeatureByName("SMS SENDING"),
                    repository.FindFeatureByName("CALL FORWARDING"),
                    //repository.FindFeatureByName("FIXED-TO-MOBILE INTEGRATION"),
                    //repository.FindFeatureByName("HARDWARE SUPPLIED"),
                },
                ApplicationCostPerMonth = 8.00M,
                CallsPackageCostPerMonth = 25.00M,
                SetupFee = repository.FindSetupFeeByName("£4.99"),
                MinimumContract = repository.FindMinimumContractByName("12 MONTHS"),
                PaymentFrequency = repository.FindPaymentFrequencyByName("MONTHLY"),
                PaymentOptions = new List<PaymentOption>()
                {
                    repository.FindPaymentOptionByName("DIRECT DEBIT"),
                    //repository.FindPaymentOptionByName("CREDIT CARD"),
                },
                FreeTrialPeriod = repository.FindFreeTrialPeriodByName("NO"),
                Category = repository.FindCategoryByName("VOICE"),
                Vendor = repository.FindVendorByName("Gradwell"),
                Description = repository.GetDescription(),
                AddDate = DateTime.Now,
                #region Ratings,Reviews,Case Studies,White Papers
                Ratings = new List<CloudApplicationRating>()
                {
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                },
                Reviews = new List<CloudApplicationReview>()
                {
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                },
                ThumbnailDocuments = new List<ThumbnailDocument>()
                {
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("WHITE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_WHITE_PAPER_FILEPATH+PDF_TEST_WHITE_PAPER_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_WHITE_PAPER_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_WHITE_PAPER_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_WHITE_PAPER_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("WHITE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_WHITE_PAPER_FILEPATH+PDF_TEST_WHITE_PAPER_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_WHITE_PAPER_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_WHITE_PAPER_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_WHITE_PAPER_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("WHITE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_WHITE_PAPER_FILEPATH+PDF_TEST_WHITE_PAPER_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_WHITE_PAPER_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_WHITE_PAPER_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_WHITE_PAPER_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("CASE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_CASE_STUDY_FILEPATH+PDF_TEST_CASE_STUDY_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_CASE_STUDY_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_CASE_STUDY_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_CASE_STUDY_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("CASE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_CASE_STUDY_FILEPATH+PDF_TEST_CASE_STUDY_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_CASE_STUDY_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_CASE_STUDY_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_CASE_STUDY_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("CASE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_CASE_STUDY_FILEPATH+PDF_TEST_CASE_STUDY_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_CASE_STUDY_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_CASE_STUDY_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_CASE_STUDY_FILENAME,
                    },
                },
                #endregion
            };

            repository.AddCloudApplication(ca);
            #endregion

            #region RINGCENTRAL
            ca = new CloudApplication()
            {
                Brand = "RingCentral",
                ServiceName = "RC Call Management",
                CompanyURL = "www.ringcentral.co.uk",
                OperatingSystems = new List<Domain.Models.OperatingSystem>()
                {
                    repository.FindOperatingSystemByName("WIN"),
                    //repository.FindOperatingSystemByName("MAC"),
                },
                Browsers = new List<Browser>()
                {
                    repository.FindBrowserByName("Internet Explorer 6"),
                    repository.FindBrowserByName("Internet Explorer 7"),
                    repository.FindBrowserByName("Internet Explorer 8"),
                    repository.FindBrowserByName("Internet Explorer 9"),
                },
                LicenceTypeMinimum = repository.FindLicenceTypeMinimumByName(1),
                LicenceTypeMaximum = repository.FindLicenceTypeMaximumByName(10),
                Languages = new List<Language>()
                {
                    repository.FindLanguageByName("ENGLISH")
                },
                SupportTypes = new List<SupportType>()
                {
                    repository.FindSupportTypeByName("ONLINE"),
                    repository.FindSupportTypeByName("TELEPHONE"),
                    //repository.FindSupportTypeByName("EMAIL")
                },
                SupportHours = repository.FindSupportHoursByName("9AM-5PM"),
                SupportDays = repository.FindSupportDaysByName("5"),
                SupportTerritories = new List<SupportTerritory>()
                {
                    repository.FindSupportTerritoryByName("UK"),
                },
                VideoTrainingSupport = false,
                CloudApplicationFeatures = new List<CloudApplicationFeature>()
                {
                    repository.FindFeatureByName("USE EXISTING HANDSET"),
                    //repository.FindFeatureByName("KEEP EXISTING NUMBER"),
                    repository.FindFeatureByName("EMERGENCY CALLS"),
                    //repository.FindFeatureByName("PC REQUIRED"),
                    repository.FindFeatureByName("INCLUSIVE UK LANDLINE CALLS"),
                    //repository.FindFeatureByName("INCLUSIVE MOBILE CALLS"),
                    //repository.FindFeatureByName("INCLUSIVE INTERNATIONAL CALLS"),
                    repository.FindFeatureByName("VIRTUAL LANDLINE NUMBER"),
                    repository.FindFeatureByName("LOCAL DIALLING CODE"),
                    repository.FindFeatureByName("FREEPHONE/LOCAL RATE NUMBER"),
                    repository.FindFeatureByName("DIAL-BY-NAME DIRECTORY"),
                    //repository.FindFeatureByName("VIDEO CALLING"),
                    repository.FindFeatureByName("AUTO-RECEPTION/CALL HANDLING"),
                    repository.FindFeatureByName("ANSWERING RULES"),
                    repository.FindFeatureByName("CALL CENTRE/INTERACTIVE VOICE RESPONSE"),
                    repository.FindFeatureByName("MUSIC-ON-HOLD"),
                    repository.FindFeatureByName("VOICEMAIL"),
                    repository.FindFeatureByName("SMS SENDING"),
                    repository.FindFeatureByName("CALL FORWARDING"),
                    //repository.FindFeatureByName("FIXED-TO-MOBILE INTEGRATION"),
                    //repository.FindFeatureByName("HARDWARE SUPPLIED"),
                },
                ApplicationCostPerMonth = 7.99M,
                CallsPackageCostPerMonth = 14.99M,
                SetupFee = repository.FindSetupFeeByName("NOT APPLICABLE"),
                MinimumContract = repository.FindMinimumContractByName("1 MONTH"),
                PaymentFrequency = repository.FindPaymentFrequencyByName("MONTHLY"),
                PaymentOptions = new List<PaymentOption>()
                {
                    repository.FindPaymentOptionByName("DIRECT DEBIT"),
                    //repository.FindPaymentOptionByName("CREDIT CARD"),
                },
                FreeTrialPeriod = repository.FindFreeTrialPeriodByName("YES"),
                Category = repository.FindCategoryByName("VOICE"),
                Vendor = repository.FindVendorByName("RingCentral"),
                Description = repository.GetDescription(),
                AddDate = DateTime.Now,
                #region Ratings,Reviews,Case Studies,White Papers
                Ratings = new List<CloudApplicationRating>()
                {
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                },
                Reviews = new List<CloudApplicationReview>()
                {
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                },
                ThumbnailDocuments = new List<ThumbnailDocument>()
                {
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("WHITE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_WHITE_PAPER_FILEPATH+PDF_TEST_WHITE_PAPER_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_WHITE_PAPER_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_WHITE_PAPER_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_WHITE_PAPER_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("WHITE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_WHITE_PAPER_FILEPATH+PDF_TEST_WHITE_PAPER_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_WHITE_PAPER_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_WHITE_PAPER_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_WHITE_PAPER_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("WHITE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_WHITE_PAPER_FILEPATH+PDF_TEST_WHITE_PAPER_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_WHITE_PAPER_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_WHITE_PAPER_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_WHITE_PAPER_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("CASE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_CASE_STUDY_FILEPATH+PDF_TEST_CASE_STUDY_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_CASE_STUDY_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_CASE_STUDY_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_CASE_STUDY_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("CASE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_CASE_STUDY_FILEPATH+PDF_TEST_CASE_STUDY_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_CASE_STUDY_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_CASE_STUDY_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_CASE_STUDY_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("CASE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_CASE_STUDY_FILEPATH+PDF_TEST_CASE_STUDY_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_CASE_STUDY_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_CASE_STUDY_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_CASE_STUDY_FILENAME,
                    },
                },
                #endregion
            };

            repository.AddCloudApplication(ca);
            #endregion

            #region BT
            ca = new CloudApplication()
            {
                Brand = "BT",
                ServiceName = "Hosted VoIP Plus",
                CompanyURL = "www.bt.com",
                OperatingSystems = new List<Domain.Models.OperatingSystem>()
                {
                    repository.FindOperatingSystemByName("WIN"),
                    //repository.FindOperatingSystemByName("MAC"),
                },
                Browsers = new List<Browser>()
                {
                    repository.FindBrowserByName("Internet Explorer 6"),
                    repository.FindBrowserByName("Internet Explorer 7"),
                    repository.FindBrowserByName("Internet Explorer 8"),
                    repository.FindBrowserByName("Internet Explorer 9"),
                    repository.FindBrowserByName("FIREFOX"),
                },
                LicenceTypeMinimum = repository.FindLicenceTypeMinimumByName(1),
                LicenceTypeMaximum = repository.FindLicenceTypeMaximumByName(8),
                Languages = new List<Language>()
                {
                    repository.FindLanguageByName("ENGLISH")
                },
                SupportTypes = new List<SupportType>()
                {
                    //repository.FindSupportTypeByName("ONLINE"),
                    repository.FindSupportTypeByName("TELEPHONE"),
                    repository.FindSupportTypeByName("EMAIL")
                },
                SupportHours = repository.FindSupportHoursByName("24"),
                SupportDays = repository.FindSupportDaysByName("7"),
                SupportTerritories = new List<SupportTerritory>()
                {
                    repository.FindSupportTerritoryByName("UK"),
                },
                VideoTrainingSupport = false,
                CloudApplicationFeatures = new List<CloudApplicationFeature>()
                {
                    //repository.FindFeatureByName("USE EXISTING HANDSET"),
                    repository.FindFeatureByName("KEEP EXISTING NUMBER"),
                    repository.FindFeatureByName("EMERGENCY CALLS"),
                    //repository.FindFeatureByName("PC REQUIRED"),
                    repository.FindFeatureByName("INCLUSIVE UK LANDLINE CALLS"),
                    //repository.FindFeatureByName("INCLUSIVE MOBILE CALLS"),
                    //repository.FindFeatureByName("INCLUSIVE INTERNATIONAL CALLS"),
                    repository.FindFeatureByName("VIRTUAL LANDLINE NUMBER"),
                    repository.FindFeatureByName("LOCAL DIALLING CODE"),
                    repository.FindFeatureByName("FREEPHONE/LOCAL RATE NUMBER"),
                    //repository.FindFeatureByName("DIAL-BY-NAME DIRECTORY"),
                    repository.FindFeatureByName("VIDEO CALLING"),
                    repository.FindFeatureByName("AUTO-RECEPTION/CALL HANDLING"),
                    repository.FindFeatureByName("ANSWERING RULES"),
                    //repository.FindFeatureByName("CALL CENTRE/INTERACTIVE VOICE RESPONSE"),
                    repository.FindFeatureByName("MUSIC-ON-HOLD"),
                    repository.FindFeatureByName("VOICEMAIL"),
                    repository.FindFeatureByName("SMS SENDING"),
                    repository.FindFeatureByName("CALL FORWARDING"),
                    //repository.FindFeatureByName("FIXED-TO-MOBILE INTEGRATION"),
                    repository.FindFeatureByName("HARDWARE SUPPLIED"),
                },
                ApplicationCostPerMonth = 6.50M,
                CallsPackageCostPerMonth = 21.00M,
                SetupFee = repository.FindSetupFeeByName("£130"),
                MinimumContract = repository.FindMinimumContractByName("12 MONTHS"),
                PaymentFrequency = repository.FindPaymentFrequencyByName("MONTHLY"),
                PaymentOptions = new List<PaymentOption>()
                {
                    repository.FindPaymentOptionByName("DIRECT DEBIT"),
                    //repository.FindPaymentOptionByName("CREDIT CARD"),
                },
                FreeTrialPeriod = repository.FindFreeTrialPeriodByName("NO"),
                Category = repository.FindCategoryByName("VOICE"),
                Vendor = repository.FindVendorByName("BT"),
                Description = repository.GetDescription(),
                AddDate = DateTime.Now,
                #region Ratings,Reviews,Case Studies,White Papers
                Ratings = new List<CloudApplicationRating>()
                {
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                },
                Reviews = new List<CloudApplicationReview>()
                {
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                },
                ThumbnailDocuments = new List<ThumbnailDocument>()
                {
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("WHITE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_WHITE_PAPER_FILEPATH+PDF_TEST_WHITE_PAPER_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_WHITE_PAPER_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_WHITE_PAPER_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_WHITE_PAPER_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("WHITE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_WHITE_PAPER_FILEPATH+PDF_TEST_WHITE_PAPER_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_WHITE_PAPER_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_WHITE_PAPER_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_WHITE_PAPER_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("WHITE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_WHITE_PAPER_FILEPATH+PDF_TEST_WHITE_PAPER_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_WHITE_PAPER_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_WHITE_PAPER_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_WHITE_PAPER_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("CASE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_CASE_STUDY_FILEPATH+PDF_TEST_CASE_STUDY_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_CASE_STUDY_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_CASE_STUDY_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_CASE_STUDY_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("CASE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_CASE_STUDY_FILEPATH+PDF_TEST_CASE_STUDY_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_CASE_STUDY_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_CASE_STUDY_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_CASE_STUDY_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("CASE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_CASE_STUDY_FILEPATH+PDF_TEST_CASE_STUDY_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_CASE_STUDY_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_CASE_STUDY_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_CASE_STUDY_FILENAME,
                    },
                },
                #endregion
            };

            repository.AddCloudApplication(ca);
            #endregion

            #region TPAD
            ca = new CloudApplication()
            {
                Brand = "Tpad",
                ServiceName = "4 User",
                CompanyURL = "www.tpad.com",
                OperatingSystems = new List<Domain.Models.OperatingSystem>()
                {
                    repository.FindOperatingSystemByName("WIN"),
                    //repository.FindOperatingSystemByName("MAC"),
                },
                Browsers = new List<Browser>()
                {
                    repository.FindBrowserByName("Internet Explorer 6"),
                    repository.FindBrowserByName("Internet Explorer 7"),
                    repository.FindBrowserByName("Internet Explorer 8"),
                    repository.FindBrowserByName("Internet Explorer 9"),
                    //repository.FindBrowserByName("FIREFOX"),
                },
                LicenceTypeMinimum = repository.FindLicenceTypeMinimumByName(1),
                LicenceTypeMaximum = repository.FindLicenceTypeMaximumByName(20),
                Languages = new List<Language>()
                {
                    repository.FindLanguageByName("ENGLISH")
                },
                SupportTypes = new List<SupportType>()
                {
                    //repository.FindSupportTypeByName("ONLINE"),
                    repository.FindSupportTypeByName("TELEPHONE"),
                    //repository.FindSupportTypeByName("EMAIL")
                },
                SupportHours = repository.FindSupportHoursByName("9AM-5PM"),
                SupportDays = repository.FindSupportDaysByName("7"),
                SupportTerritories = new List<SupportTerritory>()
                {
                    repository.FindSupportTerritoryByName("UK"),
                },
                VideoTrainingSupport = false,
                CloudApplicationFeatures = new List<CloudApplicationFeature>()
                {
                    //repository.FindFeatureByName("USE EXISTING HANDSET"),
                    repository.FindFeatureByName("KEEP EXISTING NUMBER"),
                    repository.FindFeatureByName("EMERGENCY CALLS"),
                    //repository.FindFeatureByName("PC REQUIRED"),
                    //repository.FindFeatureByName("INCLUSIVE UK LANDLINE CALLS"),
                    //repository.FindFeatureByName("INCLUSIVE MOBILE CALLS"),
                    //repository.FindFeatureByName("INCLUSIVE INTERNATIONAL CALLS"),
                    //repository.FindFeatureByName("VIRTUAL LANDLINE NUMBER"),
                    repository.FindFeatureByName("LOCAL DIALLING CODE"),
                    repository.FindFeatureByName("FREEPHONE/LOCAL RATE NUMBER"),
                    repository.FindFeatureByName("DIAL-BY-NAME DIRECTORY"),
                    repository.FindFeatureByName("VIDEO CALLING"),
                    repository.FindFeatureByName("AUTO-RECEPTION/CALL HANDLING"),
                    repository.FindFeatureByName("ANSWERING RULES"),
                    repository.FindFeatureByName("CALL CENTRE/INTERACTIVE VOICE RESPONSE"),
                    repository.FindFeatureByName("MUSIC-ON-HOLD"),
                    repository.FindFeatureByName("VOICEMAIL"),
                    repository.FindFeatureByName("SMS SENDING"),
                    repository.FindFeatureByName("CALL FORWARDING"),
                    //repository.FindFeatureByName("FIXED-TO-MOBILE INTEGRATION"),
                    repository.FindFeatureByName("HARDWARE SUPPLIED"),
                },
                ApplicationCostPerMonth = 9.95M,
                CallsPackageCostPerMonth = 0.00M,
                SetupFee = repository.FindSetupFeeByName("£29"),
                MinimumContract = repository.FindMinimumContractByName("36 MONTHS"),
                PaymentFrequency = repository.FindPaymentFrequencyByName("MONTHLY"),
                PaymentOptions = new List<PaymentOption>()
                {
                    repository.FindPaymentOptionByName("DIRECT DEBIT"),
                    //repository.FindPaymentOptionByName("CREDIT CARD"),
                },
                FreeTrialPeriod = repository.FindFreeTrialPeriodByName("NO"),
                Category = repository.FindCategoryByName("VOICE"),
                Vendor = repository.FindVendorByName("Tpad"),
                Description = repository.GetDescription(),
                AddDate = DateTime.Now,
                #region Ratings,Reviews,Case Studies,White Papers
                Ratings = new List<CloudApplicationRating>()
                {
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                },
                Reviews = new List<CloudApplicationReview>()
                {
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                },
                ThumbnailDocuments = new List<ThumbnailDocument>()
                {
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("WHITE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_WHITE_PAPER_FILEPATH+PDF_TEST_WHITE_PAPER_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_WHITE_PAPER_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_WHITE_PAPER_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_WHITE_PAPER_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("WHITE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_WHITE_PAPER_FILEPATH+PDF_TEST_WHITE_PAPER_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_WHITE_PAPER_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_WHITE_PAPER_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_WHITE_PAPER_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("WHITE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_WHITE_PAPER_FILEPATH+PDF_TEST_WHITE_PAPER_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_WHITE_PAPER_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_WHITE_PAPER_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_WHITE_PAPER_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("CASE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_CASE_STUDY_FILEPATH+PDF_TEST_CASE_STUDY_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_CASE_STUDY_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_CASE_STUDY_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_CASE_STUDY_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("CASE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_CASE_STUDY_FILEPATH+PDF_TEST_CASE_STUDY_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_CASE_STUDY_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_CASE_STUDY_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_CASE_STUDY_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("CASE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_CASE_STUDY_FILEPATH+PDF_TEST_CASE_STUDY_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_CASE_STUDY_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_CASE_STUDY_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_CASE_STUDY_FILENAME,
                    },
                },
                #endregion
            };

            repository.AddCloudApplication(ca);
            #endregion

            #region YOURCHOICE
            ca = new CloudApplication()
            {
                Brand = "yourCHOICE",
                ServiceName = "UK Mobile & Landlines",
                CompanyURL = "www.yourchoicevoip.com",
                OperatingSystems = new List<Domain.Models.OperatingSystem>()
                {
                    repository.FindOperatingSystemByName("WIN"),
                    //repository.FindOperatingSystemByName("MAC"),
                },
                Browsers = new List<Browser>()
                {
                    repository.FindBrowserByName("Internet Explorer 6"),
                    repository.FindBrowserByName("Internet Explorer 7"),
                    repository.FindBrowserByName("Internet Explorer 8"),
                    repository.FindBrowserByName("Internet Explorer 9"),
                    //repository.FindBrowserByName("FIREFOX"),
                },
                LicenceTypeMinimum = repository.FindLicenceTypeMinimumByName(1),
                LicenceTypeMaximum = repository.FindLicenceTypeMaximumByName(9),
                Languages = new List<Language>()
                {
                    repository.FindLanguageByName("ENGLISH")
                },
                SupportTypes = new List<SupportType>()
                {
                    //repository.FindSupportTypeByName("ONLINE"),
                    repository.FindSupportTypeByName("TELEPHONE"),
                    repository.FindSupportTypeByName("EMAIL")
                },
                SupportHours = repository.FindSupportHoursByName("9AM-5PM"),
                SupportDays = repository.FindSupportDaysByName("7"),
                SupportTerritories = new List<SupportTerritory>()
                {
                    repository.FindSupportTerritoryByName("UK"),
                },
                VideoTrainingSupport = true,
                CloudApplicationFeatures = new List<CloudApplicationFeature>()
                {
                    repository.FindFeatureByName("USE EXISTING HANDSET"),
                    //repository.FindFeatureByName("KEEP EXISTING NUMBER"),
                    //repository.FindFeatureByName("EMERGENCY CALLS"),
                    repository.FindFeatureByName("PC REQUIRED"),
                    repository.FindFeatureByName("INCLUSIVE UK LANDLINE CALLS"),
                    repository.FindFeatureByName("INCLUSIVE MOBILE CALLS"),
                    //repository.FindFeatureByName("INCLUSIVE INTERNATIONAL CALLS"),
                    repository.FindFeatureByName("VIRTUAL LANDLINE NUMBER"),
                    //repository.FindFeatureByName("LOCAL DIALLING CODE"),
                    //repository.FindFeatureByName("FREEPHONE/LOCAL RATE NUMBER"),
                    repository.FindFeatureByName("DIAL-BY-NAME DIRECTORY"),
                    //repository.FindFeatureByName("VIDEO CALLING"),
                    //repository.FindFeatureByName("AUTO RECEPTION/CALL HANDLING"),
                    //repository.FindFeatureByName("ANSWERING RULES"),
                    //repository.FindFeatureByName("CALL CENTRE/INTERACTIVE VOICE RESPONSE"),
                    //repository.FindFeatureByName("MUSIC-ON-HOLD"),
                    repository.FindFeatureByName("VOICEMAIL"),
                    repository.FindFeatureByName("SMS SENDING"),
                    repository.FindFeatureByName("CALL FORWARDING"),
                    repository.FindFeatureByName("FIXED-TO-MOBILE INTEGRATION"),
                    //repository.FindFeatureByName("HARDWARE SUPPLIED"),
                },
                ApplicationCostPerMonth = 9.99M,
                CallsPackageCostPerMonth = 0.00M,
                SetupFee = repository.FindSetupFeeByName("NOT APPLICABLE"),
                MinimumContract = repository.FindMinimumContractByName("NONE"),
                PaymentFrequency = repository.FindPaymentFrequencyByName("MONTHLY"),
                PaymentOptions = new List<PaymentOption>()
                {
                    //repository.FindPaymentOptionByName("DIRECT DEBIT"),
                    //repository.FindPaymentOptionByName("CREDIT CARD"),
                    repository.FindPaymentOptionByName("PAYPAL"),
                },
                FreeTrialPeriod = repository.FindFreeTrialPeriodByName("YES"),
                Category = repository.FindCategoryByName("VOICE"),
                Vendor = repository.FindVendorByName("yourCHOICE"),
                Description = repository.GetDescription(),
                AddDate = DateTime.Now,
                #region Ratings,Reviews,Case Studies,White Papers
                Ratings = new List<CloudApplicationRating>()
                {
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                },
                Reviews = new List<CloudApplicationReview>()
                {
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                },
                ThumbnailDocuments = new List<ThumbnailDocument>()
                {
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("WHITE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_WHITE_PAPER_FILEPATH+PDF_TEST_WHITE_PAPER_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_WHITE_PAPER_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_WHITE_PAPER_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_WHITE_PAPER_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("WHITE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_WHITE_PAPER_FILEPATH+PDF_TEST_WHITE_PAPER_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_WHITE_PAPER_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_WHITE_PAPER_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_WHITE_PAPER_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("WHITE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_WHITE_PAPER_FILEPATH+PDF_TEST_WHITE_PAPER_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_WHITE_PAPER_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_WHITE_PAPER_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_WHITE_PAPER_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("CASE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_CASE_STUDY_FILEPATH+PDF_TEST_CASE_STUDY_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_CASE_STUDY_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_CASE_STUDY_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_CASE_STUDY_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("CASE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_CASE_STUDY_FILEPATH+PDF_TEST_CASE_STUDY_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_CASE_STUDY_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_CASE_STUDY_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_CASE_STUDY_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("CASE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_CASE_STUDY_FILEPATH+PDF_TEST_CASE_STUDY_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_CASE_STUDY_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_CASE_STUDY_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_CASE_STUDY_FILENAME,
                    },
                },
                #endregion
            };

            repository.AddCloudApplication(ca);
            #endregion

            #region FREESPEECH.CO.UK
            ca = new CloudApplication()
            {
                Brand = "freespeech.co.uk",
                ServiceName = "Small Unlimited",
                CompanyURL = "www.freespeech.co.uk",
                OperatingSystems = new List<Domain.Models.OperatingSystem>()
                {
                    repository.FindOperatingSystemByName("WIN"),
                    repository.FindOperatingSystemByName("MAC"),
                },
                Browsers = new List<Browser>()
                {
                    repository.FindBrowserByName("Internet Explorer 6"),
                    repository.FindBrowserByName("Internet Explorer 7"),
                    repository.FindBrowserByName("Internet Explorer 8"),
                    repository.FindBrowserByName("Internet Explorer 9"),
                    //repository.FindBrowserByName("FIREFOX"),
                },
                LicenceTypeMinimum = repository.FindLicenceTypeMinimumByName(1),
                LicenceTypeMaximum = repository.FindLicenceTypeMaximumByName(9),
                Languages = new List<Language>()
                {
                    repository.FindLanguageByName("ENGLISH")
                },
                SupportTypes = new List<SupportType>()
                {
                    //repository.FindSupportTypeByName("ONLINE"),
                    //repository.FindSupportTypeByName("TELEPHONE"),
                    //repository.FindSupportTypeByName("EMAIL"),
                    repository.FindSupportTypeByName("FAQ"),
                    repository.FindSupportTypeByName("TROUBLESHOOT")
                },
                //SupportHours = repository.FindSupportHoursByName("9AM-5PM"),
                //SupportDays = repository.FindSupportDaysByName("7"),
                SupportTerritories = new List<SupportTerritory>()
                {
                    repository.FindSupportTerritoryByName("UK"),
                },
                VideoTrainingSupport = false,
                CloudApplicationFeatures = new List<CloudApplicationFeature>()
                {
                    repository.FindFeatureByName("USE EXISTING HANDSET"),
                    //repository.FindFeatureByName("KEEP EXISTING NUMBER"),
                    repository.FindFeatureByName("EMERGENCY CALLS"),
                    //repository.FindFeatureByName("PC REQUIRED"),
                    repository.FindFeatureByName("INCLUSIVE UK LANDLINE CALLS"),
                    repository.FindFeatureByName("INCLUSIVE MOBILE CALLS"),
                    //repository.FindFeatureByName("INCLUSIVE INTERNATIONAL CALLS"),
                    repository.FindFeatureByName("VIRTUAL LANDLINE NUMBER"),
                    repository.FindFeatureByName("LOCAL DIALLING CODE"),
                    //repository.FindFeatureByName("FREEPHONE/LOCAL RATE NUMBER"),
                    //repository.FindFeatureByName("DIAL-BY-NAME DIRECTORY"),
                    //repository.FindFeatureByName("VIDEO CALLING"),
                    //repository.FindFeatureByName("AUTO RECEPTION/CALL HANDLING"),
                    //repository.FindFeatureByName("ANSWERING RULES"),
                    //repository.FindFeatureByName("CALL CENTRE/INTERACTIVE VOICE RESPONSE"),
                    //repository.FindFeatureByName("MUSIC-ON-HOLD"),
                    repository.FindFeatureByName("VOICEMAIL"),
                    repository.FindFeatureByName("SMS SENDING"),
                    repository.FindFeatureByName("CALL FORWARDING"),
                    //repository.FindFeatureByName("FIXED-TO-MOBILE INTEGRATION"),
                    //repository.FindFeatureByName("HARDWARE SUPPLIED"),
                },
                ApplicationCostPerMonth = 15.99M,
                CallsPackageCostPerMonth = 0.00M,
                SetupFee = repository.FindSetupFeeByName("£20"),
                MinimumContract = repository.FindMinimumContractByName("NONE"),
                PaymentFrequency = repository.FindPaymentFrequencyByName("MONTHLY"),
                PaymentOptions = new List<PaymentOption>()
                {
                    repository.FindPaymentOptionByName("DIRECT DEBIT"),
                    //repository.FindPaymentOptionByName("CREDIT CARD"),
                    //repository.FindPaymentOptionByName("PAYPAL"),
                },
                FreeTrialPeriod = repository.FindFreeTrialPeriodByName("YES"),
                Category = repository.FindCategoryByName("VOICE"),
                Vendor = repository.FindVendorByName("freespeech.co.uk"),
                Description = repository.GetDescription(),
                AddDate = DateTime.Now,
                #region Ratings,Reviews,Case Studies,White Papers
                Ratings = new List<CloudApplicationRating>()
                {
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                },
                Reviews = new List<CloudApplicationReview>()
                {
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                },
                ThumbnailDocuments = new List<ThumbnailDocument>()
                {
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("WHITE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_WHITE_PAPER_FILEPATH+PDF_TEST_WHITE_PAPER_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_WHITE_PAPER_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_WHITE_PAPER_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_WHITE_PAPER_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("WHITE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_WHITE_PAPER_FILEPATH+PDF_TEST_WHITE_PAPER_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_WHITE_PAPER_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_WHITE_PAPER_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_WHITE_PAPER_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("WHITE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_WHITE_PAPER_FILEPATH+PDF_TEST_WHITE_PAPER_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_WHITE_PAPER_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_WHITE_PAPER_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_WHITE_PAPER_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("CASE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_CASE_STUDY_FILEPATH+PDF_TEST_CASE_STUDY_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_CASE_STUDY_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_CASE_STUDY_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_CASE_STUDY_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("CASE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_CASE_STUDY_FILEPATH+PDF_TEST_CASE_STUDY_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_CASE_STUDY_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_CASE_STUDY_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_CASE_STUDY_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("CASE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_CASE_STUDY_FILEPATH+PDF_TEST_CASE_STUDY_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_CASE_STUDY_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_CASE_STUDY_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_CASE_STUDY_FILENAME,
                    },
                },
                #endregion
            };

            repository.AddCloudApplication(ca);
            #endregion

            #region MAGICJACK
            ca = new CloudApplication()
            {
                Brand = "magicJack",
                ServiceName = "MagicTalk",
                CompanyURL = "www.magicjack.com",
                OperatingSystems = new List<Domain.Models.OperatingSystem>()
                {
                    repository.FindOperatingSystemByName("WIN"),
                    repository.FindOperatingSystemByName("MAC"),
                },
                Browsers = new List<Browser>()
                {
                    repository.FindBrowserByName("Internet Explorer 6"),
                    repository.FindBrowserByName("Internet Explorer 7"),
                    repository.FindBrowserByName("Internet Explorer 8"),
                    repository.FindBrowserByName("Internet Explorer 9"),
                    repository.FindBrowserByName("FIREFOX"),
                },
                LicenceTypeMinimum = repository.FindLicenceTypeMinimumByName(1),
                LicenceTypeMaximum = repository.FindLicenceTypeMaximumByName(1),
                Languages = new List<Language>()
                {
                    repository.FindLanguageByName("ENGLISH")
                },
                SupportTypes = new List<SupportType>()
                {
                    //repository.FindSupportTypeByName("ONLINE"),
                    //repository.FindSupportTypeByName("TELEPHONE"),
                    repository.FindSupportTypeByName("EMAIL"),
                    repository.FindSupportTypeByName("FAQ"),
                    //repository.FindSupportTypeByName("TROUBLESHOOT")
                },
                //SupportHours = repository.FindSupportHoursByName("9AM-5PM"),
                //SupportDays = repository.FindSupportDaysByName("7"),
                SupportTerritories = new List<SupportTerritory>()
                {
                    repository.FindSupportTerritoryByName("UK"),
                },
                VideoTrainingSupport = false,
                CloudApplicationFeatures = new List<CloudApplicationFeature>()
                {
                    repository.FindFeatureByName("USE EXISTING HANDSET"),
                    //repository.FindFeatureByName("KEEP EXISTING NUMBER"),
                    //repository.FindFeatureByName("EMERGENCY CALLS"),
                    repository.FindFeatureByName("PC REQUIRED"),
                    //repository.FindFeatureByName("INCLUSIVE UK LANDLINE CALLS"),
                    //repository.FindFeatureByName("INCLUSIVE MOBILE CALLS"),
                    //repository.FindFeatureByName("INCLUSIVE INTERNATIONAL CALLS"),
                    //repository.FindFeatureByName("VIRTUAL LANDLINE NUMBER"),
                    //repository.FindFeatureByName("LOCAL DIALLING CODE"),
                    //repository.FindFeatureByName("FREEPHONE/LOCAL RATE NUMBER"),
                    //repository.FindFeatureByName("DIAL-BY-NAME DIRECTORY"),
                    //repository.FindFeatureByName("VIDEO CALLING"),
                    //repository.FindFeatureByName("AUTO RECEPTION/CALL HANDLING"),
                    //repository.FindFeatureByName("ANSWERING RULES"),
                    //repository.FindFeatureByName("CALL CENTRE/INTERACTIVE VOICE RESPONSE"),
                    //repository.FindFeatureByName("MUSIC-ON-HOLD"),
                    //repository.FindFeatureByName("VOICEMAIL"),
                    //repository.FindFeatureByName("SMS SENDING"),
                    //repository.FindFeatureByName("CALL FORWARDING"),
                    //repository.FindFeatureByName("FIXED-TO-MOBILE INTEGRATION"),
                    //repository.FindFeatureByName("HARDWARE SUPPLIED"),
                },
                ApplicationCostPerMonth = 0M,
                CallsPackageCostPerMonth = 0.00M,
                SetupFee = repository.FindSetupFeeByName("NOT APPLICABLE"),
                MinimumContract = repository.FindMinimumContractByName("NOT APPLICABLE"),
                PaymentFrequency = repository.FindPaymentFrequencyByName("NOT APPLICABLE"),
                //PaymentOptions = new List<PaymentOption>()
                //{
                //    repository.FindPaymentOptionByName("DIRECT DEBIT"),
                //    //repository.FindPaymentOptionByName("CREDIT CARD"),
                //    //repository.FindPaymentOptionByName("PAYPAL"),
                //},
                FreeTrialPeriod = repository.FindFreeTrialPeriodByName("YES"),
                Category = repository.FindCategoryByName("VOICE"),
                Vendor = repository.FindVendorByName("magicJack"),
                Description = repository.GetDescription(),
                AddDate = DateTime.Now,
                #region Ratings,Reviews,Case Studies,White Papers
                Ratings = new List<CloudApplicationRating>()
                {
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                },
                Reviews = new List<CloudApplicationReview>()
                {
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                },
                ThumbnailDocuments = new List<ThumbnailDocument>()
                {
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("WHITE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_WHITE_PAPER_FILEPATH+PDF_TEST_WHITE_PAPER_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_WHITE_PAPER_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_WHITE_PAPER_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_WHITE_PAPER_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("WHITE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_WHITE_PAPER_FILEPATH+PDF_TEST_WHITE_PAPER_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_WHITE_PAPER_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_WHITE_PAPER_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_WHITE_PAPER_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("WHITE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_WHITE_PAPER_FILEPATH+PDF_TEST_WHITE_PAPER_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_WHITE_PAPER_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_WHITE_PAPER_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_WHITE_PAPER_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("CASE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_CASE_STUDY_FILEPATH+PDF_TEST_CASE_STUDY_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_CASE_STUDY_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_CASE_STUDY_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_CASE_STUDY_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("CASE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_CASE_STUDY_FILEPATH+PDF_TEST_CASE_STUDY_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_CASE_STUDY_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_CASE_STUDY_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_CASE_STUDY_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("CASE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_CASE_STUDY_FILEPATH+PDF_TEST_CASE_STUDY_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_CASE_STUDY_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_CASE_STUDY_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_CASE_STUDY_FILENAME,
                    },
                },
                #endregion
            };

            repository.AddCloudApplication(ca);
            #endregion

            #region PRESS1.CO.UK
            ca = new CloudApplication()
            {
                Brand = "Press1.co.uk",
                ServiceName = "0870 Switchboard",
                CompanyURL = "www.press1.co.uk",
                OperatingSystems = new List<Domain.Models.OperatingSystem>()
                {
                    repository.FindOperatingSystemByName("WIN"),
                    //repository.FindOperatingSystemByName("MAC"),
                },
                Browsers = new List<Browser>()
                {
                    repository.FindBrowserByName("Internet Explorer 6"),
                    repository.FindBrowserByName("Internet Explorer 7"),
                    repository.FindBrowserByName("Internet Explorer 8"),
                    repository.FindBrowserByName("Internet Explorer 9"),
                    repository.FindBrowserByName("FIREFOX"),
                },
                LicenceTypeMinimum = repository.FindLicenceTypeMinimumByName(1),
                LicenceTypeMaximum = repository.FindLicenceTypeMaximumByName(99),
                Languages = new List<Language>()
                {
                    repository.FindLanguageByName("ENGLISH")
                },
                SupportTypes = new List<SupportType>()
                {
                    //repository.FindSupportTypeByName("ONLINE"),
                    //repository.FindSupportTypeByName("TELEPHONE"),
                    //repository.FindSupportTypeByName("EMAIL"),
                    repository.FindSupportTypeByName("FAQ"),
                    repository.FindSupportTypeByName("TROUBLESHOOT")
                },
                //SupportHours = repository.FindSupportHoursByName("9AM-5PM"),
                //SupportDays = repository.FindSupportDaysByName("7"),
                SupportTerritories = new List<SupportTerritory>()
                {
                    repository.FindSupportTerritoryByName("UK"),
                },
                VideoTrainingSupport = false,
                CloudApplicationFeatures = new List<CloudApplicationFeature>()
                {
                    repository.FindFeatureByName("USE EXISTING HANDSET"),
                    //repository.FindFeatureByName("KEEP EXISTING NUMBER"),
                    repository.FindFeatureByName("EMERGENCY CALLS"),
                    //repository.FindFeatureByName("PC REQUIRED"),
                    //repository.FindFeatureByName("INCLUSIVE UK LANDLINE CALLS"),
                    //repository.FindFeatureByName("INCLUSIVE MOBILE CALLS"),
                    //repository.FindFeatureByName("INCLUSIVE INTERNATIONAL CALLS"),
                    repository.FindFeatureByName("VIRTUAL LANDLINE NUMBER"),
                    //repository.FindFeatureByName("LOCAL DIALLING CODE"),
                    repository.FindFeatureByName("FREEPHONE/LOCAL RATE NUMBER"),
                    //repository.FindFeatureByName("DIAL-BY-NAME DIRECTORY"),
                    //repository.FindFeatureByName("VIDEO CALLING"),
                    repository.FindFeatureByName("AUTO-RECEPTION/CALL HANDLING"),
                    repository.FindFeatureByName("ANSWERING RULES"),
                    //repository.FindFeatureByName("CALL CENTRE/INTERACTIVE VOICE RESPONSE"),
                    //repository.FindFeatureByName("MUSIC-ON-HOLD"),
                    repository.FindFeatureByName("VOICEMAIL"),
                    //repository.FindFeatureByName("SMS SENDING"),
                    repository.FindFeatureByName("CALL FORWARDING"),
                    //repository.FindFeatureByName("FIXED-TO-MOBILE INTEGRATION"),
                    //repository.FindFeatureByName("HARDWARE SUPPLIED"),
                },
                ApplicationCostPerMonth = 14.99M,
                CallsPackageCostPerMonth = 0.00M,
                SetupFee = repository.FindSetupFeeByName("£24.99"),
                MinimumContract = repository.FindMinimumContractByName("12 MONTHS"),
                PaymentFrequency = repository.FindPaymentFrequencyByName("MONTHLY"),
                PaymentOptions = new List<PaymentOption>()
                {
                    repository.FindPaymentOptionByName("DIRECT DEBIT"),
                    //repository.FindPaymentOptionByName("CREDIT CARD"),
                    //repository.FindPaymentOptionByName("PAYPAL"),
                },
                FreeTrialPeriod = repository.FindFreeTrialPeriodByName("YES"),
                Category = repository.FindCategoryByName("VOICE"),
                Vendor = repository.FindVendorByName("Press1.co.uk"),
                Description = repository.GetDescription(),
                AddDate = DateTime.Now,
                #region Ratings,Reviews,Case Studies,White Papers
                Ratings = new List<CloudApplicationRating>()
                {
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                },
                Reviews = new List<CloudApplicationReview>()
                {
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                },
                ThumbnailDocuments = new List<ThumbnailDocument>()
                {
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("WHITE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_WHITE_PAPER_FILEPATH+PDF_TEST_WHITE_PAPER_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_WHITE_PAPER_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_WHITE_PAPER_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_WHITE_PAPER_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("WHITE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_WHITE_PAPER_FILEPATH+PDF_TEST_WHITE_PAPER_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_WHITE_PAPER_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_WHITE_PAPER_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_WHITE_PAPER_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("WHITE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_WHITE_PAPER_FILEPATH+PDF_TEST_WHITE_PAPER_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_WHITE_PAPER_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_WHITE_PAPER_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_WHITE_PAPER_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("CASE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_CASE_STUDY_FILEPATH+PDF_TEST_CASE_STUDY_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_CASE_STUDY_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_CASE_STUDY_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_CASE_STUDY_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("CASE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_CASE_STUDY_FILEPATH+PDF_TEST_CASE_STUDY_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_CASE_STUDY_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_CASE_STUDY_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_CASE_STUDY_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("CASE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_CASE_STUDY_FILEPATH+PDF_TEST_CASE_STUDY_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_CASE_STUDY_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_CASE_STUDY_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_CASE_STUDY_FILENAME,
                    },
                },
                #endregion
            };

            repository.AddCloudApplication(ca);
            #endregion

            #region USOMO
            ca = new CloudApplication()
            {
                Brand = "usomo",
                ServiceName = "Business VoIP",
                CompanyURL = "www.usomo.co.uk",
                OperatingSystems = new List<Domain.Models.OperatingSystem>()
                {
                    repository.FindOperatingSystemByName("WIN"),
                    //repository.FindOperatingSystemByName("MAC"),
                },
                Browsers = new List<Browser>()
                {
                    repository.FindBrowserByName("Internet Explorer 6"),
                    repository.FindBrowserByName("Internet Explorer 7"),
                    repository.FindBrowserByName("Internet Explorer 8"),
                    repository.FindBrowserByName("Internet Explorer 9"),
                    repository.FindBrowserByName("FIREFOX"),
                },
                LicenceTypeMinimum = repository.FindLicenceTypeMinimumByName(1),
                LicenceTypeMaximum = repository.FindLicenceTypeMaximumByName(20),
                Languages = new List<Language>()
                {
                    repository.FindLanguageByName("ENGLISH")
                },
                SupportTypes = new List<SupportType>()
                {
                    //repository.FindSupportTypeByName("ONLINE"),
                    //repository.FindSupportTypeByName("TELEPHONE"),
                    //repository.FindSupportTypeByName("EMAIL"),
                    repository.FindSupportTypeByName("FAQ"),
                    repository.FindSupportTypeByName("TROUBLESHOOT")
                },
                //SupportHours = repository.FindSupportHoursByName("9AM-5PM"),
                //SupportDays = repository.FindSupportDaysByName("7"),
                SupportTerritories = new List<SupportTerritory>()
                {
                    repository.FindSupportTerritoryByName("UK"),
                },
                VideoTrainingSupport = false,
                CloudApplicationFeatures = new List<CloudApplicationFeature>()
                {
                    repository.FindFeatureByName("USE EXISTING HANDSET"),
                    repository.FindFeatureByName("KEEP EXISTING NUMBER"),
                    repository.FindFeatureByName("EMERGENCY CALLS"),
                    //repository.FindFeatureByName("PC REQUIRED"),
                    //repository.FindFeatureByName("INCLUSIVE UK LANDLINE CALLS"),
                    //repository.FindFeatureByName("INCLUSIVE MOBILE CALLS"),
                    //repository.FindFeatureByName("INCLUSIVE INTERNATIONAL CALLS"),
                    repository.FindFeatureByName("VIRTUAL LANDLINE NUMBER"),
                    repository.FindFeatureByName("LOCAL DIALLING CODE"),
                    repository.FindFeatureByName("FREEPHONE/LOCAL RATE NUMBER"),
                    //repository.FindFeatureByName("DIAL-BY-NAME DIRECTORY"),
                    //repository.FindFeatureByName("VIDEO CALLING"),
                    repository.FindFeatureByName("AUTO-RECEPTION/CALL HANDLING"),
                    repository.FindFeatureByName("ANSWERING RULES"),
                    //repository.FindFeatureByName("CALL CENTRE/INTERACTIVE VOICE RESPONSE"),
                    //repository.FindFeatureByName("MUSIC-ON-HOLD"),
                    repository.FindFeatureByName("VOICEMAIL"),
                    //repository.FindFeatureByName("SMS SENDING"),
                    repository.FindFeatureByName("CALL FORWARDING"),
                    //repository.FindFeatureByName("FIXED-TO-MOBILE INTEGRATION"),
                    //repository.FindFeatureByName("HARDWARE SUPPLIED"),
                },
                ApplicationCostPerMonth = 1.49M,
                CallsPackageCostPerMonth = 0.00M,
                SetupFee = repository.FindSetupFeeByName("NOT APPLICABLE"),
                MinimumContract = repository.FindMinimumContractByName("12 MONTHS"),
                PaymentFrequency = repository.FindPaymentFrequencyByName("MONTHLY"),
                PaymentOptions = new List<PaymentOption>()
                {
                    repository.FindPaymentOptionByName("DIRECT DEBIT"),
                    //repository.FindPaymentOptionByName("CREDIT CARD"),
                    //repository.FindPaymentOptionByName("PAYPAL"),
                },
                FreeTrialPeriod = repository.FindFreeTrialPeriodByName("NO"),
                Category = repository.FindCategoryByName("VOICE"),
                Vendor = repository.FindVendorByName("usomo"),
                Description = repository.GetDescription(),
                AddDate = DateTime.Now,
                #region Ratings,Reviews,Case Studies,White Papers
                Ratings = new List<CloudApplicationRating>()
                {
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                },
                Reviews = new List<CloudApplicationReview>()
                {
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                },
                ThumbnailDocuments = new List<ThumbnailDocument>()
                {
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("WHITE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_WHITE_PAPER_FILEPATH+PDF_TEST_WHITE_PAPER_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_WHITE_PAPER_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_WHITE_PAPER_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_WHITE_PAPER_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("WHITE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_WHITE_PAPER_FILEPATH+PDF_TEST_WHITE_PAPER_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_WHITE_PAPER_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_WHITE_PAPER_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_WHITE_PAPER_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("WHITE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_WHITE_PAPER_FILEPATH+PDF_TEST_WHITE_PAPER_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_WHITE_PAPER_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_WHITE_PAPER_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_WHITE_PAPER_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("CASE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_CASE_STUDY_FILEPATH+PDF_TEST_CASE_STUDY_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_CASE_STUDY_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_CASE_STUDY_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_CASE_STUDY_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("CASE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_CASE_STUDY_FILEPATH+PDF_TEST_CASE_STUDY_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_CASE_STUDY_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_CASE_STUDY_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_CASE_STUDY_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("CASE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_CASE_STUDY_FILEPATH+PDF_TEST_CASE_STUDY_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_CASE_STUDY_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_CASE_STUDY_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_CASE_STUDY_FILENAME,
                    },
                },
                #endregion
            };

            repository.AddCloudApplication(ca);
            #endregion

            #region COLT
            ca = new CloudApplication()
            {
                Brand = "colt",
                ServiceName = "Business VoIP",
                CompanyURL = "www.colt.net",
                OperatingSystems = new List<Domain.Models.OperatingSystem>()
                {
                    repository.FindOperatingSystemByName("WIN"),
                    //repository.FindOperatingSystemByName("MAC"),
                },
                Browsers = new List<Browser>()
                {
                    repository.FindBrowserByName("Internet Explorer 6"),
                    repository.FindBrowserByName("Internet Explorer 7"),
                    repository.FindBrowserByName("Internet Explorer 8"),
                    repository.FindBrowserByName("Internet Explorer 9"),
                    repository.FindBrowserByName("FIREFOX"),
                },
                LicenceTypeMinimum = repository.FindLicenceTypeMinimumByName(1),
                LicenceTypeMaximum = repository.FindLicenceTypeMaximumByName(99),
                Languages = new List<Language>()
                {
                    repository.FindLanguageByName("ENGLISH")
                },
                SupportTypes = new List<SupportType>()
                {
                    repository.FindSupportTypeByName("ONLINE"),
                    repository.FindSupportTypeByName("TELEPHONE"),
                    //repository.FindSupportTypeByName("EMAIL"),
                    //repository.FindSupportTypeByName("FAQ"),
                    //repository.FindSupportTypeByName("TROUBLESHOOT")
                },
                SupportHours = repository.FindSupportHoursByName("9AM-5PM"),
                SupportDays = repository.FindSupportDaysByName("5"),
                SupportTerritories = new List<SupportTerritory>()
                {
                    repository.FindSupportTerritoryByName("UK"),
                },
                VideoTrainingSupport = false,
                CloudApplicationFeatures = new List<CloudApplicationFeature>()
                {
                    repository.FindFeatureByName("USE EXISTING HANDSET"),
                    repository.FindFeatureByName("KEEP EXISTING NUMBER"),
                    repository.FindFeatureByName("EMERGENCY CALLS"),
                    //repository.FindFeatureByName("PC REQUIRED"),
                    repository.FindFeatureByName("INCLUSIVE UK LANDLINE CALLS"),
                    //repository.FindFeatureByName("INCLUSIVE MOBILE CALLS"),
                    repository.FindFeatureByName("INCLUSIVE INTERNATIONAL CALLS"),
                    repository.FindFeatureByName("VIRTUAL LANDLINE NUMBER"),
                    repository.FindFeatureByName("LOCAL DIALLING CODE"),
                    //repository.FindFeatureByName("FREEPHONE/LOCAL RATE NUMBER"),
                    //repository.FindFeatureByName("DIAL-BY-NAME DIRECTORY"),
                    //repository.FindFeatureByName("VIDEO CALLING"),
                    //repository.FindFeatureByName("AUTO RECEPTION/CALL HANDLING"),
                    repository.FindFeatureByName("ANSWERING RULES"),
                    //repository.FindFeatureByName("CALL CENTRE/INTERACTIVE VOICE RESPONSE"),
                    //repository.FindFeatureByName("MUSIC-ON-HOLD"),
                    repository.FindFeatureByName("VOICEMAIL"),
                    //repository.FindFeatureByName("SMS SENDING"),
                    repository.FindFeatureByName("CALL FORWARDING"),
                    //repository.FindFeatureByName("FIXED-TO-MOBILE INTEGRATION"),
                    repository.FindFeatureByName("HARDWARE SUPPLIED"),
                },
                ApplicationCostPerMonth = 5.99M,
                CallsPackageCostPerMonth = 0.00M,
                SetupFee = repository.FindSetupFeeByName("NOT APPLICABLE"),
                MinimumContract = repository.FindMinimumContractByName("12 MONTHS"),
                PaymentFrequency = repository.FindPaymentFrequencyByName("MONTHLY"),
                PaymentOptions = new List<PaymentOption>()
                {
                    repository.FindPaymentOptionByName("DIRECT DEBIT"),
                    //repository.FindPaymentOptionByName("CREDIT CARD"),
                    //repository.FindPaymentOptionByName("PAYPAL"),
                },
                FreeTrialPeriod = repository.FindFreeTrialPeriodByName("NO"),
                Category = repository.FindCategoryByName("VOICE"),
                Vendor = repository.FindVendorByName("colt"),
                Description = repository.GetDescription(),
                AddDate = DateTime.Now,
                #region Ratings,Reviews,Case Studies,White Papers
                Ratings = new List<CloudApplicationRating>()
                {
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                },
                Reviews = new List<CloudApplicationReview>()
                {
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                },
                ThumbnailDocuments = new List<ThumbnailDocument>()
                {
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("WHITE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_WHITE_PAPER_FILEPATH+PDF_TEST_WHITE_PAPER_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_WHITE_PAPER_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_WHITE_PAPER_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_WHITE_PAPER_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("WHITE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_WHITE_PAPER_FILEPATH+PDF_TEST_WHITE_PAPER_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_WHITE_PAPER_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_WHITE_PAPER_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_WHITE_PAPER_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("WHITE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_WHITE_PAPER_FILEPATH+PDF_TEST_WHITE_PAPER_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_WHITE_PAPER_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_WHITE_PAPER_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_WHITE_PAPER_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("CASE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_CASE_STUDY_FILEPATH+PDF_TEST_CASE_STUDY_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_CASE_STUDY_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_CASE_STUDY_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_CASE_STUDY_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("CASE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_CASE_STUDY_FILEPATH+PDF_TEST_CASE_STUDY_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_CASE_STUDY_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_CASE_STUDY_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_CASE_STUDY_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("CASE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_CASE_STUDY_FILEPATH+PDF_TEST_CASE_STUDY_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_CASE_STUDY_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_CASE_STUDY_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_CASE_STUDY_FILENAME,
                    },
                },
                #endregion
            };

            repository.AddCloudApplication(ca);
            #endregion

            #region SUREVOIP
            ca = new CloudApplication()
            {
                Brand = "sureVoIP",
                ServiceName = "SureVoIP Hosted",
                CompanyURL = "www.sureVoIP.co.uk",
                OperatingSystems = new List<Domain.Models.OperatingSystem>()
                {
                    repository.FindOperatingSystemByName("WIN"),
                    repository.FindOperatingSystemByName("MAC"),
                },
                Browsers = new List<Browser>()
                {
                    repository.FindBrowserByName("Internet Explorer 6"),
                    repository.FindBrowserByName("Internet Explorer 7"),
                    repository.FindBrowserByName("Internet Explorer 8"),
                    repository.FindBrowserByName("Internet Explorer 9"),
                    repository.FindBrowserByName("FIREFOX"),
                },
                LicenceTypeMinimum = repository.FindLicenceTypeMinimumByName(1),
                LicenceTypeMaximum = repository.FindLicenceTypeMaximumByName(99),
                Languages = new List<Language>()
                {
                    repository.FindLanguageByName("ENGLISH")
                },
                SupportTypes = new List<SupportType>()
                {
                    repository.FindSupportTypeByName("ONLINE"),
                    repository.FindSupportTypeByName("TELEPHONE"),
                    //repository.FindSupportTypeByName("EMAIL"),
                    //repository.FindSupportTypeByName("FAQ"),
                    //repository.FindSupportTypeByName("TROUBLESHOOT")
                },
                SupportHours = repository.FindSupportHoursByName("9AM-5PM"),
                SupportDays = repository.FindSupportDaysByName("5"),
                SupportTerritories = new List<SupportTerritory>()
                {
                    repository.FindSupportTerritoryByName("UK"),
                },
                VideoTrainingSupport = false,
                CloudApplicationFeatures = new List<CloudApplicationFeature>()
                {
                    //repository.FindFeatureByName("USE EXISTING HANDSET"),
                    repository.FindFeatureByName("KEEP EXISTING NUMBER"),
                    repository.FindFeatureByName("EMERGENCY CALLS"),
                    //repository.FindFeatureByName("PC REQUIRED"),
                    repository.FindFeatureByName("INCLUSIVE UK LANDLINE CALLS"),
                    //repository.FindFeatureByName("INCLUSIVE MOBILE CALLS"),
                    //repository.FindFeatureByName("INCLUSIVE INTERNATIONAL CALLS"),
                    repository.FindFeatureByName("VIRTUAL LANDLINE NUMBER"),
                    repository.FindFeatureByName("LOCAL DIALLING CODE"),
                    repository.FindFeatureByName("FREEPHONE/LOCAL RATE NUMBER"),
                    //repository.FindFeatureByName("DIAL-BY-NAME DIRECTORY"),
                    repository.FindFeatureByName("VIDEO CALLING"),
                    repository.FindFeatureByName("AUTO-RECEPTION/CALL HANDLING"),
                    repository.FindFeatureByName("ANSWERING RULES"),
                    //repository.FindFeatureByName("CALL CENTRE/INTERACTIVE VOICE RESPONSE"),
                    repository.FindFeatureByName("MUSIC-ON-HOLD"),
                    repository.FindFeatureByName("VOICEMAIL"),
                    repository.FindFeatureByName("SMS SENDING"),
                    repository.FindFeatureByName("CALL FORWARDING"),
                    //repository.FindFeatureByName("FIXED-TO-MOBILE INTEGRATION"),
                    repository.FindFeatureByName("HARDWARE SUPPLIED"),
                },
                ApplicationCostPerMonth = 10.00M,
                CallsPackageCostPerMonth = 0.00M,
                SetupFee = repository.FindSetupFeeByName("NOT APPLICABLE"),
                MinimumContract = repository.FindMinimumContractByName("12 MONTHS"),
                PaymentFrequency = repository.FindPaymentFrequencyByName("MONTHLY"),
                PaymentOptions = new List<PaymentOption>()
                {
                    repository.FindPaymentOptionByName("DIRECT DEBIT"),
                    //repository.FindPaymentOptionByName("CREDIT CARD"),
                    //repository.FindPaymentOptionByName("PAYPAL"),
                },
                FreeTrialPeriod = repository.FindFreeTrialPeriodByName("NO"),
                Category = repository.FindCategoryByName("VOICE"),
                Vendor = repository.FindVendorByName("sureVoIP"),
                Description = repository.GetDescription(),
                AddDate = DateTime.Now,
                #region Ratings,Reviews,Case Studies,White Papers
                Ratings = new List<CloudApplicationRating>()
                {
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                },
                Reviews = new List<CloudApplicationReview>()
                {
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                },
                ThumbnailDocuments = new List<ThumbnailDocument>()
                {
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("WHITE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_WHITE_PAPER_FILEPATH+PDF_TEST_WHITE_PAPER_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_WHITE_PAPER_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_WHITE_PAPER_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_WHITE_PAPER_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("WHITE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_WHITE_PAPER_FILEPATH+PDF_TEST_WHITE_PAPER_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_WHITE_PAPER_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_WHITE_PAPER_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_WHITE_PAPER_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("WHITE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_WHITE_PAPER_FILEPATH+PDF_TEST_WHITE_PAPER_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_WHITE_PAPER_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_WHITE_PAPER_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_WHITE_PAPER_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("CASE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_CASE_STUDY_FILEPATH+PDF_TEST_CASE_STUDY_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_CASE_STUDY_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_CASE_STUDY_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_CASE_STUDY_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("CASE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_CASE_STUDY_FILEPATH+PDF_TEST_CASE_STUDY_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_CASE_STUDY_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_CASE_STUDY_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_CASE_STUDY_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("CASE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_CASE_STUDY_FILEPATH+PDF_TEST_CASE_STUDY_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_CASE_STUDY_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_CASE_STUDY_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_CASE_STUDY_FILENAME,
                    },
                },
                #endregion
            };

            repository.AddCloudApplication(ca);
            #endregion

            #region NTA:LTD
            ca = new CloudApplication()
            {
                Brand = "NTA:LTD",
                ServiceName = "Business VoIP",
                CompanyURL = "www.ntaltd.co.uk",
                OperatingSystems = new List<Domain.Models.OperatingSystem>()
                {
                    repository.FindOperatingSystemByName("WIN"),
                    repository.FindOperatingSystemByName("MAC"),
                },
                Browsers = new List<Browser>()
                {
                    repository.FindBrowserByName("Internet Explorer 6"),
                    repository.FindBrowserByName("Internet Explorer 7"),
                    repository.FindBrowserByName("Internet Explorer 8"),
                    repository.FindBrowserByName("Internet Explorer 9"),
                    repository.FindBrowserByName("FIREFOX"),
                },
                LicenceTypeMinimum = repository.FindLicenceTypeMinimumByName(1),
                LicenceTypeMaximum = repository.FindLicenceTypeMaximumByName(99),
                Languages = new List<Language>()
                {
                    repository.FindLanguageByName("ENGLISH")
                },
                SupportTypes = new List<SupportType>()
                {
                    repository.FindSupportTypeByName("ONLINE"),
                    repository.FindSupportTypeByName("TELEPHONE"),
                    //repository.FindSupportTypeByName("EMAIL"),
                    //repository.FindSupportTypeByName("FAQ"),
                    //repository.FindSupportTypeByName("TROUBLESHOOT")
                },
                SupportHours = repository.FindSupportHoursByName("9AM-5PM"),
                SupportDays = repository.FindSupportDaysByName("7"),
                SupportTerritories = new List<SupportTerritory>()
                {
                    repository.FindSupportTerritoryByName("UK"),
                },
                VideoTrainingSupport = false,
                CloudApplicationFeatures = new List<CloudApplicationFeature>()
                {
                    //repository.FindFeatureByName("USE EXISTING HANDSET"),
                    repository.FindFeatureByName("KEEP EXISTING NUMBER"),
                    repository.FindFeatureByName("EMERGENCY CALLS"),
                    repository.FindFeatureByName("PC REQUIRED"),
                    repository.FindFeatureByName("INCLUSIVE UK LANDLINE CALLS"),
                    //repository.FindFeatureByName("INCLUSIVE MOBILE CALLS"),
                    repository.FindFeatureByName("INCLUSIVE INTERNATIONAL CALLS"),
                    repository.FindFeatureByName("VIRTUAL LANDLINE NUMBER"),
                    repository.FindFeatureByName("LOCAL DIALLING CODE"),
                    repository.FindFeatureByName("FREEPHONE/LOCAL RATE NUMBER"),
                    repository.FindFeatureByName("DIAL-BY-NAME DIRECTORY"),
                    repository.FindFeatureByName("VIDEO CALLING"),
                    repository.FindFeatureByName("AUTO-RECEPTION/CALL HANDLING"),
                    repository.FindFeatureByName("ANSWERING RULES"),
                    repository.FindFeatureByName("CALL CENTRE/INTERACTIVE VOICE RESPONSE"),
                    repository.FindFeatureByName("MUSIC-ON-HOLD"),
                    repository.FindFeatureByName("VOICEMAIL"),
                    repository.FindFeatureByName("SMS SENDING"),
                    repository.FindFeatureByName("CALL FORWARDING"),
                    repository.FindFeatureByName("FIXED-TO-MOBILE INTEGRATION"),
                    //repository.FindFeatureByName("HARDWARE SUPPLIED"),
                },
                ApplicationCostPerMonth = 7.99M,
                CallsPackageCostPerMonth = 0.00M,
                SetupFee = repository.FindSetupFeeByName("NOT APPLICABLE"),
                MinimumContract = repository.FindMinimumContractByName("12 MONTHS"),
                PaymentFrequency = repository.FindPaymentFrequencyByName("MONTHLY"),
                PaymentOptions = new List<PaymentOption>()
                {
                    repository.FindPaymentOptionByName("DIRECT DEBIT"),
                    //repository.FindPaymentOptionByName("CREDIT CARD"),
                    //repository.FindPaymentOptionByName("PAYPAL"),
                },
                FreeTrialPeriod = repository.FindFreeTrialPeriodByName("NO"),
                Category = repository.FindCategoryByName("VOICE"),
                Vendor = repository.FindVendorByName("NTA:LTD"),
                Description = repository.GetDescription(),
                AddDate = DateTime.Now,
                #region Ratings,Reviews,Case Studies,White Papers
                Ratings = new List<CloudApplicationRating>()
                {
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                },
                Reviews = new List<CloudApplicationReview>()
                {
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                },
                ThumbnailDocuments = new List<ThumbnailDocument>()
                {
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("WHITE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_WHITE_PAPER_FILEPATH+PDF_TEST_WHITE_PAPER_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_WHITE_PAPER_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_WHITE_PAPER_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_WHITE_PAPER_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("WHITE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_WHITE_PAPER_FILEPATH+PDF_TEST_WHITE_PAPER_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_WHITE_PAPER_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_WHITE_PAPER_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_WHITE_PAPER_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("WHITE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_WHITE_PAPER_FILEPATH+PDF_TEST_WHITE_PAPER_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_WHITE_PAPER_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_WHITE_PAPER_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_WHITE_PAPER_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("CASE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_CASE_STUDY_FILEPATH+PDF_TEST_CASE_STUDY_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_CASE_STUDY_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_CASE_STUDY_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_CASE_STUDY_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("CASE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_CASE_STUDY_FILEPATH+PDF_TEST_CASE_STUDY_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_CASE_STUDY_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_CASE_STUDY_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_CASE_STUDY_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("CASE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_CASE_STUDY_FILEPATH+PDF_TEST_CASE_STUDY_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_CASE_STUDY_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_CASE_STUDY_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_CASE_STUDY_FILENAME,
                    },
                },
                #endregion
            };

            repository.AddCloudApplication(ca);
            #endregion

            #region SIPGATE
            ca = new CloudApplication()
            {
                Brand = "sipgate",
                ServiceName = "Sipgate Team 3",
                CompanyURL = "www.live.sipgate.co.uk",
                OperatingSystems = new List<Domain.Models.OperatingSystem>()
                {
                    repository.FindOperatingSystemByName("WIN"),
                    repository.FindOperatingSystemByName("MAC"),
                },
                Browsers = new List<Browser>()
                {
                    repository.FindBrowserByName("Internet Explorer 6"),
                    repository.FindBrowserByName("Internet Explorer 7"),
                    repository.FindBrowserByName("Internet Explorer 8"),
                    repository.FindBrowserByName("Internet Explorer 9"),
                    repository.FindBrowserByName("FIREFOX"),
                },
                LicenceTypeMinimum = repository.FindLicenceTypeMinimumByName(1),
                LicenceTypeMaximum = repository.FindLicenceTypeMaximumByName(3),
                Languages = new List<Language>()
                {
                    repository.FindLanguageByName("ENGLISH")
                },
                SupportTypes = new List<SupportType>()
                {
                    repository.FindSupportTypeByName("ONLINE"),
                    repository.FindSupportTypeByName("TELEPHONE"),
                    //repository.FindSupportTypeByName("EMAIL"),
                    //repository.FindSupportTypeByName("FAQ"),
                    //repository.FindSupportTypeByName("TROUBLESHOOT")
                },
                SupportHours = repository.FindSupportHoursByName("9AM-5PM"),
                SupportDays = repository.FindSupportDaysByName("7"),
                SupportTerritories = new List<SupportTerritory>()
                {
                    repository.FindSupportTerritoryByName("UK"),
                },
                VideoTrainingSupport = false,
                CloudApplicationFeatures = new List<CloudApplicationFeature>()
                {
                    //repository.FindFeatureByName("USE EXISTING HANDSET"),
                    repository.FindFeatureByName("KEEP EXISTING NUMBER"),
                    repository.FindFeatureByName("EMERGENCY CALLS"),
                    //repository.FindFeatureByName("PC REQUIRED"),
                    repository.FindFeatureByName("INCLUSIVE UK LANDLINE CALLS"),
                    //repository.FindFeatureByName("INCLUSIVE MOBILE CALLS"),
                    //repository.FindFeatureByName("INCLUSIVE INTERNATIONAL CALLS"),
                    repository.FindFeatureByName("VIRTUAL LANDLINE NUMBER"),
                    repository.FindFeatureByName("LOCAL DIALLING CODE"),
                    repository.FindFeatureByName("FREEPHONE/LOCAL RATE NUMBER"),
                    //repository.FindFeatureByName("DIAL-BY-NAME DIRECTORY"),
                    repository.FindFeatureByName("VIDEO CALLING"),
                    repository.FindFeatureByName("AUTO-RECEPTION/CALL HANDLING"),
                    repository.FindFeatureByName("ANSWERING RULES"),
                    //repository.FindFeatureByName("CALL CENTRE/INTERACTIVE VOICE RESPONSE"),
                    repository.FindFeatureByName("MUSIC-ON-HOLD"),
                    repository.FindFeatureByName("VOICEMAIL"),
                    repository.FindFeatureByName("SMS SENDING"),
                    repository.FindFeatureByName("CALL FORWARDING"),
                    //repository.FindFeatureByName("FIXED-TO-MOBILE INTEGRATION"),
                    repository.FindFeatureByName("HARDWARE SUPPLIED"),
                },
                ApplicationCostPerMonth = 14.95M,
                CallsPackageCostPerMonth = 0.00M,
                SetupFee = repository.FindSetupFeeByName("NOT APPLICABLE"),
                MinimumContract = repository.FindMinimumContractByName("12 MONTHS"),
                PaymentFrequency = repository.FindPaymentFrequencyByName("MONTHLY"),
                PaymentOptions = new List<PaymentOption>()
                {
                    repository.FindPaymentOptionByName("DIRECT DEBIT"),
                    //repository.FindPaymentOptionByName("CREDIT CARD"),
                    //repository.FindPaymentOptionByName("PAYPAL"),
                },
                FreeTrialPeriod = repository.FindFreeTrialPeriodByName("NO"),
                Category = repository.FindCategoryByName("VOICE"),
                Vendor = repository.FindVendorByName("sipgate"),
                Description = repository.GetDescription(),
                AddDate = DateTime.Now,
                #region Ratings,Reviews,Case Studies,White Papers
                Ratings = new List<CloudApplicationRating>()
                {
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                },
                Reviews = new List<CloudApplicationReview>()
                {
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                },
                ThumbnailDocuments = new List<ThumbnailDocument>()
                {
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("WHITE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_WHITE_PAPER_FILEPATH+PDF_TEST_WHITE_PAPER_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_WHITE_PAPER_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_WHITE_PAPER_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_WHITE_PAPER_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("WHITE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_WHITE_PAPER_FILEPATH+PDF_TEST_WHITE_PAPER_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_WHITE_PAPER_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_WHITE_PAPER_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_WHITE_PAPER_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("WHITE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_WHITE_PAPER_FILEPATH+PDF_TEST_WHITE_PAPER_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_WHITE_PAPER_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_WHITE_PAPER_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_WHITE_PAPER_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("CASE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_CASE_STUDY_FILEPATH+PDF_TEST_CASE_STUDY_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_CASE_STUDY_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_CASE_STUDY_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_CASE_STUDY_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("CASE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_CASE_STUDY_FILEPATH+PDF_TEST_CASE_STUDY_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_CASE_STUDY_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_CASE_STUDY_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_CASE_STUDY_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("CASE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_CASE_STUDY_FILEPATH+PDF_TEST_CASE_STUDY_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_CASE_STUDY_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_CASE_STUDY_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_CASE_STUDY_FILENAME,
                    },
                },
                #endregion
            };

            repository.AddCloudApplication(ca);
            #endregion

            #endregion

            #region CUSTOMER MANAGEMENT

            #region SALESFORCE
            ca = new CloudApplication()
            {
                Brand = "Salesforce",
                ServiceName = "Group Edition",
                CompanyURL = "www.salesforce.com/uk",
                OperatingSystems = new List<Domain.Models.OperatingSystem>()
                {
                    repository.FindOperatingSystemByName("WIN"),
                    repository.FindOperatingSystemByName("MAC"),
                    repository.FindOperatingSystemByName("LINUX")
                },
                //MobilePlatforms = repository.GetAllMobilePlatforms(),
                Browsers = new List<Browser>()
                {
                    repository.FindBrowserByName("Internet Explorer 6"),
                    repository.FindBrowserByName("Internet Explorer 7"),
                    repository.FindBrowserByName("Internet Explorer 8"),
                    repository.FindBrowserByName("Internet Explorer 9"),
                    repository.FindBrowserByName("FIREFOX"),
                },
                LicenceTypeMinimum = repository.FindLicenceTypeMinimumByName(1),
                LicenceTypeMaximum = repository.FindLicenceTypeMaximumByName(5),
                Languages = new List<Language>()
                {
                    repository.FindLanguageByName("ENGLISH")
                },
                SupportTypes = new List<SupportType>()
                {
                    repository.FindSupportTypeByName("ONLINE"),
                    repository.FindSupportTypeByName("TELEPHONE")
                },
                SupportHours = repository.FindSupportHoursByName("12 HOURS (BUSINESS)"),
                SupportDays = repository.FindSupportDaysByName("5"),
                SupportTerritories = new List<SupportTerritory>()
                {
                    repository.FindSupportTerritoryByName("GLOBAL"),
                },
                VideoTrainingSupport = true,
                CloudApplicationFeatures = new List<CloudApplicationFeature>()
                {
                    //repository.FindFeatureByName("UNLIMITED CONTACTS"),
                    //repository.FindFeatureByName("UNLIMITED STORAGE"),
                    repository.FindFeatureByName("SALES OPPORTUNITY MANAGEMENT"),
                    //repository.FindFeatureByName("SALES FORECASTING"),
                    repository.FindFeatureByName("WEB TO LEAD FORM"),
                    repository.FindFeatureByName("EMAIL MARKETING"),
                    //repository.FindFeatureByName("CAMPAIGN TRACKING AND MANAGEMENT"),
                    repository.FindFeatureByName("EMAIL INTEGRATION"),
                    //repository.FindFeatureByName("CUSTOMER HELPDESK"),
                    //repository.FindFeatureByName("CASE QUEUEING & TRACKING"),
                    //repository.FindFeatureByName("UNLIMITED CASES"),
                    repository.FindFeatureByName("DOCUMENT MANAGEMENT"),
                    //repository.FindFeatureByName("CUSTOM REPORTS"),
                    repository.FindFeatureByName("FULL SSL SECURITY"),
                    //repository.FindFeatureByName("MOBILE INTEGRATION"),
                    //repository.FindFeatureByName("INVOICE CREATION & MANAGEMENT"),
                    //repository.FindFeatureByName("INVENTORY & ORDER MANAGEMENT"),
                    //repository.FindFeatureByName("OPEN API/3RD PARTY INTEGRATION"),
                    //repository.FindFeatureByName("SOCIAL MEDIA INTEGRATION"),
                    //repository.FindFeatureByName("USER CUSTOMIZATION"),
                },
                ApplicationCostPerMonth = 17.00M,
                CallsPackageCostPerMonth = 0M,
                SetupFee = repository.FindSetupFeeByName("NOT APPLICABLE"),
                MinimumContract = repository.FindMinimumContractByName("12 MONTHS"),
                PaymentFrequency = repository.FindPaymentFrequencyByName("MONTHLY"),
                PaymentOptions = new List<PaymentOption>()
                {
                    repository.FindPaymentOptionByName("CREDIT CARD"),
                    //repository.FindPaymentOptionByName("PRE-PAY"),
                },
                FreeTrialPeriod = repository.FindFreeTrialPeriodByName("YES"),
                Category = repository.FindCategoryByName("CUSTOMER MANAGEMENT"),
                Vendor = repository.FindVendorByName("Salesforce"),
                Description = repository.GetDescription(),
                AddDate = DateTime.Now,
                #region Ratings,Reviews,Case Studies,White Papers
                Ratings = new List<CloudApplicationRating>()
                {
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                },
                Reviews = new List<CloudApplicationReview>()
                {
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                },
                ThumbnailDocuments = new List<ThumbnailDocument>()
                {
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("WHITE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_WHITE_PAPER_FILEPATH+PDF_TEST_WHITE_PAPER_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_WHITE_PAPER_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_WHITE_PAPER_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_WHITE_PAPER_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("WHITE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_WHITE_PAPER_FILEPATH+PDF_TEST_WHITE_PAPER_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_WHITE_PAPER_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_WHITE_PAPER_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_WHITE_PAPER_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("WHITE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_WHITE_PAPER_FILEPATH+PDF_TEST_WHITE_PAPER_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_WHITE_PAPER_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_WHITE_PAPER_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_WHITE_PAPER_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("CASE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_CASE_STUDY_FILEPATH+PDF_TEST_CASE_STUDY_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_CASE_STUDY_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_CASE_STUDY_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_CASE_STUDY_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("CASE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_CASE_STUDY_FILEPATH+PDF_TEST_CASE_STUDY_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_CASE_STUDY_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_CASE_STUDY_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_CASE_STUDY_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("CASE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_CASE_STUDY_FILEPATH+PDF_TEST_CASE_STUDY_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_CASE_STUDY_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_CASE_STUDY_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_CASE_STUDY_FILENAME,
                    },
                },
                #endregion
            };

            repository.AddCloudApplication(ca);
            #endregion

            #region SUGARCRM
            ca = new CloudApplication()
            {
                Brand = "SUGARCRM",
                ServiceName = "Professional",
                CompanyURL = "www.sugaruk.co.uk",
                OperatingSystems = new List<Domain.Models.OperatingSystem>()
                {
                    repository.FindOperatingSystemByName("WIN"),
                    repository.FindOperatingSystemByName("MAC"),
                    //repository.FindOperatingSystemByName("LINUX")
                },
                MobilePlatforms = new List<MobilePlatform>()
                {
                    repository.FindMobilePlatformByName("ANDROID"),
                    repository.FindMobilePlatformByName("IPHONE"),
                    repository.FindMobilePlatformByName("BB"),
                },
                Browsers = new List<Browser>()
                {
                    repository.FindBrowserByName("Internet Explorer 6"),
                    repository.FindBrowserByName("Internet Explorer 7"),
                    repository.FindBrowserByName("Internet Explorer 8"),
                    repository.FindBrowserByName("Internet Explorer 9"),
                    repository.FindBrowserByName("FIREFOX"),
                },
                LicenceTypeMinimum = repository.FindLicenceTypeMinimumByName(1),
                LicenceTypeMaximum = repository.FindLicenceTypeMaximumByName(16384),
                Languages = new List<Language>()
                {
                    repository.FindLanguageByName("ENGLISH")
                },
                SupportTypes = new List<SupportType>()
                {
                    repository.FindSupportTypeByName("ONLINE"),
                    repository.FindSupportTypeByName("TELEPHONE")
                },
                SupportHours = repository.FindSupportHoursByName("12 HOURS (BUSINESS)"),
                SupportDays = repository.FindSupportDaysByName("5"),
                SupportTerritories = new List<SupportTerritory>()
                {
                    repository.FindSupportTerritoryByName("GLOBAL"),
                },
                VideoTrainingSupport = false,
                CloudApplicationFeatures = new List<CloudApplicationFeature>()
                {
                    repository.FindFeatureByName("UNLIMITED CONTACTS"),
                    repository.FindFeatureByName("UNLIMITED STORAGE"),
                    repository.FindFeatureByName("SALES OPPORTUNITY MANAGEMENT"),
                    repository.FindFeatureByName("SALES FORECASTING"),
                    repository.FindFeatureByName("WEB TO LEAD FORM"),
                    repository.FindFeatureByName("EMAIL MARKETING"),
                    repository.FindFeatureByName("CAMPAIGN TRACKING AND MANAGEMENT"),
                    repository.FindFeatureByName("EMAIL INTEGRATION"),
                    repository.FindFeatureByName("CUSTOMER HELPDESK"),
                    repository.FindFeatureByName("CASE QUEUEING & TRACKING"),
                    repository.FindFeatureByName("UNLIMITED CASES"),
                    repository.FindFeatureByName("DOCUMENT MANAGEMENT"),
                    repository.FindFeatureByName("CUSTOM REPORTS"),
                    repository.FindFeatureByName("FULL SSL SECURITY"),
                    repository.FindFeatureByName("MOBILE INTEGRATION"),
                    repository.FindFeatureByName("INVOICE CREATION & MANAGEMENT"),
                    //repository.FindFeatureByName("INVENTORY & ORDER MANAGEMENT"),
                    repository.FindFeatureByName("OPEN API/3RD PARTY INTEGRATION"),
                    //repository.FindFeatureByName("SOCIAL MEDIA INTEGRATION"),
                    repository.FindFeatureByName("USER CUSTOMIZATION"),
                },
                ApplicationCostPerMonth = 18.75M,
                CallsPackageCostPerMonth = 0M,
                SetupFee = repository.FindSetupFeeByName("NOT APPLICABLE"),
                MinimumContract = repository.FindMinimumContractByName("12 MONTHS"),
                PaymentFrequency = repository.FindPaymentFrequencyByName("MONTHLY"),
                PaymentOptions = new List<PaymentOption>()
                {
                    repository.FindPaymentOptionByName("CREDIT CARD"),
                    repository.FindPaymentOptionByName("DIRECT DEBIT"),
                },
                FreeTrialPeriod = repository.FindFreeTrialPeriodByName("YES"),
                Category = repository.FindCategoryByName("CUSTOMER MANAGEMENT"),
                Vendor = repository.FindVendorByName("SUGARCRM"),
                Description = repository.GetDescription(),
                AddDate = DateTime.Now,
                #region Ratings,Reviews,Case Studies,White Papers
                Ratings = new List<CloudApplicationRating>()
                {
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                },
                Reviews = new List<CloudApplicationReview>()
                {
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                },
                ThumbnailDocuments = new List<ThumbnailDocument>()
                {
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("WHITE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_WHITE_PAPER_FILEPATH+PDF_TEST_WHITE_PAPER_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_WHITE_PAPER_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_WHITE_PAPER_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_WHITE_PAPER_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("WHITE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_WHITE_PAPER_FILEPATH+PDF_TEST_WHITE_PAPER_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_WHITE_PAPER_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_WHITE_PAPER_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_WHITE_PAPER_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("WHITE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_WHITE_PAPER_FILEPATH+PDF_TEST_WHITE_PAPER_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_WHITE_PAPER_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_WHITE_PAPER_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_WHITE_PAPER_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("CASE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_CASE_STUDY_FILEPATH+PDF_TEST_CASE_STUDY_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_CASE_STUDY_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_CASE_STUDY_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_CASE_STUDY_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("CASE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_CASE_STUDY_FILEPATH+PDF_TEST_CASE_STUDY_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_CASE_STUDY_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_CASE_STUDY_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_CASE_STUDY_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("CASE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_CASE_STUDY_FILEPATH+PDF_TEST_CASE_STUDY_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_CASE_STUDY_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_CASE_STUDY_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_CASE_STUDY_FILENAME,
                    },
                },
                #endregion
            };

            repository.AddCloudApplication(ca);
            #endregion

            #region ZOHOCRM
            ca = new CloudApplication()
            {
                Brand = "ZOHOCRM",
                ServiceName = "Professional",
                CompanyURL = "www.zoho.com/crm",
                OperatingSystems = new List<Domain.Models.OperatingSystem>()
                {
                    repository.FindOperatingSystemByName("WIN"),
                    repository.FindOperatingSystemByName("MAC"),
                    //repository.FindOperatingSystemByName("LINUX")
                },
                MobilePlatforms = new List<MobilePlatform>()
                {
                    repository.FindMobilePlatformByName("WIN"),
                    repository.FindMobilePlatformByName("IPHONE"),
                    repository.FindMobilePlatformByName("BB"),
                },
                Browsers = new List<Browser>()
                {
                    repository.FindBrowserByName("Internet Explorer 6"),
                    repository.FindBrowserByName("Internet Explorer 7"),
                    repository.FindBrowserByName("Internet Explorer 8"),
                    repository.FindBrowserByName("Internet Explorer 9"),
                    repository.FindBrowserByName("FIREFOX"),
                },
                LicenceTypeMinimum = repository.FindLicenceTypeMinimumByName(1),
                LicenceTypeMaximum = repository.FindLicenceTypeMaximumByName(16384),
                Languages = new List<Language>()
                {
                    repository.FindLanguageByName("ENGLISH")
                },
                SupportTypes = new List<SupportType>()
                {
                    repository.FindSupportTypeByName("ONLINE"),
                    //repository.FindSupportTypeByName("TELEPHONE")
                },
                SupportHours = repository.FindSupportHoursByName("12 HOURS (BUSINESS)"),
                SupportDays = repository.FindSupportDaysByName("5"),
                SupportTerritories = new List<SupportTerritory>()
                {
                    repository.FindSupportTerritoryByName("GLOBAL"),
                },
                VideoTrainingSupport = true,
                CloudApplicationFeatures = new List<CloudApplicationFeature>()
                {
                    repository.FindFeatureByName("UNLIMITED CONTACTS"),
                    repository.FindFeatureByName("UNLIMITED STORAGE"),
                    repository.FindFeatureByName("SALES OPPORTUNITY MANAGEMENT"),
                    repository.FindFeatureByName("SALES FORECASTING"),
                    repository.FindFeatureByName("WEB TO LEAD FORM"),
                    repository.FindFeatureByName("EMAIL MARKETING"),
                    repository.FindFeatureByName("CAMPAIGN TRACKING AND MANAGEMENT"),
                    repository.FindFeatureByName("EMAIL INTEGRATION"),
                    repository.FindFeatureByName("CUSTOMER HELPDESK"),
                    //repository.FindFeatureByName("CASE QUEUEING & TRACKING"),
                    repository.FindFeatureByName("UNLIMITED CASES"),
                    //repository.FindFeatureByName("DOCUMENT MANAGEMENT"),
                    //repository.FindFeatureByName("CUSTOM REPORTS"),
                    repository.FindFeatureByName("FULL SSL SECURITY"),
                    repository.FindFeatureByName("MOBILE INTEGRATION"),
                    //repository.FindFeatureByName("INVOICE CREATION & MANAGEMENT"),
                    //repository.FindFeatureByName("INVENTORY & ORDER MANAGEMENT"),
                    repository.FindFeatureByName("OPEN API/3RD PARTY INTEGRATION"),
                    //repository.FindFeatureByName("SOCIAL MEDIA INTEGRATION"),
                    repository.FindFeatureByName("USER CUSTOMIZATION"),
                },
                ApplicationCostPerMonth = 8.00M,
                CallsPackageCostPerMonth = 0M,
                SetupFee = repository.FindSetupFeeByName("NOT APPLICABLE"),
                MinimumContract = repository.FindMinimumContractByName("12 MONTHS"),
                PaymentFrequency = repository.FindPaymentFrequencyByName("MONTHLY"),
                PaymentOptions = new List<PaymentOption>()
                {
                    repository.FindPaymentOptionByName("CREDIT CARD"),
                    repository.FindPaymentOptionByName("PAYPAL"),
                },
                FreeTrialPeriod = repository.FindFreeTrialPeriodByName("YES"),
                Category = repository.FindCategoryByName("CUSTOMER MANAGEMENT"),
                Vendor = repository.FindVendorByName("ZOHOCRM"),
                Description = repository.GetDescription(),
                AddDate = DateTime.Now,
                #region Ratings,Reviews,Case Studies,White Papers
                Ratings = new List<CloudApplicationRating>()
                {
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                },
                Reviews = new List<CloudApplicationReview>()
                {
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                },
                ThumbnailDocuments = new List<ThumbnailDocument>()
                {
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("WHITE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_WHITE_PAPER_FILEPATH+PDF_TEST_WHITE_PAPER_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_WHITE_PAPER_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_WHITE_PAPER_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_WHITE_PAPER_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("WHITE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_WHITE_PAPER_FILEPATH+PDF_TEST_WHITE_PAPER_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_WHITE_PAPER_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_WHITE_PAPER_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_WHITE_PAPER_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("WHITE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_WHITE_PAPER_FILEPATH+PDF_TEST_WHITE_PAPER_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_WHITE_PAPER_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_WHITE_PAPER_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_WHITE_PAPER_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("CASE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_CASE_STUDY_FILEPATH+PDF_TEST_CASE_STUDY_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_CASE_STUDY_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_CASE_STUDY_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_CASE_STUDY_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("CASE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_CASE_STUDY_FILEPATH+PDF_TEST_CASE_STUDY_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_CASE_STUDY_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_CASE_STUDY_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_CASE_STUDY_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("CASE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_CASE_STUDY_FILEPATH+PDF_TEST_CASE_STUDY_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_CASE_STUDY_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_CASE_STUDY_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_CASE_STUDY_FILENAME,
                    },
                },
                #endregion
            };

            repository.AddCloudApplication(ca);
            #endregion

            #region WORKBOOKS.COM
            ca = new CloudApplication()
            {
                Brand = "Workbooks.com",
                ServiceName = "CRM",
                CompanyURL = "www.workbooks.com",
                OperatingSystems = new List<Domain.Models.OperatingSystem>()
                {
                    repository.FindOperatingSystemByName("WIN"),
                    repository.FindOperatingSystemByName("MAC"),
                    //repository.FindOperatingSystemByName("LINUX")
                },
                MobilePlatforms = new List<MobilePlatform>()
                {
                    repository.FindMobilePlatformByName("IPAD"),
                    repository.FindMobilePlatformByName("IPHONE"),
                    repository.FindMobilePlatformByName("BB"),
                },
                Browsers = new List<Browser>()
                {
                    repository.FindBrowserByName("Internet Explorer 6"),
                    repository.FindBrowserByName("Internet Explorer 7"),
                    repository.FindBrowserByName("Internet Explorer 8"),
                    repository.FindBrowserByName("Internet Explorer 9"),
                    repository.FindBrowserByName("FIREFOX"),
                },
                LicenceTypeMinimum = repository.FindLicenceTypeMinimumByName(1),
                LicenceTypeMaximum = repository.FindLicenceTypeMaximumByName(16384),
                Languages = new List<Language>()
                {
                    repository.FindLanguageByName("ENGLISH")
                },
                SupportTypes = new List<SupportType>()
                {
                    repository.FindSupportTypeByName("ONLINE"),
                    repository.FindSupportTypeByName("TELEPHONE")
                },
                SupportHours = repository.FindSupportHoursByName("12 HOURS (BUSINESS)"),
                SupportDays = repository.FindSupportDaysByName("5"),
                SupportTerritories = new List<SupportTerritory>()
                {
                    repository.FindSupportTerritoryByName("UK"),
                },
                VideoTrainingSupport = true,
                CloudApplicationFeatures = new List<CloudApplicationFeature>()
                {
                    repository.FindFeatureByName("UNLIMITED CONTACTS"),
                    repository.FindFeatureByName("UNLIMITED STORAGE"),
                    repository.FindFeatureByName("SALES OPPORTUNITY MANAGEMENT"),
                    repository.FindFeatureByName("SALES FORECASTING"),
                    repository.FindFeatureByName("WEB TO LEAD FORM"),
                    repository.FindFeatureByName("EMAIL MARKETING"),
                    repository.FindFeatureByName("CAMPAIGN TRACKING AND MANAGEMENT"),
                    repository.FindFeatureByName("EMAIL INTEGRATION"),
                    repository.FindFeatureByName("CUSTOMER HELPDESK"),
                    repository.FindFeatureByName("CASE QUEUEING & TRACKING"),
                    repository.FindFeatureByName("UNLIMITED CASES"),
                    repository.FindFeatureByName("DOCUMENT MANAGEMENT"),
                    repository.FindFeatureByName("CUSTOM REPORTS"),
                    repository.FindFeatureByName("FULL SSL SECURITY"),
                    repository.FindFeatureByName("MOBILE INTEGRATION"),
                    repository.FindFeatureByName("INVOICE CREATION & MANAGEMENT"),
                    repository.FindFeatureByName("INVENTORY & ORDER MANAGEMENT"),
                    repository.FindFeatureByName("OPEN API/3RD PARTY INTEGRATION"),
                    //repository.FindFeatureByName("SOCIAL MEDIA INTEGRATION"),
                    repository.FindFeatureByName("USER CUSTOMIZATION"),
                },
                ApplicationCostPerMonth = 30.00M,
                CallsPackageCostPerMonth = 0M,
                SetupFee = repository.FindSetupFeeByName("NOT APPLICABLE"),
                MinimumContract = repository.FindMinimumContractByName("12 MONTHS"),
                PaymentFrequency = repository.FindPaymentFrequencyByName("MONTHLY"),
                PaymentOptions = new List<PaymentOption>()
                {
                    repository.FindPaymentOptionByName("CREDIT CARD"),
                    repository.FindPaymentOptionByName("PAYPAL"),
                },
                FreeTrialPeriod = repository.FindFreeTrialPeriodByName("YES"),
                Category = repository.FindCategoryByName("CUSTOMER MANAGEMENT"),
                Vendor = repository.FindVendorByName("Workbooks.com"),
                Description = repository.GetDescription(),
                AddDate = DateTime.Now,
                #region Ratings,Reviews,Case Studies,White Papers
                Ratings = new List<CloudApplicationRating>()
                {
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                },
                Reviews = new List<CloudApplicationReview>()
                {
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                },
                ThumbnailDocuments = new List<ThumbnailDocument>()
                {
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("WHITE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_WHITE_PAPER_FILEPATH+PDF_TEST_WHITE_PAPER_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_WHITE_PAPER_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_WHITE_PAPER_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_WHITE_PAPER_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("WHITE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_WHITE_PAPER_FILEPATH+PDF_TEST_WHITE_PAPER_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_WHITE_PAPER_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_WHITE_PAPER_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_WHITE_PAPER_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("WHITE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_WHITE_PAPER_FILEPATH+PDF_TEST_WHITE_PAPER_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_WHITE_PAPER_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_WHITE_PAPER_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_WHITE_PAPER_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("CASE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_CASE_STUDY_FILEPATH+PDF_TEST_CASE_STUDY_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_CASE_STUDY_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_CASE_STUDY_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_CASE_STUDY_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("CASE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_CASE_STUDY_FILEPATH+PDF_TEST_CASE_STUDY_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_CASE_STUDY_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_CASE_STUDY_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_CASE_STUDY_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("CASE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_CASE_STUDY_FILEPATH+PDF_TEST_CASE_STUDY_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_CASE_STUDY_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_CASE_STUDY_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_CASE_STUDY_FILENAME,
                    },
                },
                #endregion
            };

            repository.AddCloudApplication(ca);
            #endregion

            #region MICROSOFT DYNAMICS
            ca = new CloudApplication()
            {
                Brand = "Microsoft Dynamics",
                ServiceName = "CRM Online",
                CompanyURL = "http://crm.dynamics.com",
                OperatingSystems = new List<Domain.Models.OperatingSystem>()
                {
                    repository.FindOperatingSystemByName("WIN"),
                    //repository.FindOperatingSystemByName("MAC"),
                    //repository.FindOperatingSystemByName("LINUX")
                },
                MobilePlatforms = repository.GetAllMobilePlatforms(),
                Browsers = new List<Browser>()
                {
                    repository.FindBrowserByName("Internet Explorer 6"),
                    repository.FindBrowserByName("Internet Explorer 7"),
                    repository.FindBrowserByName("Internet Explorer 8"),
                    repository.FindBrowserByName("Internet Explorer 9"),
                    //repository.FindBrowserByName("FIREFOX"),
                },
                LicenceTypeMinimum = repository.FindLicenceTypeMinimumByName(1),
                LicenceTypeMaximum = repository.FindLicenceTypeMaximumByName(16384),
                Languages = new List<Language>()
                {
                    repository.FindLanguageByName("ENGLISH")
                },
                SupportTypes = new List<SupportType>()
                {
                    repository.FindSupportTypeByName("ONLINE"),
                    repository.FindSupportTypeByName("COMMUNITY")
                },
                SupportHours = repository.FindSupportHoursByName("NOT APPLICABLE"),
                SupportDays = repository.FindSupportDaysByName("NOT APPLICABLE"),
                SupportTerritories = new List<SupportTerritory>()
                {
                    repository.FindSupportTerritoryByName("GLOBAL"),
                },
                VideoTrainingSupport = true,
                CloudApplicationFeatures = new List<CloudApplicationFeature>()
                {
                    repository.FindFeatureByName("UNLIMITED CONTACTS"),
                    repository.FindFeatureByName("UNLIMITED STORAGE"),
                    repository.FindFeatureByName("SALES OPPORTUNITY MANAGEMENT"),
                    repository.FindFeatureByName("SALES FORECASTING"),
                    repository.FindFeatureByName("WEB TO LEAD FORM"),
                    repository.FindFeatureByName("EMAIL MARKETING"),
                    repository.FindFeatureByName("CAMPAIGN TRACKING AND MANAGEMENT"),
                    repository.FindFeatureByName("EMAIL INTEGRATION"),
                    repository.FindFeatureByName("CUSTOMER HELPDESK"),
                    repository.FindFeatureByName("CASE QUEUEING & TRACKING"),
                    repository.FindFeatureByName("UNLIMITED CASES"),
                    repository.FindFeatureByName("DOCUMENT MANAGEMENT"),
                    repository.FindFeatureByName("CUSTOM REPORTS"),
                    repository.FindFeatureByName("FULL SSL SECURITY"),
                    repository.FindFeatureByName("MOBILE INTEGRATION"),
                    //repository.FindFeatureByName("INVOICE CREATION & MANAGEMENT"),
                    //repository.FindFeatureByName("INVENTORY & ORDER MANAGEMENT"),
                    repository.FindFeatureByName("OPEN API/3RD PARTY INTEGRATION"),
                    //repository.FindFeatureByName("SOCIAL MEDIA INTEGRATION"),
                    repository.FindFeatureByName("USER CUSTOMIZATION"),
                },
                ApplicationCostPerMonth = 22.75M,
                CallsPackageCostPerMonth = 0M,
                SetupFee = repository.FindSetupFeeByName("NOT APPLICABLE"),
                MinimumContract = repository.FindMinimumContractByName("12 MONTHS"),
                PaymentFrequency = repository.FindPaymentFrequencyByName("MONTHLY"),
                PaymentOptions = new List<PaymentOption>()
                {
                    repository.FindPaymentOptionByName("CREDIT CARD"),
                    repository.FindPaymentOptionByName("INVOICE"),
                },
                FreeTrialPeriod = repository.FindFreeTrialPeriodByName("YES"),
                Category = repository.FindCategoryByName("CUSTOMER MANAGEMENT"),
                Vendor = repository.FindVendorByName("Microsoft Dynamics"),
                Description = repository.GetDescription(),
                AddDate = DateTime.Now,
                #region Ratings,Reviews,Case Studies,White Papers
                Ratings = new List<CloudApplicationRating>()
                {
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                },
                Reviews = new List<CloudApplicationReview>()
                {
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                },
                ThumbnailDocuments = new List<ThumbnailDocument>()
                {
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("WHITE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_WHITE_PAPER_FILEPATH+PDF_TEST_WHITE_PAPER_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_WHITE_PAPER_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_WHITE_PAPER_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_WHITE_PAPER_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("WHITE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_WHITE_PAPER_FILEPATH+PDF_TEST_WHITE_PAPER_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_WHITE_PAPER_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_WHITE_PAPER_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_WHITE_PAPER_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("WHITE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_WHITE_PAPER_FILEPATH+PDF_TEST_WHITE_PAPER_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_WHITE_PAPER_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_WHITE_PAPER_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_WHITE_PAPER_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("CASE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_CASE_STUDY_FILEPATH+PDF_TEST_CASE_STUDY_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_CASE_STUDY_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_CASE_STUDY_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_CASE_STUDY_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("CASE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_CASE_STUDY_FILEPATH+PDF_TEST_CASE_STUDY_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_CASE_STUDY_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_CASE_STUDY_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_CASE_STUDY_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("CASE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_CASE_STUDY_FILEPATH+PDF_TEST_CASE_STUDY_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_CASE_STUDY_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_CASE_STUDY_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_CASE_STUDY_FILENAME,
                    },
                },
                #endregion
            };

            repository.AddCloudApplication(ca);
            #endregion

            #region MAXIMIZER
            ca = new CloudApplication()
            {
                Brand = "Maximizer",
                ServiceName = "Entrepeneur Edition",
                CompanyURL = "http://www.max.co.uk",
                OperatingSystems = new List<Domain.Models.OperatingSystem>()
                {
                    repository.FindOperatingSystemByName("WIN"),
                    //repository.FindOperatingSystemByName("MAC"),
                    //repository.FindOperatingSystemByName("LINUX")
                },
                MobilePlatforms = new List<MobilePlatform>()
                {
                    //repository.FindMobilePlatformByName("ANDROID"),
                    //repository.FindMobilePlatformByName("IPHONE"),
                    repository.FindMobilePlatformByName("BB"),
                },
                Browsers = new List<Browser>()
                {
                    repository.FindBrowserByName("Internet Explorer 6"),
                    repository.FindBrowserByName("Internet Explorer 7"),
                    repository.FindBrowserByName("Internet Explorer 8"),
                    repository.FindBrowserByName("Internet Explorer 9"),
                    repository.FindBrowserByName("FIREFOX"),
                },
                LicenceTypeMinimum = repository.FindLicenceTypeMinimumByName(1),
                LicenceTypeMaximum = repository.FindLicenceTypeMaximumByName(5),
                Languages = new List<Language>()
                {
                    repository.FindLanguageByName("ENGLISH")
                },
                SupportTypes = new List<SupportType>()
                {
                    repository.FindSupportTypeByName("KNOWLEDGE BASE"),
                    //repository.FindSupportTypeByName("TELEPHONE")
                },
                //SupportHours = repository.FindSupportHoursByName("12 HOURS (BUSINESS)"),
                //SupportDays = repository.FindSupportDaysByName("5"),
                SupportTerritories = new List<SupportTerritory>()
                {
                    repository.FindSupportTerritoryByName("GLOBAL"),
                },
                VideoTrainingSupport = true,
                CloudApplicationFeatures = new List<CloudApplicationFeature>()
                {
                    //repository.FindFeatureByName("UNLIMITED CONTACTS"),
                    //repository.FindFeatureByName("UNLIMITED STORAGE"),
                    repository.FindFeatureByName("SALES OPPORTUNITY MANAGEMENT"),
                    repository.FindFeatureByName("SALES FORECASTING"),
                    //repository.FindFeatureByName("WEB TO LEAD FORM"),
                    //repository.FindFeatureByName("EMAIL MARKETING"),
                    //repository.FindFeatureByName("CAMPAIGN TRACKING AND MANAGEMENT"),
                    //repository.FindFeatureByName("EMAIL INTEGRATION"),
                    //repository.FindFeatureByName("CUSTOMER HELPDESK"),
                    //repository.FindFeatureByName("CASE QUEUEING & TRACKING"),
                    //repository.FindFeatureByName("UNLIMITED CASES"),
                    repository.FindFeatureByName("DOCUMENT MANAGEMENT"),
                    //repository.FindFeatureByName("CUSTOM REPORTS"),
                    //repository.FindFeatureByName("FULL SSL SECURITY"),
                    repository.FindFeatureByName("MOBILE INTEGRATION"),
                    //repository.FindFeatureByName("INVOICE CREATION & MANAGEMENT"),
                    //repository.FindFeatureByName("INVENTORY & ORDER MANAGEMENT"),
                    repository.FindFeatureByName("OPEN API/3RD PARTY INTEGRATION"),
                    //repository.FindFeatureByName("SOCIAL MEDIA INTEGRATION"),
                    repository.FindFeatureByName("USER CUSTOMIZATION"),
                },
                ApplicationCostPerAnnum = 130.00M,
                CallsPackageCostPerMonth = 0M,
                SetupFee = repository.FindSetupFeeByName("NOT APPLICABLE"),
                MinimumContract = repository.FindMinimumContractByName("NOT APPLICABLE"),
                PaymentFrequency = repository.FindPaymentFrequencyByName("NOT APPLICABLE"),
                PaymentOptions = new List<PaymentOption>()
                {
                    repository.FindPaymentOptionByName("CREDIT CARD"),
                    //repository.FindPaymentOptionByName("PRE-PAY"),
                },
                FreeTrialPeriod = repository.FindFreeTrialPeriodByName("DEMO"),
                Category = repository.FindCategoryByName("CUSTOMER MANAGEMENT"),
                Vendor = repository.FindVendorByName("Maximizer"),
                Description = repository.GetDescription(),
                AddDate = DateTime.Now,
                #region Ratings,Reviews,Case Studies,White Papers
                Ratings = new List<CloudApplicationRating>()
                {
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                },
                Reviews = new List<CloudApplicationReview>()
                {
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                },
                ThumbnailDocuments = new List<ThumbnailDocument>()
                {
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("WHITE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_WHITE_PAPER_FILEPATH+PDF_TEST_WHITE_PAPER_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_WHITE_PAPER_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_WHITE_PAPER_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_WHITE_PAPER_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("WHITE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_WHITE_PAPER_FILEPATH+PDF_TEST_WHITE_PAPER_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_WHITE_PAPER_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_WHITE_PAPER_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_WHITE_PAPER_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("WHITE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_WHITE_PAPER_FILEPATH+PDF_TEST_WHITE_PAPER_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_WHITE_PAPER_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_WHITE_PAPER_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_WHITE_PAPER_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("CASE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_CASE_STUDY_FILEPATH+PDF_TEST_CASE_STUDY_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_CASE_STUDY_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_CASE_STUDY_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_CASE_STUDY_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("CASE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_CASE_STUDY_FILEPATH+PDF_TEST_CASE_STUDY_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_CASE_STUDY_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_CASE_STUDY_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_CASE_STUDY_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("CASE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_CASE_STUDY_FILEPATH+PDF_TEST_CASE_STUDY_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_CASE_STUDY_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_CASE_STUDY_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_CASE_STUDY_FILENAME,
                    },
                },
                #endregion
            };

            repository.AddCloudApplication(ca);
            #endregion

            #region OPENCRM
            ca = new CloudApplication()
            {
                Brand = "opencrm",
                ServiceName = "Entry",
                CompanyURL = "www.opencrm.co.uk",
                OperatingSystems = new List<Domain.Models.OperatingSystem>()
                {
                    repository.FindOperatingSystemByName("WIN"),
                    repository.FindOperatingSystemByName("MAC"),
                    //repository.FindOperatingSystemByName("LINUX")
                },
                //MobilePlatforms = new List<MobilePlatform>()
                //{
                //    repository.FindMobilePlatformByName("ANDROID"),
                //    repository.FindMobilePlatformByName("IPHONE"),
                //    repository.FindMobilePlatformByName("BB"),
                //},
                Browsers = new List<Browser>()
                {
                    repository.FindBrowserByName("Internet Explorer 6"),
                    repository.FindBrowserByName("Internet Explorer 7"),
                    repository.FindBrowserByName("Internet Explorer 8"),
                    repository.FindBrowserByName("Internet Explorer 9"),
                    repository.FindBrowserByName("FIREFOX"),
                },
                LicenceTypeMinimum = repository.FindLicenceTypeMinimumByName(1),
                LicenceTypeMaximum = repository.FindLicenceTypeMaximumByName(3),
                Languages = new List<Language>()
                {
                    repository.FindLanguageByName("ENGLISH")
                },
                SupportTypes = new List<SupportType>()
                {
                    repository.FindSupportTypeByName("ONLINE"),
                    repository.FindSupportTypeByName("TELEPHONE")
                },
                SupportHours = repository.FindSupportHoursByName("12 HOURS (BUSINESS)"),
                SupportDays = repository.FindSupportDaysByName("MON-FRI"),
                SupportTerritories = new List<SupportTerritory>()
                {
                    repository.FindSupportTerritoryByName("UK"),
                },
                VideoTrainingSupport = false,
                CloudApplicationFeatures = new List<CloudApplicationFeature>()
                {
                    repository.FindFeatureByName("UNLIMITED CONTACTS"),
                    repository.FindFeatureByName("UNLIMITED STORAGE"),
                    repository.FindFeatureByName("SALES OPPORTUNITY MANAGEMENT"),
                    repository.FindFeatureByName("SALES FORECASTING"),
                    repository.FindFeatureByName("WEB TO LEAD FORM"),
                    repository.FindFeatureByName("EMAIL MARKETING"),
                    repository.FindFeatureByName("CAMPAIGN TRACKING AND MANAGEMENT"),
                    repository.FindFeatureByName("EMAIL INTEGRATION"),
                    repository.FindFeatureByName("CUSTOMER HELPDESK"),
                    repository.FindFeatureByName("CASE QUEUEING & TRACKING"),
                    repository.FindFeatureByName("UNLIMITED CASES"),
                    repository.FindFeatureByName("DOCUMENT MANAGEMENT"),
                    repository.FindFeatureByName("CUSTOM REPORTS"),
                    repository.FindFeatureByName("FULL SSL SECURITY"),
                    repository.FindFeatureByName("MOBILE INTEGRATION"),
                    //repository.FindFeatureByName("INVOICE CREATION & MANAGEMENT"),
                    repository.FindFeatureByName("INVENTORY & ORDER MANAGEMENT"),
                    repository.FindFeatureByName("OPEN API/3RD PARTY INTEGRATION"),
                    //repository.FindFeatureByName("SOCIAL MEDIA INTEGRATION"),
                    repository.FindFeatureByName("USER CUSTOMIZATION"),
                },
                ApplicationCostPerMonth = 25.00M,
                CallsPackageCostPerMonth = 0M,
                SetupFee = repository.FindSetupFeeByName("NOT APPLICABLE"),
                MinimumContract = repository.FindMinimumContractByName("12 MONTHS"),
                PaymentFrequency = repository.FindPaymentFrequencyByName("MONTHLY"),
                PaymentOptions = new List<PaymentOption>()
                {
                    repository.FindPaymentOptionByName("CREDIT CARD"),
                    //repository.FindPaymentOptionByName("PRE-PAY"),
                },
                FreeTrialPeriod = repository.FindFreeTrialPeriodByName("DEMO"),
                Category = repository.FindCategoryByName("CUSTOMER MANAGEMENT"),
                Vendor = repository.FindVendorByName("opencrm"),
                Description = repository.GetDescription(),
                AddDate = DateTime.Now,
                #region Ratings,Reviews,Case Studies,White Papers
                Ratings = new List<CloudApplicationRating>()
                {
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                },
                Reviews = new List<CloudApplicationReview>()
                {
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                },
                ThumbnailDocuments = new List<ThumbnailDocument>()
                {
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("WHITE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_WHITE_PAPER_FILEPATH+PDF_TEST_WHITE_PAPER_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_WHITE_PAPER_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_WHITE_PAPER_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_WHITE_PAPER_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("WHITE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_WHITE_PAPER_FILEPATH+PDF_TEST_WHITE_PAPER_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_WHITE_PAPER_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_WHITE_PAPER_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_WHITE_PAPER_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("WHITE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_WHITE_PAPER_FILEPATH+PDF_TEST_WHITE_PAPER_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_WHITE_PAPER_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_WHITE_PAPER_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_WHITE_PAPER_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("CASE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_CASE_STUDY_FILEPATH+PDF_TEST_CASE_STUDY_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_CASE_STUDY_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_CASE_STUDY_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_CASE_STUDY_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("CASE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_CASE_STUDY_FILEPATH+PDF_TEST_CASE_STUDY_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_CASE_STUDY_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_CASE_STUDY_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_CASE_STUDY_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("CASE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_CASE_STUDY_FILEPATH+PDF_TEST_CASE_STUDY_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_CASE_STUDY_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_CASE_STUDY_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_CASE_STUDY_FILENAME,
                    },
                },
                #endregion
            };

            repository.AddCloudApplication(ca);
            #endregion

            #region TACTILECRM
            ca = new CloudApplication()
            {
                Brand = "TactileCRM",
                ServiceName = "Premium",
                CompanyURL = "www.tactilecrm.com",
                OperatingSystems = new List<Domain.Models.OperatingSystem>()
                {
                    repository.FindOperatingSystemByName("WIN"),
                    repository.FindOperatingSystemByName("MAC"),
                    //repository.FindOperatingSystemByName("LINUX")
                },
                MobilePlatforms = new List<MobilePlatform>()
                {
                    //repository.FindMobilePlatformByName("ANDROID"),
                    repository.FindMobilePlatformByName("IPHONE"),
                    //repository.FindMobilePlatformByName("BB"),
                },
                Browsers = new List<Browser>()
                {
                    repository.FindBrowserByName("Internet Explorer 6"),
                    repository.FindBrowserByName("Internet Explorer 7"),
                    repository.FindBrowserByName("Internet Explorer 8"),
                    repository.FindBrowserByName("Internet Explorer 9"),
                    repository.FindBrowserByName("FIREFOX"),
                    repository.FindBrowserByName("SAFARI"),
                    repository.FindBrowserByName("OPERA")
                },
                LicenceTypeMinimum = repository.FindLicenceTypeMinimumByName(1),
                LicenceTypeMaximum = repository.FindLicenceTypeMaximumByName(20),
                Languages = new List<Language>()
                {
                    repository.FindLanguageByName("ENGLISH")
                },
                SupportTypes = new List<SupportType>()
                {
                    repository.FindSupportTypeByName("EMAIL"),
                    //repository.FindSupportTypeByName("TELEPHONE")
                },
                SupportHours = repository.FindSupportHoursByName("9AM-5PM"),
                SupportDays = repository.FindSupportDaysByName("MON-FRI"),
                SupportTerritories = new List<SupportTerritory>()
                {
                    repository.FindSupportTerritoryByName("UK"),
                },
                VideoTrainingSupport = false,
                CloudApplicationFeatures = new List<CloudApplicationFeature>()
                {
                    repository.FindFeatureByName("UNLIMITED CONTACTS"),
                    repository.FindFeatureByName("UNLIMITED STORAGE"),
                    repository.FindFeatureByName("SALES OPPORTUNITY MANAGEMENT"),
                    repository.FindFeatureByName("SALES FORECASTING"),
                    //repository.FindFeatureByName("WEB TO LEAD FORM"),
                    //repository.FindFeatureByName("EMAIL MARKETING"),
                    //repository.FindFeatureByName("CAMPAIGN TRACKING AND MANAGEMENT"),
                    repository.FindFeatureByName("EMAIL INTEGRATION"),
                    //repository.FindFeatureByName("CUSTOMER HELPDESK"),
                    //repository.FindFeatureByName("CASE QUEUEING & TRACKING"),
                    //repository.FindFeatureByName("UNLIMITED CASES"),
                    repository.FindFeatureByName("DOCUMENT MANAGEMENT"),
                    repository.FindFeatureByName("CUSTOM REPORTS"),
                    repository.FindFeatureByName("FULL SSL SECURITY"),
                    repository.FindFeatureByName("MOBILE INTEGRATION"),
                    //repository.FindFeatureByName("INVOICE CREATION & MANAGEMENT"),
                    //repository.FindFeatureByName("INVENTORY & ORDER MANAGEMENT"),
                    repository.FindFeatureByName("OPEN API/3RD PARTY INTEGRATION"),
                    //repository.FindFeatureByName("SOCIAL MEDIA INTEGRATION"),
                    repository.FindFeatureByName("USER CUSTOMIZATION"),
                },
                ApplicationCostPerMonth = 6.00M,
                CallsPackageCostPerMonth = 0M,
                SetupFee = repository.FindSetupFeeByName("NOT APPLICABLE"),
                MinimumContract = repository.FindMinimumContractByName("12 MONTHS"),
                PaymentFrequency = repository.FindPaymentFrequencyByName("MONTHLY"),
                PaymentOptions = new List<PaymentOption>()
                {
                    repository.FindPaymentOptionByName("CREDIT CARD"),
                    //repository.FindPaymentOptionByName("PRE-PAY"),
                },
                FreeTrialPeriod = repository.FindFreeTrialPeriodByName("YES"),
                Category = repository.FindCategoryByName("CUSTOMER MANAGEMENT"),
                Vendor = repository.FindVendorByName("TactileCRM"),
                Description = repository.GetDescription(),
                AddDate = DateTime.Now,
                #region Ratings,Reviews,Case Studies,White Papers
                Ratings = new List<CloudApplicationRating>()
                {
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                },
                Reviews = new List<CloudApplicationReview>()
                {
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                },
                ThumbnailDocuments = new List<ThumbnailDocument>()
                {
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("WHITE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_WHITE_PAPER_FILEPATH+PDF_TEST_WHITE_PAPER_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_WHITE_PAPER_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_WHITE_PAPER_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_WHITE_PAPER_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("WHITE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_WHITE_PAPER_FILEPATH+PDF_TEST_WHITE_PAPER_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_WHITE_PAPER_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_WHITE_PAPER_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_WHITE_PAPER_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("WHITE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_WHITE_PAPER_FILEPATH+PDF_TEST_WHITE_PAPER_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_WHITE_PAPER_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_WHITE_PAPER_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_WHITE_PAPER_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("CASE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_CASE_STUDY_FILEPATH+PDF_TEST_CASE_STUDY_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_CASE_STUDY_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_CASE_STUDY_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_CASE_STUDY_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("CASE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_CASE_STUDY_FILEPATH+PDF_TEST_CASE_STUDY_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_CASE_STUDY_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_CASE_STUDY_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_CASE_STUDY_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("CASE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_CASE_STUDY_FILEPATH+PDF_TEST_CASE_STUDY_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_CASE_STUDY_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_CASE_STUDY_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_CASE_STUDY_FILENAME,
                    },
                },
                #endregion
            };

            repository.AddCloudApplication(ca);
            #endregion

            #region WECANDOBIZ
            ca = new CloudApplication()
            {
                Brand = "wecandobiz",
                ServiceName = "Entry",
                CompanyURL = "wecando.biz",
                OperatingSystems = new List<Domain.Models.OperatingSystem>()
                {
                    repository.FindOperatingSystemByName("WIN"),
                    repository.FindOperatingSystemByName("MAC"),
                    //repository.FindOperatingSystemByName("LINUX")
                },
                //MobilePlatforms = new List<MobilePlatform>()
                //{
                //    repository.FindMobilePlatformByName("ANDROID"),
                //    repository.FindMobilePlatformByName("IPHONE"),
                //    repository.FindMobilePlatformByName("BB"),
                //},
                Browsers = new List<Browser>()
                {
                    repository.FindBrowserByName("Internet Explorer 6"),
                    repository.FindBrowserByName("Internet Explorer 7"),
                    repository.FindBrowserByName("Internet Explorer 8"),
                    repository.FindBrowserByName("Internet Explorer 9"),
                    //repository.FindBrowserByName("FIREFOX"),
                },
                LicenceTypeMinimum = repository.FindLicenceTypeMinimumByName(1),
                LicenceTypeMaximum = repository.FindLicenceTypeMaximumByName(9),
                Languages = new List<Language>()
                {
                    repository.FindLanguageByName("ENGLISH")
                },
                SupportTypes = new List<SupportType>()
                {
                    repository.FindSupportTypeByName("ONLINE"),
                    repository.FindSupportTypeByName("COMMUNITY")
                },
                SupportHours = repository.FindSupportHoursByName("NOT APPLICABLE"),
                SupportDays = repository.FindSupportDaysByName("NOT APPLICABLE"),
                SupportTerritories = new List<SupportTerritory>()
                {
                    repository.FindSupportTerritoryByName("UK"),
                },
                VideoTrainingSupport = true,
                CloudApplicationFeatures = new List<CloudApplicationFeature>()
                {
                    //repository.FindFeatureByName("UNLIMITED CONTACTS"),
                    //repository.FindFeatureByName("UNLIMITED STORAGE"),
                    repository.FindFeatureByName("SALES OPPORTUNITY MANAGEMENT"),
                    repository.FindFeatureByName("SALES FORECASTING"),
                    repository.FindFeatureByName("WEB TO LEAD FORM"),
                    repository.FindFeatureByName("EMAIL MARKETING"),
                    repository.FindFeatureByName("CAMPAIGN TRACKING AND MANAGEMENT"),
                    repository.FindFeatureByName("EMAIL INTEGRATION"),
                    //repository.FindFeatureByName("CUSTOMER HELPDESK"),
                    //repository.FindFeatureByName("CASE QUEUEING & TRACKING"),
                    //repository.FindFeatureByName("UNLIMITED CASES"),
                    //repository.FindFeatureByName("DOCUMENT MANAGEMENT"),
                    //repository.FindFeatureByName("CUSTOM REPORTS"),
                    repository.FindFeatureByName("FULL SSL SECURITY"),
                    //repository.FindFeatureByName("MOBILE INTEGRATION"),
                    repository.FindFeatureByName("INVOICE CREATION & MANAGEMENT"),
                    repository.FindFeatureByName("INVENTORY & ORDER MANAGEMENT"),
                    repository.FindFeatureByName("OPEN API/3RD PARTY INTEGRATION"),
                    repository.FindFeatureByName("SOCIAL MEDIA INTEGRATION"),
                    repository.FindFeatureByName("USER CUSTOMIZATION"),
                },
                ApplicationCostPerMonth = 0.00M,
                CallsPackageCostPerMonth = 0M,
                SetupFee = repository.FindSetupFeeByName("NOT APPLICABLE"),
                MinimumContract = repository.FindMinimumContractByName("NONE"),
                PaymentFrequency = repository.FindPaymentFrequencyByName("MONTHLY"),
                PaymentOptions = new List<PaymentOption>()
                {
                    repository.FindPaymentOptionByName("CREDIT CARD"),
                    //repository.FindPaymentOptionByName("PRE-PAY"),
                },
                FreeTrialPeriod = repository.FindFreeTrialPeriodByName("YES"),
                Category = repository.FindCategoryByName("CUSTOMER MANAGEMENT"),
                Vendor = repository.FindVendorByName("wecandobiz"),
                Description = repository.GetDescription(),
                AddDate = DateTime.Now,
                #region Ratings,Reviews,Case Studies,White Papers
                Ratings = new List<CloudApplicationRating>()
                {
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                },
                Reviews = new List<CloudApplicationReview>()
                {
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                },
                ThumbnailDocuments = new List<ThumbnailDocument>()
                {
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("WHITE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_WHITE_PAPER_FILEPATH+PDF_TEST_WHITE_PAPER_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_WHITE_PAPER_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_WHITE_PAPER_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_WHITE_PAPER_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("WHITE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_WHITE_PAPER_FILEPATH+PDF_TEST_WHITE_PAPER_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_WHITE_PAPER_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_WHITE_PAPER_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_WHITE_PAPER_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("WHITE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_WHITE_PAPER_FILEPATH+PDF_TEST_WHITE_PAPER_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_WHITE_PAPER_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_WHITE_PAPER_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_WHITE_PAPER_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("CASE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_CASE_STUDY_FILEPATH+PDF_TEST_CASE_STUDY_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_CASE_STUDY_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_CASE_STUDY_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_CASE_STUDY_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("CASE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_CASE_STUDY_FILEPATH+PDF_TEST_CASE_STUDY_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_CASE_STUDY_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_CASE_STUDY_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_CASE_STUDY_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("CASE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_CASE_STUDY_FILEPATH+PDF_TEST_CASE_STUDY_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_CASE_STUDY_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_CASE_STUDY_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_CASE_STUDY_FILENAME,
                    },
                },
                #endregion
            };

            repository.AddCloudApplication(ca);
            #endregion

            #region BUDDY
            ca = new CloudApplication()
            {
                Brand = "Buddy",
                ServiceName = "BuddyCRM",
                CompanyURL = "www.buddycrm.com",
                OperatingSystems = new List<Domain.Models.OperatingSystem>()
                {
                    repository.FindOperatingSystemByName("WIN"),
                    repository.FindOperatingSystemByName("MAC"),
                    //repository.FindOperatingSystemByName("LINUX")
                },
                //MobilePlatforms = new List<MobilePlatform>()
                //{
                //    repository.FindMobilePlatformByName("ANDROID"),
                //    repository.FindMobilePlatformByName("IPHONE"),
                //    repository.FindMobilePlatformByName("BB"),
                //},
                Browsers = new List<Browser>()
                {
                    repository.FindBrowserByName("Internet Explorer 6"),
                    repository.FindBrowserByName("Internet Explorer 7"),
                    repository.FindBrowserByName("Internet Explorer 8"),
                    repository.FindBrowserByName("Internet Explorer 9"),
                    repository.FindBrowserByName("FIREFOX"),
                    repository.FindBrowserByName("CHROME"),
                    repository.FindBrowserByName("SAFARI")
                },
                LicenceTypeMinimum = repository.FindLicenceTypeMinimumByName(1),
                LicenceTypeMaximum = repository.FindLicenceTypeMaximumByName(16384),
                Languages = new List<Language>()
                {
                    repository.FindLanguageByName("ENGLISH")
                },
                SupportTypes = new List<SupportType>()
                {
                    repository.FindSupportTypeByName("ONLINE"),
                    repository.FindSupportTypeByName("TELEPHONE")
                },
                SupportHours = repository.FindSupportHoursByName("12 HOURS"),
                SupportDays = repository.FindSupportDaysByName("MON-FRI"),
                SupportTerritories = new List<SupportTerritory>()
                {
                    repository.FindSupportTerritoryByName("UK"),
                },
                VideoTrainingSupport = true,
                CloudApplicationFeatures = new List<CloudApplicationFeature>()
                {
                    repository.FindFeatureByName("UNLIMITED CONTACTS"),
                    //repository.FindFeatureByName("UNLIMITED STORAGE"),
                    repository.FindFeatureByName("SALES OPPORTUNITY MANAGEMENT"),
                    repository.FindFeatureByName("SALES FORECASTING"),
                    //repository.FindFeatureByName("WEB TO LEAD FORM"),
                    repository.FindFeatureByName("EMAIL MARKETING"),
                    //repository.FindFeatureByName("CAMPAIGN TRACKING AND MANAGEMENT"),
                    repository.FindFeatureByName("EMAIL INTEGRATION"),
                    //repository.FindFeatureByName("CUSTOMER HELPDESK"),
                    //repository.FindFeatureByName("CASE QUEUEING & TRACKING"),
                    //repository.FindFeatureByName("UNLIMITED CASES"),
                    repository.FindFeatureByName("DOCUMENT MANAGEMENT"),
                    repository.FindFeatureByName("CUSTOM REPORTS"),
                    repository.FindFeatureByName("FULL SSL SECURITY"),
                    //repository.FindFeatureByName("MOBILE INTEGRATION"),
                    //repository.FindFeatureByName("INVOICE CREATION & MANAGEMENT"),
                    //repository.FindFeatureByName("INVENTORY & ORDER MANAGEMENT"),
                    repository.FindFeatureByName("OPEN API/3RD PARTY INTEGRATION"),
                    //repository.FindFeatureByName("SOCIAL MEDIA INTEGRATION"),
                    repository.FindFeatureByName("USER CUSTOMIZATION"),
                },
                ApplicationCostPerMonth = 25.00M,
                CallsPackageCostPerMonth = 0M,
                SetupFee = repository.FindSetupFeeByName("NOT APPLICABLE"),
                MinimumContract = repository.FindMinimumContractByName("12 MONTHS"),
                PaymentFrequency = repository.FindPaymentFrequencyByName("MONTHLY"),
                PaymentOptions = new List<PaymentOption>()
                {
                    repository.FindPaymentOptionByName("CREDIT CARD"),
                    //repository.FindPaymentOptionByName("PRE-PAY"),
                },
                FreeTrialPeriod = repository.FindFreeTrialPeriodByName("YES"),
                Category = repository.FindCategoryByName("CUSTOMER MANAGEMENT"),
                Vendor = repository.FindVendorByName("Buddy"),
                Description = repository.GetDescription(),
                AddDate = DateTime.Now,
                #region Ratings,Reviews,Case Studies,White Papers
                Ratings = new List<CloudApplicationRating>()
                {
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                },
                Reviews = new List<CloudApplicationReview>()
                {
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                },
                ThumbnailDocuments = new List<ThumbnailDocument>()
                {
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("WHITE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_WHITE_PAPER_FILEPATH+PDF_TEST_WHITE_PAPER_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_WHITE_PAPER_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_WHITE_PAPER_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_WHITE_PAPER_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("WHITE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_WHITE_PAPER_FILEPATH+PDF_TEST_WHITE_PAPER_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_WHITE_PAPER_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_WHITE_PAPER_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_WHITE_PAPER_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("WHITE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_WHITE_PAPER_FILEPATH+PDF_TEST_WHITE_PAPER_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_WHITE_PAPER_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_WHITE_PAPER_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_WHITE_PAPER_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("CASE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_CASE_STUDY_FILEPATH+PDF_TEST_CASE_STUDY_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_CASE_STUDY_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_CASE_STUDY_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_CASE_STUDY_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("CASE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_CASE_STUDY_FILEPATH+PDF_TEST_CASE_STUDY_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_CASE_STUDY_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_CASE_STUDY_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_CASE_STUDY_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("CASE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_CASE_STUDY_FILEPATH+PDF_TEST_CASE_STUDY_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_CASE_STUDY_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_CASE_STUDY_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_CASE_STUDY_FILENAME,
                    },
                },
                #endregion
            };

            repository.AddCloudApplication(ca);
            #endregion

            #region SAGE
            ca = new CloudApplication()
            {
                Brand = "sage",
                ServiceName = "SageCRM",
                CompanyURL = "www.uksagecrm.com",
                OperatingSystems = new List<Domain.Models.OperatingSystem>()
                {
                    repository.FindOperatingSystemByName("WIN"),
                    repository.FindOperatingSystemByName("MAC"),
                    //repository.FindOperatingSystemByName("LINUX")
                },
                MobilePlatforms = new List<MobilePlatform>()
                {
                    repository.FindMobilePlatformByName("APPLE"),
                    //repository.FindMobilePlatformByName("IPHONE"),
                    //repository.FindMobilePlatformByName("BB"),
                },
                Browsers = new List<Browser>()
                {
                    repository.FindBrowserByName("Internet Explorer 6"),
                    repository.FindBrowserByName("Internet Explorer 7"),
                    repository.FindBrowserByName("Internet Explorer 8"),
                    repository.FindBrowserByName("Internet Explorer 9"),
                    repository.FindBrowserByName("FIREFOX"),
                },
                LicenceTypeMinimum = repository.FindLicenceTypeMinimumByName(1),
                LicenceTypeMaximum = repository.FindLicenceTypeMaximumByName(16384),
                Languages = new List<Language>()
                {
                    repository.FindLanguageByName("ENGLISH")
                },
                SupportTypes = new List<SupportType>()
                {
                    repository.FindSupportTypeByName("ONLINE"),
                    repository.FindSupportTypeByName("TELEPHONE")
                },
                SupportHours = repository.FindSupportHoursByName("12 HOURS"),
                SupportDays = repository.FindSupportDaysByName("MON-FRI"),
                SupportTerritories = new List<SupportTerritory>()
                {
                    repository.FindSupportTerritoryByName("UK"),
                },
                VideoTrainingSupport = true,
                CloudApplicationFeatures = new List<CloudApplicationFeature>()
                {
                    repository.FindFeatureByName("UNLIMITED CONTACTS"),
                    repository.FindFeatureByName("UNLIMITED STORAGE"),
                    repository.FindFeatureByName("SALES OPPORTUNITY MANAGEMENT"),
                    //repository.FindFeatureByName("SALES FORECASTING"),
                    //repository.FindFeatureByName("WEB TO LEAD FORM"),
                    repository.FindFeatureByName("EMAIL MARKETING"),
                    repository.FindFeatureByName("CAMPAIGN TRACKING AND MANAGEMENT"),
                    repository.FindFeatureByName("EMAIL INTEGRATION"),
                    repository.FindFeatureByName("CUSTOMER HELPDESK"),
                    repository.FindFeatureByName("CASE QUEUEING & TRACKING"),
                    repository.FindFeatureByName("UNLIMITED CASES"),
                    repository.FindFeatureByName("DOCUMENT MANAGEMENT"),
                    repository.FindFeatureByName("CUSTOM REPORTS"),
                    repository.FindFeatureByName("FULL SSL SECURITY"),
                    repository.FindFeatureByName("MOBILE INTEGRATION"),
                    //repository.FindFeatureByName("INVOICE CREATION & MANAGEMENT"),
                    //repository.FindFeatureByName("INVENTORY & ORDER MANAGEMENT"),
                    repository.FindFeatureByName("OPEN API/3RD PARTY INTEGRATION"),
                    //repository.FindFeatureByName("SOCIAL MEDIA INTEGRATION"),
                    repository.FindFeatureByName("USER CUSTOMIZATION"),
                },
                ApplicationCostPerMonth = 35.00M,
                CallsPackageCostPerMonth = 0M,
                SetupFee = repository.FindSetupFeeByName("NOT APPLICABLE"),
                MinimumContract = repository.FindMinimumContractByName("12 MONTHS"),
                PaymentFrequency = repository.FindPaymentFrequencyByName("MONTHLY"),
                PaymentOptions = new List<PaymentOption>()
                {
                    repository.FindPaymentOptionByName("CREDIT CARD"),
                    repository.FindPaymentOptionByName("INVOICE"),
                },
                FreeTrialPeriod = repository.FindFreeTrialPeriodByName("YES"),
                Category = repository.FindCategoryByName("CUSTOMER MANAGEMENT"),
                Vendor = repository.FindVendorByName("sage"),
                Description = repository.GetDescription(),
                AddDate = DateTime.Now,
                #region Ratings,Reviews,Case Studies,White Papers
                Ratings = new List<CloudApplicationRating>()
                {
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                },
                Reviews = new List<CloudApplicationReview>()
                {
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                },
                ThumbnailDocuments = new List<ThumbnailDocument>()
                {
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("WHITE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_WHITE_PAPER_FILEPATH+PDF_TEST_WHITE_PAPER_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_WHITE_PAPER_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_WHITE_PAPER_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_WHITE_PAPER_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("WHITE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_WHITE_PAPER_FILEPATH+PDF_TEST_WHITE_PAPER_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_WHITE_PAPER_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_WHITE_PAPER_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_WHITE_PAPER_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("WHITE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_WHITE_PAPER_FILEPATH+PDF_TEST_WHITE_PAPER_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_WHITE_PAPER_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_WHITE_PAPER_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_WHITE_PAPER_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("CASE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_CASE_STUDY_FILEPATH+PDF_TEST_CASE_STUDY_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_CASE_STUDY_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_CASE_STUDY_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_CASE_STUDY_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("CASE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_CASE_STUDY_FILEPATH+PDF_TEST_CASE_STUDY_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_CASE_STUDY_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_CASE_STUDY_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_CASE_STUDY_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("CASE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_CASE_STUDY_FILEPATH+PDF_TEST_CASE_STUDY_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_CASE_STUDY_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_CASE_STUDY_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_CASE_STUDY_FILENAME,
                    },
                },
                #endregion
            };

            repository.AddCloudApplication(ca);
            #endregion

            #region WEBCRM
            ca = new CloudApplication()
            {
                Brand = "webCRM",
                ServiceName = "",
                CompanyURL = "www.webcrm.com/uk",
                OperatingSystems = new List<Domain.Models.OperatingSystem>()
                {
                    repository.FindOperatingSystemByName("WIN"),
                    repository.FindOperatingSystemByName("MAC"),
                    //repository.FindOperatingSystemByName("LINUX")
                },
                MobilePlatforms = new List<MobilePlatform>()
                {
                    repository.FindMobilePlatformByName("ANDROID"),
                    repository.FindMobilePlatformByName("APPLE"),
                    //repository.FindMobilePlatformByName("BB"),
                },
                Browsers = new List<Browser>()
                {
                    repository.FindBrowserByName("Internet Explorer 6"),
                    repository.FindBrowserByName("Internet Explorer 7"),
                    repository.FindBrowserByName("Internet Explorer 8"),
                    repository.FindBrowserByName("Internet Explorer 9"),
                    repository.FindBrowserByName("FIREFOX"),
                },
                LicenceTypeMinimum = repository.FindLicenceTypeMinimumByName(2),
                LicenceTypeMaximum = repository.FindLicenceTypeMaximumByName(10),
                Languages = new List<Language>()
                {
                    repository.FindLanguageByName("ENGLISH")
                },
                SupportTypes = new List<SupportType>()
                {
                    repository.FindSupportTypeByName("ONLINE"),
                    //repository.FindSupportTypeByName("TELEPHONE")
                },
                SupportHours = repository.FindSupportHoursByName("12 HOURS"),
                SupportDays = repository.FindSupportDaysByName("MON-FRI"),
                SupportTerritories = new List<SupportTerritory>()
                {
                    repository.FindSupportTerritoryByName("UK"),
                },
                VideoTrainingSupport = true,
                CloudApplicationFeatures = new List<CloudApplicationFeature>()
                {
                    //repository.FindFeatureByName("UNLIMITED CONTACTS"),
                    //repository.FindFeatureByName("UNLIMITED STORAGE"),
                    repository.FindFeatureByName("SALES OPPORTUNITY MANAGEMENT"),
                    repository.FindFeatureByName("SALES FORECASTING"),
                    repository.FindFeatureByName("WEB TO LEAD FORM"),
                    repository.FindFeatureByName("EMAIL MARKETING"),
                    //repository.FindFeatureByName("CAMPAIGN TRACKING AND MANAGEMENT"),
                    //repository.FindFeatureByName("EMAIL INTEGRATION"),
                    //repository.FindFeatureByName("CUSTOMER HELPDESK"),
                    //repository.FindFeatureByName("CASE QUEUEING & TRACKING"),
                    //repository.FindFeatureByName("UNLIMITED CASES"),
                    repository.FindFeatureByName("DOCUMENT MANAGEMENT"),
                    repository.FindFeatureByName("CUSTOM REPORTS"),
                    repository.FindFeatureByName("FULL SSL SECURITY"),
                    repository.FindFeatureByName("MOBILE INTEGRATION"),
                    //repository.FindFeatureByName("INVOICE CREATION & MANAGEMENT"),
                    //repository.FindFeatureByName("INVENTORY & ORDER MANAGEMENT"),
                    repository.FindFeatureByName("OPEN API/3RD PARTY INTEGRATION"),
                    //repository.FindFeatureByName("SOCIAL MEDIA INTEGRATION"),
                    repository.FindFeatureByName("USER CUSTOMIZATION"),
                },
                ApplicationCostPerMonth = 15.00M,
                CallsPackageCostPerMonth = 0M,
                SetupFee = repository.FindSetupFeeByName("NOT APPLICABLE"),
                MinimumContract = repository.FindMinimumContractByName("12 MONTHS"),
                PaymentFrequency = repository.FindPaymentFrequencyByName("MONTHLY"),
                PaymentOptions = new List<PaymentOption>()
                {
                    repository.FindPaymentOptionByName("CREDIT CARD"),
                    //repository.FindPaymentOptionByName("PRE-PAY"),
                },
                FreeTrialPeriod = repository.FindFreeTrialPeriodByName("YES"),
                Category = repository.FindCategoryByName("CUSTOMER MANAGEMENT"),
                Vendor = repository.FindVendorByName("webCRM"),
                Description = repository.GetDescription(),
                AddDate = DateTime.Now,
                #region Ratings,Reviews,Case Studies,White Papers
                Ratings = new List<CloudApplicationRating>()
                {
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                },
                Reviews = new List<CloudApplicationReview>()
                {
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                },
                ThumbnailDocuments = new List<ThumbnailDocument>()
                {
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("WHITE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_WHITE_PAPER_FILEPATH+PDF_TEST_WHITE_PAPER_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_WHITE_PAPER_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_WHITE_PAPER_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_WHITE_PAPER_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("WHITE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_WHITE_PAPER_FILEPATH+PDF_TEST_WHITE_PAPER_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_WHITE_PAPER_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_WHITE_PAPER_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_WHITE_PAPER_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("WHITE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_WHITE_PAPER_FILEPATH+PDF_TEST_WHITE_PAPER_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_WHITE_PAPER_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_WHITE_PAPER_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_WHITE_PAPER_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("CASE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_CASE_STUDY_FILEPATH+PDF_TEST_CASE_STUDY_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_CASE_STUDY_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_CASE_STUDY_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_CASE_STUDY_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("CASE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_CASE_STUDY_FILEPATH+PDF_TEST_CASE_STUDY_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_CASE_STUDY_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_CASE_STUDY_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_CASE_STUDY_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("CASE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_CASE_STUDY_FILEPATH+PDF_TEST_CASE_STUDY_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_CASE_STUDY_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_CASE_STUDY_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_CASE_STUDY_FILENAME,
                    },
                },
                #endregion
            };

            repository.AddCloudApplication(ca);
            #endregion

            #region CAPSULE
            ca = new CloudApplication()
            {
                Brand = "capsule",
                ServiceName = "Professional Edition",
                CompanyURL = "www.capsulecrm.com",
                OperatingSystems = new List<Domain.Models.OperatingSystem>()
                {
                    repository.FindOperatingSystemByName("WIN"),
                    repository.FindOperatingSystemByName("MAC"),
                    repository.FindOperatingSystemByName("LINUX")
                },
                //MobilePlatforms = new List<MobilePlatform>()
                //{
                //    repository.FindMobilePlatformByName("ANDROID"),
                //    repository.FindMobilePlatformByName("IPHONE"),
                //    repository.FindMobilePlatformByName("BB"),
                //},
                Browsers = new List<Browser>()
                {
                    repository.FindBrowserByName("Internet Explorer 6"),
                    repository.FindBrowserByName("Internet Explorer 7"),
                    repository.FindBrowserByName("Internet Explorer 8"),
                    repository.FindBrowserByName("Internet Explorer 9"),
                    repository.FindBrowserByName("FIREFOX"),
                },
                LicenceTypeMinimum = repository.FindLicenceTypeMinimumByName(1),
                LicenceTypeMaximum = repository.FindLicenceTypeMaximumByName(16384),
                Languages = new List<Language>()
                {
                    repository.FindLanguageByName("ENGLISH")
                },
                SupportTypes = new List<SupportType>()
                {
                    repository.FindSupportTypeByName("EMAIL"),
                    repository.FindSupportTypeByName("FAQ")
                },
                SupportHours = repository.FindSupportHoursByName("NOT APPLICABLE"),
                SupportDays = repository.FindSupportDaysByName("NOT APPLICABLE"),
                SupportTerritories = new List<SupportTerritory>()
                {
                    repository.FindSupportTerritoryByName("UK"),
                },
                VideoTrainingSupport = true,
                CloudApplicationFeatures = new List<CloudApplicationFeature>()
                {
                    repository.FindFeatureByName("UNLIMITED CONTACTS"),
                    repository.FindFeatureByName("UNLIMITED STORAGE"),
                    repository.FindFeatureByName("SALES OPPORTUNITY MANAGEMENT"),
                    repository.FindFeatureByName("SALES FORECASTING"),
                    //repository.FindFeatureByName("WEB TO LEAD FORM"),
                    //repository.FindFeatureByName("EMAIL MARKETING"),
                    //repository.FindFeatureByName("CAMPAIGN TRACKING AND MANAGEMENT"),
                    repository.FindFeatureByName("EMAIL INTEGRATION"),
                    //repository.FindFeatureByName("CUSTOMER HELPDESK"),
                    //repository.FindFeatureByName("CASE QUEUEING & TRACKING"),
                    //repository.FindFeatureByName("UNLIMITED CASES"),
                    repository.FindFeatureByName("DOCUMENT MANAGEMENT"),
                    repository.FindFeatureByName("CUSTOM REPORTS"),
                    repository.FindFeatureByName("FULL SSL SECURITY"),
                    //repository.FindFeatureByName("MOBILE INTEGRATION"),
                    repository.FindFeatureByName("INVOICE CREATION & MANAGEMENT"),
                    //repository.FindFeatureByName("INVENTORY & ORDER MANAGEMENT"),
                    repository.FindFeatureByName("OPEN API/3RD PARTY INTEGRATION"),
                    //repository.FindFeatureByName("SOCIAL MEDIA INTEGRATION"),
                    repository.FindFeatureByName("USER CUSTOMIZATION"),
                },
                ApplicationCostPerMonth = 8.00M,
                CallsPackageCostPerMonth = 0M,
                SetupFee = repository.FindSetupFeeByName("NOT APPLICABLE"),
                MinimumContract = repository.FindMinimumContractByName("NO CONTRACT"),
                PaymentFrequency = repository.FindPaymentFrequencyByName("MONTHLY"),
                PaymentOptions = new List<PaymentOption>()
                {
                    repository.FindPaymentOptionByName("CREDIT CARD"),
                    //repository.FindPaymentOptionByName("PRE-PAY"),
                },
                FreeTrialPeriod = repository.FindFreeTrialPeriodByName("YES"),
                Category = repository.FindCategoryByName("CUSTOMER MANAGEMENT"),
                Vendor = repository.FindVendorByName("capsule"),
                Description = repository.GetDescription(),
                AddDate = DateTime.Now,
                #region Ratings,Reviews,Case Studies,White Papers
                Ratings = new List<CloudApplicationRating>()
                {
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                },
                Reviews = new List<CloudApplicationReview>()
                {
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                },
                ThumbnailDocuments = new List<ThumbnailDocument>()
                {
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("WHITE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_WHITE_PAPER_FILEPATH+PDF_TEST_WHITE_PAPER_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_WHITE_PAPER_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_WHITE_PAPER_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_WHITE_PAPER_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("WHITE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_WHITE_PAPER_FILEPATH+PDF_TEST_WHITE_PAPER_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_WHITE_PAPER_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_WHITE_PAPER_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_WHITE_PAPER_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("WHITE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_WHITE_PAPER_FILEPATH+PDF_TEST_WHITE_PAPER_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_WHITE_PAPER_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_WHITE_PAPER_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_WHITE_PAPER_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("CASE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_CASE_STUDY_FILEPATH+PDF_TEST_CASE_STUDY_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_CASE_STUDY_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_CASE_STUDY_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_CASE_STUDY_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("CASE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_CASE_STUDY_FILEPATH+PDF_TEST_CASE_STUDY_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_CASE_STUDY_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_CASE_STUDY_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_CASE_STUDY_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("CASE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_CASE_STUDY_FILEPATH+PDF_TEST_CASE_STUDY_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_CASE_STUDY_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_CASE_STUDY_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_CASE_STUDY_FILENAME,
                    },
                },
                #endregion
            };

            repository.AddCloudApplication(ca);
            #endregion

            #region SOHOOS
            ca = new CloudApplication()
            {
                Brand = "SohoOS",
                ServiceName = "Start",
                CompanyURL = "www.sohoos.com",
                OperatingSystems = new List<Domain.Models.OperatingSystem>()
                {
                    repository.FindOperatingSystemByName("WIN"),
                    repository.FindOperatingSystemByName("MAC"),
                    repository.FindOperatingSystemByName("LINUX")
                },
                MobilePlatforms = new List<MobilePlatform>()
                {
                    repository.FindMobilePlatformByName("APPLE"),
                    //repository.FindMobilePlatformByName("IPHONE"),
                    //repository.FindMobilePlatformByName("BB"),
                },
                Browsers = new List<Browser>()
                {
                    repository.FindBrowserByName("Internet Explorer 6"),
                    repository.FindBrowserByName("Internet Explorer 7"),
                    repository.FindBrowserByName("Internet Explorer 8"),
                    repository.FindBrowserByName("Internet Explorer 9"),
                    repository.FindBrowserByName("FIREFOX"),
                },
                LicenceTypeMinimum = repository.FindLicenceTypeMinimumByName(1),
                LicenceTypeMaximum = repository.FindLicenceTypeMaximumByName(16384),
                Languages = new List<Language>()
                {
                    repository.FindLanguageByName("ENGLISH")
                },
                SupportTypes = new List<SupportType>()
                {
                    repository.FindSupportTypeByName("EMAIL"),
                    repository.FindSupportTypeByName("FAQ")
                },
                SupportHours = repository.FindSupportHoursByName("NOT APPLICABLE"),
                SupportDays = repository.FindSupportDaysByName("NOT APPLICABLE"),
                SupportTerritories = new List<SupportTerritory>()
                {
                    repository.FindSupportTerritoryByName("UK"),
                },
                VideoTrainingSupport = false,
                CloudApplicationFeatures = new List<CloudApplicationFeature>()
                {
                    repository.FindFeatureByName("UNLIMITED CONTACTS"),
                    //repository.FindFeatureByName("UNLIMITED STORAGE"),
                    //repository.FindFeatureByName("SALES OPPORTUNITY MANAGEMENT"),
                    //repository.FindFeatureByName("SALES FORECASTING"),
                    repository.FindFeatureByName("WEB TO LEAD FORM"),
                    repository.FindFeatureByName("EMAIL MARKETING"),
                    repository.FindFeatureByName("CAMPAIGN TRACKING AND MANAGEMENT"),
                    repository.FindFeatureByName("EMAIL INTEGRATION"),
                    //repository.FindFeatureByName("CUSTOMER HELPDESK"),
                    //repository.FindFeatureByName("CASE QUEUEING & TRACKING"),
                    //repository.FindFeatureByName("UNLIMITED CASES"),
                    repository.FindFeatureByName("DOCUMENT MANAGEMENT"),
                    repository.FindFeatureByName("CUSTOM REPORTS"),
                    repository.FindFeatureByName("FULL SSL SECURITY"),
                    repository.FindFeatureByName("MOBILE INTEGRATION"),
                    repository.FindFeatureByName("INVOICE CREATION & MANAGEMENT"),
                    repository.FindFeatureByName("INVENTORY & ORDER MANAGEMENT"),
                    repository.FindFeatureByName("OPEN API/3RD PARTY INTEGRATION"),
                    repository.FindFeatureByName("SOCIAL MEDIA INTEGRATION"),
                    repository.FindFeatureByName("USER CUSTOMIZATION"),
                },
                ApplicationCostPerMonth = 0.00M,
                CallsPackageCostPerMonth = 0M,
                SetupFee = repository.FindSetupFeeByName("NOT APPLICABLE"),
                MinimumContract = repository.FindMinimumContractByName("NO CONTRACT"),
                PaymentFrequency = repository.FindPaymentFrequencyByName("MONTHLY"),
                PaymentOptions = new List<PaymentOption>()
                {
                    repository.FindPaymentOptionByName("CREDIT CARD"),
                    //repository.FindPaymentOptionByName("PRE-PAY"),
                },
                FreeTrialPeriod = repository.FindFreeTrialPeriodByName("YES"),
                Category = repository.FindCategoryByName("CUSTOMER MANAGEMENT"),
                Vendor = repository.FindVendorByName("SohoOS"),
                Description = repository.GetDescription(),
                AddDate = DateTime.Now,
                #region Ratings,Reviews,Case Studies,White Papers
                Ratings = new List<CloudApplicationRating>()
                {
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                },
                Reviews = new List<CloudApplicationReview>()
                {
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                },
                ThumbnailDocuments = new List<ThumbnailDocument>()
                {
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("WHITE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_WHITE_PAPER_FILEPATH+PDF_TEST_WHITE_PAPER_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_WHITE_PAPER_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_WHITE_PAPER_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_WHITE_PAPER_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("WHITE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_WHITE_PAPER_FILEPATH+PDF_TEST_WHITE_PAPER_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_WHITE_PAPER_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_WHITE_PAPER_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_WHITE_PAPER_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("WHITE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_WHITE_PAPER_FILEPATH+PDF_TEST_WHITE_PAPER_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_WHITE_PAPER_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_WHITE_PAPER_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_WHITE_PAPER_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("CASE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_CASE_STUDY_FILEPATH+PDF_TEST_CASE_STUDY_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_CASE_STUDY_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_CASE_STUDY_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_CASE_STUDY_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("CASE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_CASE_STUDY_FILEPATH+PDF_TEST_CASE_STUDY_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_CASE_STUDY_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_CASE_STUDY_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_CASE_STUDY_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("CASE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_CASE_STUDY_FILEPATH+PDF_TEST_CASE_STUDY_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_CASE_STUDY_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_CASE_STUDY_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_CASE_STUDY_FILENAME,
                    },
                },
                #endregion
            };

            repository.AddCloudApplication(ca);
            #endregion

            #endregion

            #region WEB CONFERENCING

            #region CISCO WEBEX
            ca = new CloudApplication()
            {
                Brand = "Cisco webex",
                ServiceName = "Meeting Centre",
                CompanyURL = "www.webex.co.uk",
                OperatingSystems = new List<Domain.Models.OperatingSystem>()
                {
                    repository.FindOperatingSystemByName("WIN"),
                    repository.FindOperatingSystemByName("MAC"),
                    //repository.FindOperatingSystemByName("LINUX")
                },
                //MobilePlatforms = repository.GetAllMobilePlatforms(),
                MobilePlatforms = new List<MobilePlatform>()
                {
                    repository.FindMobilePlatformByName("ANDROID"),
                    repository.FindMobilePlatformByName("IPHONE"),
                    repository.FindMobilePlatformByName("BB")
                },
                Browsers = new List<Browser>()
                {
                    repository.FindBrowserByName("Internet Explorer 6"),
                    repository.FindBrowserByName("Internet Explorer 7"),
                    repository.FindBrowserByName("Internet Explorer 8"),
                    repository.FindBrowserByName("Internet Explorer 9"),
                    repository.FindBrowserByName("FIREFOX"),
                    repository.FindBrowserByName("CHROME"),
                    repository.FindBrowserByName("SAFARI"),
                },
                LicenceTypeMinimum = repository.FindLicenceTypeMinimumByName(1),
                LicenceTypeMaximum = repository.FindLicenceTypeMaximumByName(99),
                Languages = new List<Language>()
                {
                    repository.FindLanguageByName("ENGLISH")
                },
                SupportTypes = new List<SupportType>()
                {
                    repository.FindSupportTypeByName("ONLINE"),
                    repository.FindSupportTypeByName("TELEPHONE")
                },
                SupportHours = repository.FindSupportHoursByName("24 HOURS"),
                SupportDays = repository.FindSupportDaysByName("7"),
                SupportTerritories = new List<SupportTerritory>()
                {
                    repository.FindSupportTerritoryByName("UK"),
                },
                VideoTrainingSupport = true,
                MaximumMeetingAttendees = 25,
                MaximumWebinarAttendees = 3000,
                CloudApplicationFeatures = new List<CloudApplicationFeature>()
                {
                    repository.FindFeatureByName("HIGH DEFINITION VIDEO"),
                    repository.FindFeatureByName("PRESENTER PREPARATION MODE"),
                    repository.FindFeatureByName("MULTIPLE MEETING HOSTS/CHAIRPERSON"),
                    repository.FindFeatureByName("INDIVIDUAL USAGE REPORTS"),
                    repository.FindFeatureByName("'ON THE FLY' INVITATIONS FOR ADDITIONAL PARTICIPANTS"),
                    repository.FindFeatureByName("INSTANT MEETING FUNCTION"),
                    repository.FindFeatureByName("ACTIVE SPEAKER VIDEO SWITCHING"),
                    repository.FindFeatureByName("FULL DESKTOP SHARING"),
                    repository.FindFeatureByName("SINGLE APPLICATION SHARE"),
                    repository.FindFeatureByName("UPLOAD MULTIPLE PRESENTATIONS"),
                    repository.FindFeatureByName("PRIVATE CHAT MODE"),
                    repository.FindFeatureByName("SSL SECURITY"),
                    repository.FindFeatureByName("RECORD & REPLAY SERVICE"),
                    repository.FindFeatureByName("INTERFACE COMPANY BRANDING"),
                    repository.FindFeatureByName("INACTIVITY TIME OUT"),
                    repository.FindFeatureByName("FIXED LINE & MOBILE DIAL-IN"),
                    repository.FindFeatureByName("FREE VOIP CALLING"),
                    repository.FindFeatureByName("MS OUTLOOK INTEGRATION"),
                },
                ApplicationCostPerMonth = 30.00M,
                CallsPackageCostPerMonth = 0M,
                SetupFee = repository.FindSetupFeeByName("NOT APPLICABLE"),
                MinimumContract = repository.FindMinimumContractByName("12 MONTHS"),
                PaymentFrequency = repository.FindPaymentFrequencyByName("MONTHLY"),
                PaymentOptions = new List<PaymentOption>()
                {
                    repository.FindPaymentOptionByName("CREDIT CARD"),
                    repository.FindPaymentOptionByName("PRE-PAY"),
                },
                FreeTrialPeriod = repository.FindFreeTrialPeriodByName("YES"),
                Category = repository.FindCategoryByName("WEB CONFERENCING"),
                Vendor = repository.FindVendorByName("Cisco webex"),
                Description = repository.GetDescription(),
                AddDate = DateTime.Now,
                #region Ratings,Reviews,Case Studies,White Papers
                Ratings = new List<CloudApplicationRating>()
                {
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                },
                Reviews = new List<CloudApplicationReview>()
                {
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                },
                ThumbnailDocuments = new List<ThumbnailDocument>()
                {
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("WHITE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_WHITE_PAPER_FILEPATH+PDF_TEST_WHITE_PAPER_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_WHITE_PAPER_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_WHITE_PAPER_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_WHITE_PAPER_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("WHITE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_WHITE_PAPER_FILEPATH+PDF_TEST_WHITE_PAPER_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_WHITE_PAPER_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_WHITE_PAPER_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_WHITE_PAPER_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("WHITE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_WHITE_PAPER_FILEPATH+PDF_TEST_WHITE_PAPER_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_WHITE_PAPER_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_WHITE_PAPER_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_WHITE_PAPER_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("CASE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_CASE_STUDY_FILEPATH+PDF_TEST_CASE_STUDY_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_CASE_STUDY_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_CASE_STUDY_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_CASE_STUDY_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("CASE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_CASE_STUDY_FILEPATH+PDF_TEST_CASE_STUDY_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_CASE_STUDY_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_CASE_STUDY_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_CASE_STUDY_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("CASE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_CASE_STUDY_FILEPATH+PDF_TEST_CASE_STUDY_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_CASE_STUDY_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_CASE_STUDY_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_CASE_STUDY_FILENAME,
                    },
                },
                #endregion
            };

            repository.AddCloudApplication(ca);

            #endregion

            #region GOTOMEETING
            ca = new CloudApplication()
            {
                Brand = "GoToMeeting",
                ServiceName = "Go-To-Meeting Flat Plan",
                CompanyURL = "www.gotomeeting.co.uk",
                OperatingSystems = new List<Domain.Models.OperatingSystem>()
                {
                    repository.FindOperatingSystemByName("WIN"),
                    repository.FindOperatingSystemByName("MAC"),
                    //repository.FindOperatingSystemByName("LINUX")
                },
                //MobilePlatforms = repository.GetAllMobilePlatforms(),
                MobilePlatforms = new List<MobilePlatform>()
                {
                    repository.FindMobilePlatformByName("ANDROID"),
                    repository.FindMobilePlatformByName("IPHONE"),
                    repository.FindMobilePlatformByName("BB")
                },
                Browsers = new List<Browser>()
                {
                    repository.FindBrowserByName("Internet Explorer 6"),
                    repository.FindBrowserByName("Internet Explorer 7"),
                    repository.FindBrowserByName("Internet Explorer 8"),
                    repository.FindBrowserByName("Internet Explorer 9"),
                    repository.FindBrowserByName("FIREFOX"),
                    repository.FindBrowserByName("CHROME"),
                    repository.FindBrowserByName("SAFARI"),
                },
                LicenceTypeMinimum = repository.FindLicenceTypeMinimumByName(1),
                LicenceTypeMaximum = repository.FindLicenceTypeMaximumByName(99),
                Languages = new List<Language>()
                {
                    repository.FindLanguageByName("ENGLISH")
                },
                SupportTypes = new List<SupportType>()
                {
                    repository.FindSupportTypeByName("ONLINE"),
                    repository.FindSupportTypeByName("TELEPHONE")
                },
                SupportHours = repository.FindSupportHoursByName("24 HOURS"),
                SupportDays = repository.FindSupportDaysByName("7"),
                SupportTerritories = new List<SupportTerritory>()
                {
                    repository.FindSupportTerritoryByName("UK"),
                },
                VideoTrainingSupport = true,
                MaximumMeetingAttendees = 25,
                MaximumWebinarAttendees = 1000,
                CloudApplicationFeatures = new List<CloudApplicationFeature>()
                {
                    repository.FindFeatureByName("HIGH DEFINITION VIDEO"),
                    repository.FindFeatureByName("PRESENTER PREPARATION MODE"),
                    //repository.FindFeatureByName("MULTIPLE MEETING HOSTS/CHAIRMAN"),
                    //repository.FindFeatureByName("INDIVIDUAL USAGE REPORTS"),
                    repository.FindFeatureByName("'ON THE FLY' INVITATIONS FOR ADDITIONAL PARTICIPANTS"),
                    repository.FindFeatureByName("INSTANT MEETING FUNCTION"),
                    //repository.FindFeatureByName("ACTIVE SPEAKER VIDEO SWITCHING"),
                    repository.FindFeatureByName("FULL DESKTOP SHARING"),
                    repository.FindFeatureByName("SINGLE APPLICATION SHARE"),
                    repository.FindFeatureByName("UPLOAD MULTIPLE PRESENTATIONS"),
                    repository.FindFeatureByName("PRIVATE CHAT MODE"),
                    repository.FindFeatureByName("SSL SECURITY"),
                    repository.FindFeatureByName("RECORD & REPLAY SERVICE"),
                    //repository.FindFeatureByName("INTERFACE COMPANY BRANDING"),
                    repository.FindFeatureByName("INACTIVITY TIME OUT"),
                    repository.FindFeatureByName("FIXED LINE & MOBILE DIAL-IN"),
                    repository.FindFeatureByName("FREE VOIP CALLING"),
                    repository.FindFeatureByName("MS OUTLOOK INTEGRATION"),
                },
                ApplicationCostPerMonth = 29.00M,
                CallsPackageCostPerMonth = 0M,
                SetupFee = repository.FindSetupFeeByName("NOT APPLICABLE"),
                MinimumContract = repository.FindMinimumContractByName("12 MONTHS"),
                PaymentFrequency = repository.FindPaymentFrequencyByName("MONTHLY"),
                PaymentOptions = new List<PaymentOption>()
                {
                    repository.FindPaymentOptionByName("CREDIT CARD"),
                    repository.FindPaymentOptionByName("PRE-PAY"),
                },
                FreeTrialPeriod = repository.FindFreeTrialPeriodByName("YES"),
                Category = repository.FindCategoryByName("WEB CONFERENCING"),
                Vendor = repository.FindVendorByName("GoToMeeting"),
                Description = repository.GetDescription(),
                AddDate = DateTime.Now,
                #region Ratings,Reviews,Case Studies,White Papers
                Ratings = new List<CloudApplicationRating>()
                {
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                },
                Reviews = new List<CloudApplicationReview>()
                {
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                },
                ThumbnailDocuments = new List<ThumbnailDocument>()
                {
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("WHITE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_WHITE_PAPER_FILEPATH+PDF_TEST_WHITE_PAPER_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_WHITE_PAPER_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_WHITE_PAPER_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_WHITE_PAPER_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("WHITE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_WHITE_PAPER_FILEPATH+PDF_TEST_WHITE_PAPER_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_WHITE_PAPER_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_WHITE_PAPER_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_WHITE_PAPER_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("WHITE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_WHITE_PAPER_FILEPATH+PDF_TEST_WHITE_PAPER_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_WHITE_PAPER_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_WHITE_PAPER_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_WHITE_PAPER_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("CASE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_CASE_STUDY_FILEPATH+PDF_TEST_CASE_STUDY_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_CASE_STUDY_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_CASE_STUDY_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_CASE_STUDY_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("CASE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_CASE_STUDY_FILEPATH+PDF_TEST_CASE_STUDY_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_CASE_STUDY_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_CASE_STUDY_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_CASE_STUDY_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("CASE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_CASE_STUDY_FILEPATH+PDF_TEST_CASE_STUDY_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_CASE_STUDY_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_CASE_STUDY_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_CASE_STUDY_FILENAME,
                    },
                },
                #endregion
            };

            repository.AddCloudApplication(ca);

            #endregion

            #region MICROSOFT LYNC ONLINE
            ca = new CloudApplication()
            {
                Brand = "Microsoft Lync Online",
                ServiceName = "Plan P",
                CompanyURL = "www.lync.microsoft.com",
                OperatingSystems = new List<Domain.Models.OperatingSystem>()
                {
                    repository.FindOperatingSystemByName("WIN"),
                    repository.FindOperatingSystemByName("MAC"),
                    //repository.FindOperatingSystemByName("LINUX")
                },
                //MobilePlatforms = repository.GetAllMobilePlatforms(),
                //MobilePlatforms = new List<MobilePlatform>()
                //{
                //    repository.FindMobilePlatformByName("ANDROID"),
                //    repository.FindMobilePlatformByName("IPHONE"),
                //    repository.FindMobilePlatformByName("BB")
                //},
                Browsers = new List<Browser>()
                {
                    repository.FindBrowserByName("Internet Explorer 6"),
                    repository.FindBrowserByName("Internet Explorer 7"),
                    repository.FindBrowserByName("Internet Explorer 8"),
                    repository.FindBrowserByName("Internet Explorer 9"),
                    repository.FindBrowserByName("FIREFOX"),
                    repository.FindBrowserByName("CHROME"),
                    repository.FindBrowserByName("SAFARI"),
                },
                LicenceTypeMinimum = repository.FindLicenceTypeMinimumByName(1),
                LicenceTypeMaximum = repository.FindLicenceTypeMaximumByName(9),
                Languages = new List<Language>()
                {
                    repository.FindLanguageByName("ENGLISH")
                },
                SupportTypes = new List<SupportType>()
                {
                    repository.FindSupportTypeByName("ONLINE"),
                    //repository.FindSupportTypeByName("TELEPHONE")
                },
                SupportHours = repository.FindSupportHoursByName("24 HOURS"),
                SupportDays = repository.FindSupportDaysByName("7"),
                SupportTerritories = new List<SupportTerritory>()
                {
                    repository.FindSupportTerritoryByName("UK"),
                },
                VideoTrainingSupport = true,
                MaximumMeetingAttendees = 250,
                MaximumWebinarAttendees = 1000,
                CloudApplicationFeatures = new List<CloudApplicationFeature>()
                {
                    //repository.FindFeatureByName("HIGH DEFINITION VIDEO"),
                    //repository.FindFeatureByName("PRESENTER PREPARATION MODE"),
                    //repository.FindFeatureByName("MULTIPLE MEETING HOSTS/CHAIRMAN"),
                    //repository.FindFeatureByName("INDIVIDUAL USAGE REPORTS"),
                    repository.FindFeatureByName("'ON THE FLY' INVITATIONS FOR ADDITIONAL PARTICIPANTS"),
                    repository.FindFeatureByName("INSTANT MEETING FUNCTION"),
                    //repository.FindFeatureByName("ACTIVE SPEAKER VIDEO SWITCHING"),
                    repository.FindFeatureByName("FULL DESKTOP SHARING"),
                    repository.FindFeatureByName("SINGLE APPLICATION SHARE"),
                    repository.FindFeatureByName("UPLOAD MULTIPLE PRESENTATIONS"),
                    repository.FindFeatureByName("PRIVATE CHAT MODE"),
                    repository.FindFeatureByName("SSL SECURITY"),
                    //repository.FindFeatureByName("RECORD & REPLAY SERVICE"),
                    //repository.FindFeatureByName("INTERFACE COMPANY BRANDING"),
                    //repository.FindFeatureByName("INACTIVITY TIME OUT"),
                    //repository.FindFeatureByName("FIXED LINE & MOBILE DIAL-IN"),
                    repository.FindFeatureByName("FREE VOIP CALLING"),
                    repository.FindFeatureByName("MS OUTLOOK INTEGRATION"),
                },
                ApplicationCostPerMonth = 4.00M,
                CallsPackageCostPerMonth = 0M,
                SetupFee = repository.FindSetupFeeByName("NOT APPLICABLE"),
                MinimumContract = repository.FindMinimumContractByName("12 MONTHS"),
                PaymentFrequency = repository.FindPaymentFrequencyByName("MONTHLY"),
                PaymentOptions = new List<PaymentOption>()
                {
                    repository.FindPaymentOptionByName("CREDIT CARD"),
                    repository.FindPaymentOptionByName("PRE-PAY"),
                },
                FreeTrialPeriod = repository.FindFreeTrialPeriodByName("NO"),
                Category = repository.FindCategoryByName("WEB CONFERENCING"),
                Vendor = repository.FindVendorByName("Microsoft Lync Online"),
                Description = repository.GetDescription(),
                AddDate = DateTime.Now,
                #region Ratings,Reviews,Case Studies,White Papers
                Ratings = new List<CloudApplicationRating>()
                {
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                },
                Reviews = new List<CloudApplicationReview>()
                {
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                },
                ThumbnailDocuments = new List<ThumbnailDocument>()
                {
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("WHITE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_WHITE_PAPER_FILEPATH+PDF_TEST_WHITE_PAPER_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_WHITE_PAPER_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_WHITE_PAPER_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_WHITE_PAPER_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("WHITE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_WHITE_PAPER_FILEPATH+PDF_TEST_WHITE_PAPER_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_WHITE_PAPER_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_WHITE_PAPER_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_WHITE_PAPER_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("WHITE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_WHITE_PAPER_FILEPATH+PDF_TEST_WHITE_PAPER_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_WHITE_PAPER_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_WHITE_PAPER_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_WHITE_PAPER_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("CASE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_CASE_STUDY_FILEPATH+PDF_TEST_CASE_STUDY_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_CASE_STUDY_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_CASE_STUDY_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_CASE_STUDY_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("CASE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_CASE_STUDY_FILEPATH+PDF_TEST_CASE_STUDY_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_CASE_STUDY_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_CASE_STUDY_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_CASE_STUDY_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("CASE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_CASE_STUDY_FILEPATH+PDF_TEST_CASE_STUDY_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_CASE_STUDY_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_CASE_STUDY_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_CASE_STUDY_FILENAME,
                    },
                },
                #endregion
            };

            repository.AddCloudApplication(ca);

            #endregion

            #region LOTUSLIVE
            ca = new CloudApplication()
            {
                Brand = "LotusLive",
                ServiceName = "Meetings Unlimited",
                CompanyURL = "www.lotuslive.com",
                OperatingSystems = new List<Domain.Models.OperatingSystem>()
                {
                    repository.FindOperatingSystemByName("WIN"),
                    repository.FindOperatingSystemByName("MAC"),
                    //repository.FindOperatingSystemByName("LINUX")
                },
                //MobilePlatforms = repository.GetAllMobilePlatforms(),
                MobilePlatforms = new List<MobilePlatform>()
                {
                    repository.FindMobilePlatformByName("ANDROID"),
                    repository.FindMobilePlatformByName("IPHONE"),
                    repository.FindMobilePlatformByName("BB")
                },
                Browsers = new List<Browser>()
                {
                    repository.FindBrowserByName("Internet Explorer 6"),
                    repository.FindBrowserByName("Internet Explorer 7"),
                    repository.FindBrowserByName("Internet Explorer 8"),
                    repository.FindBrowserByName("Internet Explorer 9"),
                    repository.FindBrowserByName("FIREFOX"),
                    repository.FindBrowserByName("CHROME"),
                    repository.FindBrowserByName("SAFARI"),
                },
                LicenceTypeMinimum = repository.FindLicenceTypeMinimumByName(1),
                LicenceTypeMaximum = repository.FindLicenceTypeMaximumByName(99),
                Languages = new List<Language>()
                {
                    repository.FindLanguageByName("ENGLISH")
                },
                SupportTypes = new List<SupportType>()
                {
                    repository.FindSupportTypeByName("ONLINE"),
                    repository.FindSupportTypeByName("COMMUNITY")
                },
                SupportHours = repository.FindSupportHoursByName("24 HOURS"),
                SupportDays = repository.FindSupportDaysByName("7"),
                SupportTerritories = new List<SupportTerritory>()
                {
                    repository.FindSupportTerritoryByName("UK"),
                },
                VideoTrainingSupport = true,
                MaximumMeetingAttendees = 15,
                MaximumWebinarAttendees = 1000,
                CloudApplicationFeatures = new List<CloudApplicationFeature>()
                {
                    repository.FindFeatureByName("HIGH DEFINITION VIDEO"),
                    repository.FindFeatureByName("PRESENTER PREPARATION MODE"),
                    repository.FindFeatureByName("MULTIPLE MEETING HOSTS/CHAIRPERSON"),
                    //repository.FindFeatureByName("INDIVIDUAL USAGE REPORTS"),
                    repository.FindFeatureByName("'ON THE FLY' INVITATIONS FOR ADDITIONAL PARTICIPANTS"),
                    repository.FindFeatureByName("INSTANT MEETING FUNCTION"),
                    //repository.FindFeatureByName("ACTIVE SPEAKER VIDEO SWITCHING"),
                    repository.FindFeatureByName("FULL DESKTOP SHARING"),
                    repository.FindFeatureByName("SINGLE APPLICATION SHARE"),
                    repository.FindFeatureByName("UPLOAD MULTIPLE PRESENTATIONS"),
                    repository.FindFeatureByName("PRIVATE CHAT MODE"),
                    repository.FindFeatureByName("SSL SECURITY"),
                    //repository.FindFeatureByName("RECORD & REPLAY SERVICE"),
                    //repository.FindFeatureByName("INTERFACE COMPANY BRANDING"),
                    //repository.FindFeatureByName("INACTIVITY TIME OUT"),
                    repository.FindFeatureByName("FIXED LINE & MOBILE DIAL-IN"),
                    repository.FindFeatureByName("FREE VOIP CALLING"),
                    //repository.FindFeatureByName("MS OUTLOOK INTEGRATION"),
                },
                ApplicationCostPerMonth = 39.00M,
                CallsPackageCostPerMonth = 0M,
                SetupFee = repository.FindSetupFeeByName("NOT APPLICABLE"),
                MinimumContract = repository.FindMinimumContractByName("12 MONTHS"),
                PaymentFrequency = repository.FindPaymentFrequencyByName("MONTHLY"),
                PaymentOptions = new List<PaymentOption>()
                {
                    repository.FindPaymentOptionByName("CREDIT CARD"),
                    repository.FindPaymentOptionByName("PRE-PAY"),
                },
                FreeTrialPeriod = repository.FindFreeTrialPeriodByName("NO"),
                Category = repository.FindCategoryByName("WEB CONFERENCING"),
                Vendor = repository.FindVendorByName("LotusLive"),
                Description = repository.GetDescription(),
                AddDate = DateTime.Now,
                #region Ratings,Reviews,Case Studies,White Papers
                Ratings = new List<CloudApplicationRating>()
                {
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                },
                Reviews = new List<CloudApplicationReview>()
                {
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                },
                ThumbnailDocuments = new List<ThumbnailDocument>()
                {
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("WHITE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_WHITE_PAPER_FILEPATH+PDF_TEST_WHITE_PAPER_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_WHITE_PAPER_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_WHITE_PAPER_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_WHITE_PAPER_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("WHITE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_WHITE_PAPER_FILEPATH+PDF_TEST_WHITE_PAPER_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_WHITE_PAPER_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_WHITE_PAPER_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_WHITE_PAPER_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("WHITE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_WHITE_PAPER_FILEPATH+PDF_TEST_WHITE_PAPER_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_WHITE_PAPER_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_WHITE_PAPER_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_WHITE_PAPER_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("CASE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_CASE_STUDY_FILEPATH+PDF_TEST_CASE_STUDY_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_CASE_STUDY_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_CASE_STUDY_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_CASE_STUDY_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("CASE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_CASE_STUDY_FILEPATH+PDF_TEST_CASE_STUDY_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_CASE_STUDY_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_CASE_STUDY_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_CASE_STUDY_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("CASE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_CASE_STUDY_FILEPATH+PDF_TEST_CASE_STUDY_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_CASE_STUDY_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_CASE_STUDY_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_CASE_STUDY_FILENAME,
                    },
                },
                #endregion
            };

            repository.AddCloudApplication(ca);

            #endregion

            #region INFINITE
            ca = new CloudApplication()
            {
                Brand = "Infinite",
                ServiceName = "Web Conferencing",
                CompanyURL = "www.infinite conferencing.com",
                OperatingSystems = new List<Domain.Models.OperatingSystem>()
                {
                    repository.FindOperatingSystemByName("WIN"),
                    repository.FindOperatingSystemByName("MAC"),
                    //repository.FindOperatingSystemByName("LINUX")
                },
                //MobilePlatforms = repository.GetAllMobilePlatforms(),
                //MobilePlatforms = new List<MobilePlatform>()
                //{
                //    repository.FindMobilePlatformByName("ANDROID"),
                //    repository.FindMobilePlatformByName("IPHONE"),
                //    repository.FindMobilePlatformByName("BB")
                //},
                Browsers = new List<Browser>()
                {
                    repository.FindBrowserByName("Internet Explorer 6"),
                    repository.FindBrowserByName("Internet Explorer 7"),
                    repository.FindBrowserByName("Internet Explorer 8"),
                    repository.FindBrowserByName("Internet Explorer 9"),
                    repository.FindBrowserByName("FIREFOX"),
                    //repository.FindBrowserByName("CHROME"),
                    //repository.FindBrowserByName("SAFARI"),
                },
                LicenceTypeMinimum = repository.FindLicenceTypeMinimumByName(1),
                LicenceTypeMaximum = repository.FindLicenceTypeMaximumByName(9),
                Languages = new List<Language>()
                {
                    repository.FindLanguageByName("ENGLISH")
                },
                SupportTypes = new List<SupportType>()
                {
                    repository.FindSupportTypeByName("ONLINE"),
                    repository.FindSupportTypeByName("COMMUNITY")
                },
                SupportHours = repository.FindSupportHoursByName("24 HOURS"),
                SupportDays = repository.FindSupportDaysByName("7"),
                SupportTerritories = new List<SupportTerritory>()
                {
                    repository.FindSupportTerritoryByName("US"),
                },
                VideoTrainingSupport = true,
                MaximumMeetingAttendees = 1000,
                MaximumWebinarAttendees = 1000,
                CloudApplicationFeatures = new List<CloudApplicationFeature>()
                {
                    //repository.FindFeatureByName("HIGH DEFINITION VIDEO"),
                    //repository.FindFeatureByName("PRESENTER PREPARATION MODE"),
                    //repository.FindFeatureByName("MULTIPLE MEETING HOSTS/CHAIRMAN"),
                    //repository.FindFeatureByName("INDIVIDUAL USAGE REPORTS"),
                    //repository.FindFeatureByName("'ON THE FLY' INVITATIONS FOR ADDITIONAL PARTICIPANTS"),
                    repository.FindFeatureByName("INSTANT MEETING FUNCTION"),
                    //repository.FindFeatureByName("ACTIVE SPEAKER VIDEO SWITCHING"),
                    repository.FindFeatureByName("FULL DESKTOP SHARING"),
                    repository.FindFeatureByName("SINGLE APPLICATION SHARE"),
                    repository.FindFeatureByName("UPLOAD MULTIPLE PRESENTATIONS"),
                    repository.FindFeatureByName("PRIVATE CHAT MODE"),
                    repository.FindFeatureByName("SSL SECURITY"),
                    //repository.FindFeatureByName("RECORD & REPLAY SERVICE"),
                    //repository.FindFeatureByName("INTERFACE COMPANY BRANDING"),
                    //repository.FindFeatureByName("INACTIVITY TIME OUT"),
                    repository.FindFeatureByName("FIXED LINE & MOBILE DIAL-IN"),
                    repository.FindFeatureByName("FREE VOIP CALLING"),
                    //repository.FindFeatureByName("MS OUTLOOK INTEGRATION"),
                },
                ApplicationCostPerMonth = 35.00M,
                CallsPackageCostPerMonth = 0M,
                SetupFee = repository.FindSetupFeeByName("NOT APPLICABLE"),
                MinimumContract = repository.FindMinimumContractByName("12 MONTHS"),
                PaymentFrequency = repository.FindPaymentFrequencyByName("MONTHLY"),
                PaymentOptions = new List<PaymentOption>()
                {
                    repository.FindPaymentOptionByName("CREDIT CARD"),
                    repository.FindPaymentOptionByName("PRE-PAY"),
                },
                FreeTrialPeriod = repository.FindFreeTrialPeriodByName("NO"),
                Category = repository.FindCategoryByName("WEB CONFERENCING"),
                Vendor = repository.FindVendorByName("Infinite"),
                Description = repository.GetDescription(),
                AddDate = DateTime.Now,
                #region Ratings,Reviews,Case Studies,White Papers
                Ratings = new List<CloudApplicationRating>()
                {
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                },
                Reviews = new List<CloudApplicationReview>()
                {
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                },
                ThumbnailDocuments = new List<ThumbnailDocument>()
                {
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("WHITE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_WHITE_PAPER_FILEPATH+PDF_TEST_WHITE_PAPER_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_WHITE_PAPER_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_WHITE_PAPER_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_WHITE_PAPER_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("WHITE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_WHITE_PAPER_FILEPATH+PDF_TEST_WHITE_PAPER_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_WHITE_PAPER_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_WHITE_PAPER_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_WHITE_PAPER_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("WHITE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_WHITE_PAPER_FILEPATH+PDF_TEST_WHITE_PAPER_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_WHITE_PAPER_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_WHITE_PAPER_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_WHITE_PAPER_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("CASE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_CASE_STUDY_FILEPATH+PDF_TEST_CASE_STUDY_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_CASE_STUDY_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_CASE_STUDY_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_CASE_STUDY_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("CASE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_CASE_STUDY_FILEPATH+PDF_TEST_CASE_STUDY_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_CASE_STUDY_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_CASE_STUDY_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_CASE_STUDY_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("CASE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_CASE_STUDY_FILEPATH+PDF_TEST_CASE_STUDY_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_CASE_STUDY_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_CASE_STUDY_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_CASE_STUDY_FILENAME,
                    },
                },
                #endregion
            };

            repository.AddCloudApplication(ca);

            #endregion

            #region ZOHO MEETING
            ca = new CloudApplication()
            {
                Brand = "ZOHO Meeting",
                ServiceName = "Professional Meeting",
                CompanyURL = "www.zohomeeting.com",
                OperatingSystems = new List<Domain.Models.OperatingSystem>()
                {
                    repository.FindOperatingSystemByName("WIN"),
                    repository.FindOperatingSystemByName("MAC"),
                    //repository.FindOperatingSystemByName("LINUX")
                },
                //MobilePlatforms = repository.GetAllMobilePlatforms(),
                //MobilePlatforms = new List<MobilePlatform>()
                //{
                //    repository.FindMobilePlatformByName("ANDROID"),
                //    repository.FindMobilePlatformByName("IPHONE"),
                //    repository.FindMobilePlatformByName("BB")
                //},
                Browsers = new List<Browser>()
                {
                    repository.FindBrowserByName("Internet Explorer 6"),
                    repository.FindBrowserByName("Internet Explorer 7"),
                    repository.FindBrowserByName("Internet Explorer 8"),
                    repository.FindBrowserByName("Internet Explorer 9"),
                    repository.FindBrowserByName("FIREFOX"),
                    repository.FindBrowserByName("CHROME"),
                    repository.FindBrowserByName("SAFARI"),
                },
                LicenceTypeMinimum = repository.FindLicenceTypeMinimumByName(1),
                LicenceTypeMaximum = repository.FindLicenceTypeMaximumByName(5),
                Languages = new List<Language>()
                {
                    repository.FindLanguageByName("ENGLISH")
                },
                SupportTypes = new List<SupportType>()
                {
                    repository.FindSupportTypeByName("ONLINE"),
                    repository.FindSupportTypeByName("COMMUNITY")
                },
                SupportHours = repository.FindSupportHoursByName("24 HOURS"),
                SupportDays = repository.FindSupportDaysByName("7"),
                SupportTerritories = new List<SupportTerritory>()
                {
                    repository.FindSupportTerritoryByName("US"),
                },
                VideoTrainingSupport = true,
                MaximumMeetingAttendees = 5,
                MaximumWebinarAttendees = 0,
                CloudApplicationFeatures = new List<CloudApplicationFeature>()
                {
                    //repository.FindFeatureByName("HIGH DEFINITION VIDEO"),
                    //repository.FindFeatureByName("PRESENTER PREPARATION MODE"),
                    //repository.FindFeatureByName("MULTIPLE MEETING HOSTS/CHAIRMAN"),
                    //repository.FindFeatureByName("INDIVIDUAL USAGE REPORTS"),
                    repository.FindFeatureByName("'ON THE FLY' INVITATIONS FOR ADDITIONAL PARTICIPANTS"),
                    repository.FindFeatureByName("INSTANT MEETING FUNCTION"),
                    //repository.FindFeatureByName("ACTIVE SPEAKER VIDEO SWITCHING"),
                    repository.FindFeatureByName("FULL DESKTOP SHARING"),
                    repository.FindFeatureByName("SINGLE APPLICATION SHARE"),
                    //repository.FindFeatureByName("UPLOAD MULTIPLE PRESENTATIONS"),
                    repository.FindFeatureByName("PRIVATE CHAT MODE"),
                    repository.FindFeatureByName("SSL SECURITY"),
                    //repository.FindFeatureByName("RECORD & REPLAY SERVICE"),
                    repository.FindFeatureByName("INTERFACE COMPANY BRANDING"),
                    //repository.FindFeatureByName("INACTIVITY TIME OUT"),
                    repository.FindFeatureByName("FIXED LINE & MOBILE DIAL-IN"),
                    repository.FindFeatureByName("FREE VOIP CALLING"),
                    //repository.FindFeatureByName("MS OUTLOOK INTEGRATION"),
                },
                ApplicationCostPerMonth = 12.00M,
                CallsPackageCostPerMonth = 0M,
                SetupFee = repository.FindSetupFeeByName("NOT APPLICABLE"),
                MinimumContract = repository.FindMinimumContractByName("12 MONTHS"),
                PaymentFrequency = repository.FindPaymentFrequencyByName("MONTHLY"),
                PaymentOptions = new List<PaymentOption>()
                {
                    repository.FindPaymentOptionByName("CREDIT CARD"),
                    repository.FindPaymentOptionByName("PRE-PAY"),
                },
                FreeTrialPeriod = repository.FindFreeTrialPeriodByName("YES"),
                Category = repository.FindCategoryByName("WEB CONFERENCING"),
                Vendor = repository.FindVendorByName("ZOHO Meeting"),
                Description = repository.GetDescription(),
                AddDate = DateTime.Now,
                #region Ratings,Reviews,Case Studies,White Papers
                Ratings = new List<CloudApplicationRating>()
                {
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                },
                Reviews = new List<CloudApplicationReview>()
                {
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                },
                ThumbnailDocuments = new List<ThumbnailDocument>()
                {
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("WHITE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_WHITE_PAPER_FILEPATH+PDF_TEST_WHITE_PAPER_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_WHITE_PAPER_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_WHITE_PAPER_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_WHITE_PAPER_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("WHITE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_WHITE_PAPER_FILEPATH+PDF_TEST_WHITE_PAPER_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_WHITE_PAPER_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_WHITE_PAPER_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_WHITE_PAPER_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("WHITE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_WHITE_PAPER_FILEPATH+PDF_TEST_WHITE_PAPER_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_WHITE_PAPER_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_WHITE_PAPER_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_WHITE_PAPER_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("CASE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_CASE_STUDY_FILEPATH+PDF_TEST_CASE_STUDY_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_CASE_STUDY_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_CASE_STUDY_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_CASE_STUDY_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("CASE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_CASE_STUDY_FILEPATH+PDF_TEST_CASE_STUDY_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_CASE_STUDY_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_CASE_STUDY_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_CASE_STUDY_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("CASE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_CASE_STUDY_FILEPATH+PDF_TEST_CASE_STUDY_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_CASE_STUDY_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_CASE_STUDY_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_CASE_STUDY_FILENAME,
                    },
                },
                #endregion
            };

            repository.AddCloudApplication(ca);

            #endregion

            #region FUZE MEETING
            ca = new CloudApplication()
            {
                Brand = "FUZE Meeting",
                ServiceName = "Personal",
                CompanyURL = "www.fuzemeeting.com",
                OperatingSystems = new List<Domain.Models.OperatingSystem>()
                {
                    repository.FindOperatingSystemByName("WIN"),
                    repository.FindOperatingSystemByName("MAC"),
                    //repository.FindOperatingSystemByName("LINUX")
                },
                //MobilePlatforms = repository.GetAllMobilePlatforms(),
                MobilePlatforms = new List<MobilePlatform>()
                {
                    repository.FindMobilePlatformByName("IPAD"),
                    repository.FindMobilePlatformByName("IPHONE"),
                    repository.FindMobilePlatformByName("BB")
                },
                Browsers = new List<Browser>()
                {
                    repository.FindBrowserByName("Internet Explorer 6"),
                    repository.FindBrowserByName("Internet Explorer 7"),
                    repository.FindBrowserByName("Internet Explorer 8"),
                    repository.FindBrowserByName("Internet Explorer 9"),
                    repository.FindBrowserByName("FIREFOX"),
                    repository.FindBrowserByName("CHROME"),
                    repository.FindBrowserByName("SAFARI"),
                },
                LicenceTypeMinimum = repository.FindLicenceTypeMinimumByName(1),
                LicenceTypeMaximum = repository.FindLicenceTypeMaximumByName(99),
                Languages = new List<Language>()
                {
                    repository.FindLanguageByName("ENGLISH")
                },
                SupportTypes = new List<SupportType>()
                {
                    repository.FindSupportTypeByName("ONLINE"),
                    repository.FindSupportTypeByName("COMMUNITY")
                },
                SupportHours = repository.FindSupportHoursByName("24 HOURS"),
                SupportDays = repository.FindSupportDaysByName("7"),
                SupportTerritories = new List<SupportTerritory>()
                {
                    repository.FindSupportTerritoryByName("UK"),
                },
                VideoTrainingSupport = false,
                MaximumMeetingAttendees = 25,
                MaximumWebinarAttendees = 0,
                CloudApplicationFeatures = new List<CloudApplicationFeature>()
                {
                    //repository.FindFeatureByName("HIGH DEFINITION VIDEO"),
                    repository.FindFeatureByName("PRESENTER PREPARATION MODE"),
                    //repository.FindFeatureByName("MULTIPLE MEETING HOSTS/CHAIRMAN"),
                    //repository.FindFeatureByName("INDIVIDUAL USAGE REPORTS"),
                    repository.FindFeatureByName("'ON THE FLY' INVITATIONS FOR ADDITIONAL PARTICIPANTS"),
                    repository.FindFeatureByName("INSTANT MEETING FUNCTION"),
                    //repository.FindFeatureByName("ACTIVE SPEAKER VIDEO SWITCHING"),
                    repository.FindFeatureByName("FULL DESKTOP SHARING"),
                    repository.FindFeatureByName("SINGLE APPLICATION SHARE"),
                    repository.FindFeatureByName("UPLOAD MULTIPLE PRESENTATIONS"),
                    //repository.FindFeatureByName("PRIVATE CHAT MODE"),
                    repository.FindFeatureByName("SSL SECURITY"),
                    //repository.FindFeatureByName("RECORD & REPLAY SERVICE"),
                    //repository.FindFeatureByName("INTERFACE COMPANY BRANDING"),
                    //repository.FindFeatureByName("INACTIVITY TIME OUT"),
                    repository.FindFeatureByName("FIXED LINE & MOBILE DIAL-IN"),
                    repository.FindFeatureByName("FREE VOIP CALLING"),
                    //repository.FindFeatureByName("MS OUTLOOK INTEGRATION"),
                },
                ApplicationCostPerMonth = 29.00M,
                CallsPackageCostPerMonth = 0M,
                SetupFee = repository.FindSetupFeeByName("NOT APPLICABLE"),
                MinimumContract = repository.FindMinimumContractByName("12 MONTHS"),
                PaymentFrequency = repository.FindPaymentFrequencyByName("MONTHLY"),
                PaymentOptions = new List<PaymentOption>()
                {
                    repository.FindPaymentOptionByName("CREDIT CARD"),
                    repository.FindPaymentOptionByName("PRE-PAY"),
                },
                FreeTrialPeriod = repository.FindFreeTrialPeriodByName("YES"),
                Category = repository.FindCategoryByName("WEB CONFERENCING"),
                Vendor = repository.FindVendorByName("FUZE Meeting"),
                Description = repository.GetDescription(),
                AddDate = DateTime.Now,
                #region Ratings,Reviews,Case Studies,White Papers
                Ratings = new List<CloudApplicationRating>()
                {
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                },
                Reviews = new List<CloudApplicationReview>()
                {
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                },
                ThumbnailDocuments = new List<ThumbnailDocument>()
                {
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("WHITE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_WHITE_PAPER_FILEPATH+PDF_TEST_WHITE_PAPER_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_WHITE_PAPER_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_WHITE_PAPER_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_WHITE_PAPER_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("WHITE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_WHITE_PAPER_FILEPATH+PDF_TEST_WHITE_PAPER_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_WHITE_PAPER_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_WHITE_PAPER_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_WHITE_PAPER_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("WHITE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_WHITE_PAPER_FILEPATH+PDF_TEST_WHITE_PAPER_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_WHITE_PAPER_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_WHITE_PAPER_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_WHITE_PAPER_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("CASE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_CASE_STUDY_FILEPATH+PDF_TEST_CASE_STUDY_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_CASE_STUDY_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_CASE_STUDY_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_CASE_STUDY_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("CASE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_CASE_STUDY_FILEPATH+PDF_TEST_CASE_STUDY_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_CASE_STUDY_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_CASE_STUDY_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_CASE_STUDY_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("CASE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_CASE_STUDY_FILEPATH+PDF_TEST_CASE_STUDY_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_CASE_STUDY_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_CASE_STUDY_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_CASE_STUDY_FILENAME,
                    },
                },
                #endregion
            };

            repository.AddCloudApplication(ca);

            #endregion

            #region YUGMA P50
            ca = new CloudApplication()
            {
                Brand = "Yugma",
                ServiceName = "Yugma P50",
                CompanyURL = "www.yugma.com",
                OperatingSystems = new List<Domain.Models.OperatingSystem>()
                {
                    repository.FindOperatingSystemByName("WIN"),
                    repository.FindOperatingSystemByName("MAC"),
                    repository.FindOperatingSystemByName("LINUX")
                },
                //MobilePlatforms = repository.GetAllMobilePlatforms(),
                //MobilePlatforms = new List<MobilePlatform>()
                //{
                //    repository.FindMobilePlatformByName("ANDROID"),
                //    repository.FindMobilePlatformByName("IPHONE"),
                //    repository.FindMobilePlatformByName("BB")
                //},
                Browsers = new List<Browser>()
                {
                    repository.FindBrowserByName("Internet Explorer 6"),
                    repository.FindBrowserByName("Internet Explorer 7"),
                    repository.FindBrowserByName("Internet Explorer 8"),
                    repository.FindBrowserByName("Internet Explorer 9"),
                    repository.FindBrowserByName("FIREFOX"),
                    repository.FindBrowserByName("CHROME"),
                    repository.FindBrowserByName("SAFARI"),
                },
                LicenceTypeMinimum = repository.FindLicenceTypeMinimumByName(1),
                LicenceTypeMaximum = repository.FindLicenceTypeMaximumByName(99),
                Languages = new List<Language>()
                {
                    repository.FindLanguageByName("ENGLISH")
                },
                SupportTypes = new List<SupportType>()
                {
                    repository.FindSupportTypeByName("ONLINE"),
                    repository.FindSupportTypeByName("TELEPHONE"),
                    repository.FindSupportTypeByName("EMAIL")
                },
                SupportHours = repository.FindSupportHoursByName("9AM-5PM"),
                SupportDays = repository.FindSupportDaysByName("5"),
                SupportTerritories = new List<SupportTerritory>()
                {
                    repository.FindSupportTerritoryByName("US"),
                },
                VideoTrainingSupport = false,
                MaximumMeetingAttendees = 50,
                MaximumWebinarAttendees = 0,
                CloudApplicationFeatures = new List<CloudApplicationFeature>()
                {
                    //repository.FindFeatureByName("HIGH DEFINITION VIDEO"),
                    //repository.FindFeatureByName("PRESENTER PREPARATION MODE"),
                    //repository.FindFeatureByName("MULTIPLE MEETING HOSTS/CHAIRMAN"),
                    //repository.FindFeatureByName("INDIVIDUAL USAGE REPORTS"),
                    repository.FindFeatureByName("'ON THE FLY' INVITATIONS FOR ADDITIONAL PARTICIPANTS"),
                    repository.FindFeatureByName("INSTANT MEETING FUNCTION"),
                    //repository.FindFeatureByName("ACTIVE SPEAKER VIDEO SWITCHING"),
                    repository.FindFeatureByName("FULL DESKTOP SHARING"),
                    repository.FindFeatureByName("SINGLE APPLICATION SHARE"),
                    repository.FindFeatureByName("UPLOAD MULTIPLE PRESENTATIONS"),
                    repository.FindFeatureByName("PRIVATE CHAT MODE"),
                    repository.FindFeatureByName("SSL SECURITY"),
                    repository.FindFeatureByName("RECORD & REPLAY SERVICE"),
                    //repository.FindFeatureByName("INTERFACE COMPANY BRANDING"),
                    //repository.FindFeatureByName("INACTIVITY TIME OUT"),
                    repository.FindFeatureByName("FIXED LINE & MOBILE DIAL-IN"),
                    repository.FindFeatureByName("FREE VOIP CALLING"),
                    //repository.FindFeatureByName("MS OUTLOOK INTEGRATION"),
                },
                ApplicationCostPerMonth = 34.95M,
                CallsPackageCostPerMonth = 0M,
                SetupFee = repository.FindSetupFeeByName("NOT APPLICABLE"),
                MinimumContract = repository.FindMinimumContractByName("12 MONTHS"),
                PaymentFrequency = repository.FindPaymentFrequencyByName("MONTHLY"),
                PaymentOptions = new List<PaymentOption>()
                {
                    repository.FindPaymentOptionByName("CREDIT CARD"),
                    repository.FindPaymentOptionByName("PRE-PAY"),
                },
                FreeTrialPeriod = repository.FindFreeTrialPeriodByName("YES"),
                Category = repository.FindCategoryByName("WEB CONFERENCING"),
                Vendor = repository.FindVendorByName("Yugma"),
                Description = repository.GetDescription(),
                AddDate = DateTime.Now,
                #region Ratings,Reviews,Case Studies,White Papers
                Ratings = new List<CloudApplicationRating>()
                {
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                },
                Reviews = new List<CloudApplicationReview>()
                {
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                },
                ThumbnailDocuments = new List<ThumbnailDocument>()
                {
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("WHITE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_WHITE_PAPER_FILEPATH+PDF_TEST_WHITE_PAPER_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_WHITE_PAPER_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_WHITE_PAPER_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_WHITE_PAPER_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("WHITE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_WHITE_PAPER_FILEPATH+PDF_TEST_WHITE_PAPER_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_WHITE_PAPER_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_WHITE_PAPER_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_WHITE_PAPER_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("WHITE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_WHITE_PAPER_FILEPATH+PDF_TEST_WHITE_PAPER_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_WHITE_PAPER_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_WHITE_PAPER_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_WHITE_PAPER_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("CASE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_CASE_STUDY_FILEPATH+PDF_TEST_CASE_STUDY_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_CASE_STUDY_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_CASE_STUDY_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_CASE_STUDY_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("CASE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_CASE_STUDY_FILEPATH+PDF_TEST_CASE_STUDY_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_CASE_STUDY_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_CASE_STUDY_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_CASE_STUDY_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("CASE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_CASE_STUDY_FILEPATH+PDF_TEST_CASE_STUDY_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_CASE_STUDY_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_CASE_STUDY_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_CASE_STUDY_FILENAME,
                    },
                },
                #endregion
            };

            repository.AddCloudApplication(ca);

            #endregion

            #region POWWOWNOW
            ca = new CloudApplication()
            {
                Brand = "POWWOWNOW",
                ServiceName = "PowWowNow Plus",
                CompanyURL = "www.powwownow.com",
                OperatingSystems = new List<Domain.Models.OperatingSystem>()
                {
                    repository.FindOperatingSystemByName("WIN"),
                    repository.FindOperatingSystemByName("MAC"),
                    //repository.FindOperatingSystemByName("LINUX")
                },
                //MobilePlatforms = repository.GetAllMobilePlatforms(),
                //MobilePlatforms = new List<MobilePlatform>()
                //{
                //    repository.FindMobilePlatformByName("ANDROID"),
                //    repository.FindMobilePlatformByName("IPHONE"),
                //    repository.FindMobilePlatformByName("BB")
                //},
                Browsers = new List<Browser>()
                {
                    repository.FindBrowserByName("Internet Explorer 6"),
                    repository.FindBrowserByName("Internet Explorer 7"),
                    repository.FindBrowserByName("Internet Explorer 8"),
                    repository.FindBrowserByName("Internet Explorer 9"),
                    repository.FindBrowserByName("FIREFOX"),
                    repository.FindBrowserByName("CHROME"),
                    repository.FindBrowserByName("SAFARI"),
                },
                LicenceTypeMinimum = repository.FindLicenceTypeMinimumByName(1),
                LicenceTypeMaximum = repository.FindLicenceTypeMaximumByName(99),
                Languages = new List<Language>()
                {
                    repository.FindLanguageByName("ENGLISH")
                },
                SupportTypes = new List<SupportType>()
                {
                    repository.FindSupportTypeByName("EMAIL"),
                    repository.FindSupportTypeByName("TELEPHONE")
                },
                SupportHours = repository.FindSupportHoursByName("24 HOURS"),
                SupportDays = repository.FindSupportDaysByName("7"),
                SupportTerritories = new List<SupportTerritory>()
                {
                    repository.FindSupportTerritoryByName("UK"),
                },
                VideoTrainingSupport = true,
                MaximumMeetingAttendees = 50,
                MaximumWebinarAttendees = 1000,
                CloudApplicationFeatures = new List<CloudApplicationFeature>()
                {
                    //repository.FindFeatureByName("HIGH DEFINITION VIDEO"),
                    //repository.FindFeatureByName("PRESENTER PREPARATION MODE"),
                    repository.FindFeatureByName("MULTIPLE MEETING HOSTS/CHAIRPERSON"),
                    //repository.FindFeatureByName("INDIVIDUAL USAGE REPORTS"),
                    repository.FindFeatureByName("'ON THE FLY' INVITATIONS FOR ADDITIONAL PARTICIPANTS"),
                    repository.FindFeatureByName("INSTANT MEETING FUNCTION"),
                    //repository.FindFeatureByName("ACTIVE SPEAKER VIDEO SWITCHING"),
                    repository.FindFeatureByName("FULL DESKTOP SHARING"),
                    repository.FindFeatureByName("SINGLE APPLICATION SHARE"),
                    repository.FindFeatureByName("UPLOAD MULTIPLE PRESENTATIONS"),
                    repository.FindFeatureByName("PRIVATE CHAT MODE"),
                    repository.FindFeatureByName("SSL SECURITY"),
                    repository.FindFeatureByName("RECORD & REPLAY SERVICE"),
                    //repository.FindFeatureByName("INTERFACE COMPANY BRANDING"),
                    repository.FindFeatureByName("INACTIVITY TIME OUT"),
                    repository.FindFeatureByName("FIXED LINE & MOBILE DIAL-IN"),
                    //repository.FindFeatureByName("FREE VOIP CALLING"),
                    //repository.FindFeatureByName("MS OUTLOOK INTEGRATION"),
                },
                ApplicationCostPerMonth = 0.00M,
                CallsPackageCostPerMonth = 0M,
                SetupFee = repository.FindSetupFeeByName("NOT APPLICABLE"),
                MinimumContract = repository.FindMinimumContractByName("NOT APPLICABLE"),
                PaymentFrequency = repository.FindPaymentFrequencyByName("ON-DEMAND"),
                PaymentOptions = new List<PaymentOption>()
                {
                    repository.FindPaymentOptionByName("CREDIT CARD"),
                    //repository.FindPaymentOptionByName("PRE-PAY"),
                },
                FreeTrialPeriod = repository.FindFreeTrialPeriodByName("NO"),
                Category = repository.FindCategoryByName("WEB CONFERENCING"),
                Vendor = repository.FindVendorByName("POWWOWNOW"),
                Description = repository.GetDescription(),
                AddDate = DateTime.Now,
                #region Ratings,Reviews,Case Studies,White Papers
                Ratings = new List<CloudApplicationRating>()
                {
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                },
                Reviews = new List<CloudApplicationReview>()
                {
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                },
                ThumbnailDocuments = new List<ThumbnailDocument>()
                {
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("WHITE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_WHITE_PAPER_FILEPATH+PDF_TEST_WHITE_PAPER_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_WHITE_PAPER_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_WHITE_PAPER_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_WHITE_PAPER_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("WHITE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_WHITE_PAPER_FILEPATH+PDF_TEST_WHITE_PAPER_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_WHITE_PAPER_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_WHITE_PAPER_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_WHITE_PAPER_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("WHITE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_WHITE_PAPER_FILEPATH+PDF_TEST_WHITE_PAPER_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_WHITE_PAPER_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_WHITE_PAPER_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_WHITE_PAPER_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("CASE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_CASE_STUDY_FILEPATH+PDF_TEST_CASE_STUDY_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_CASE_STUDY_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_CASE_STUDY_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_CASE_STUDY_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("CASE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_CASE_STUDY_FILEPATH+PDF_TEST_CASE_STUDY_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_CASE_STUDY_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_CASE_STUDY_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_CASE_STUDY_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("CASE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_CASE_STUDY_FILEPATH+PDF_TEST_CASE_STUDY_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_CASE_STUDY_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_CASE_STUDY_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_CASE_STUDY_FILENAME,
                    },
                },
                #endregion
            };

            repository.AddCloudApplication(ca);

            #endregion

            #region MEGAMEETING
            ca = new CloudApplication()
            {
                Brand = "MegaMeeting",
                ServiceName = "Professional",
                CompanyURL = "www.megameeting.com",
                OperatingSystems = new List<Domain.Models.OperatingSystem>()
                {
                    repository.FindOperatingSystemByName("WIN"),
                    repository.FindOperatingSystemByName("MAC"),
                    //repository.FindOperatingSystemByName("LINUX")
                },
                //MobilePlatforms = repository.GetAllMobilePlatforms(),
                //MobilePlatforms = new List<MobilePlatform>()
                //{
                //    repository.FindMobilePlatformByName("ANDROID"),
                //    repository.FindMobilePlatformByName("IPHONE"),
                //    repository.FindMobilePlatformByName("BB")
                //},
                Browsers = new List<Browser>()
                {
                    repository.FindBrowserByName("Internet Explorer 6"),
                    repository.FindBrowserByName("Internet Explorer 7"),
                    repository.FindBrowserByName("Internet Explorer 8"),
                    repository.FindBrowserByName("Internet Explorer 9"),
                    repository.FindBrowserByName("FIREFOX"),
                    repository.FindBrowserByName("CHROME"),
                    repository.FindBrowserByName("SAFARI"),
                },
                LicenceTypeMinimum = repository.FindLicenceTypeMinimumByName(2),
                LicenceTypeMaximum = repository.FindLicenceTypeMaximumByName(2),
                Languages = new List<Language>()
                {
                    repository.FindLanguageByName("ENGLISH")
                },
                SupportTypes = new List<SupportType>()
                {
                    repository.FindSupportTypeByName("ONLINE"),
                    //repository.FindSupportTypeByName("TELEPHONE")
                },
                SupportHours = repository.FindSupportHoursByName("24 HOURS"),
                SupportDays = repository.FindSupportDaysByName("7"),
                SupportTerritories = new List<SupportTerritory>()
                {
                    repository.FindSupportTerritoryByName("US"),
                },
                VideoTrainingSupport = true,
                MaximumMeetingAttendees = 16384,
                MaximumWebinarAttendees = 0,
                CloudApplicationFeatures = new List<CloudApplicationFeature>()
                {
                    repository.FindFeatureByName("HIGH DEFINITION VIDEO"),
                    repository.FindFeatureByName("PRESENTER PREPARATION MODE"),
                    repository.FindFeatureByName("MULTIPLE MEETING HOSTS/CHAIRPERSON"),
                    repository.FindFeatureByName("INDIVIDUAL USAGE REPORTS"),
                    repository.FindFeatureByName("'ON THE FLY' INVITATIONS FOR ADDITIONAL PARTICIPANTS"),
                    repository.FindFeatureByName("INSTANT MEETING FUNCTION"),
                    //repository.FindFeatureByName("ACTIVE SPEAKER VIDEO SWITCHING"),
                    repository.FindFeatureByName("FULL DESKTOP SHARING"),
                    repository.FindFeatureByName("SINGLE APPLICATION SHARE"),
                    repository.FindFeatureByName("UPLOAD MULTIPLE PRESENTATIONS"),
                    repository.FindFeatureByName("PRIVATE CHAT MODE"),
                    repository.FindFeatureByName("SSL SECURITY"),
                    repository.FindFeatureByName("RECORD & REPLAY SERVICE"),
                    repository.FindFeatureByName("INTERFACE COMPANY BRANDING"),
                    repository.FindFeatureByName("INACTIVITY TIME OUT"),
                    repository.FindFeatureByName("FIXED LINE & MOBILE DIAL-IN"),
                    repository.FindFeatureByName("FREE VOIP CALLING"),
                    //repository.FindFeatureByName("MS OUTLOOK INTEGRATION"),
                },
                ApplicationCostPerMonth = 39.00M,
                CallsPackageCostPerMonth = 0M,
                SetupFee = repository.FindSetupFeeByName("NOT APPLICABLE"),
                MinimumContract = repository.FindMinimumContractByName("NO CONTRACT"),
                PaymentFrequency = repository.FindPaymentFrequencyByName("MONTHLY"),
                PaymentOptions = new List<PaymentOption>()
                {
                    repository.FindPaymentOptionByName("CREDIT CARD"),
                    repository.FindPaymentOptionByName("PRE-PAY"),
                },
                FreeTrialPeriod = repository.FindFreeTrialPeriodByName("YES"),
                Category = repository.FindCategoryByName("WEB CONFERENCING"),
                Vendor = repository.FindVendorByName("MegaMeeting"),
                Description = repository.GetDescription(),
                AddDate = DateTime.Now,
                #region Ratings,Reviews,Case Studies,White Papers
                Ratings = new List<CloudApplicationRating>()
                {
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                },
                Reviews = new List<CloudApplicationReview>()
                {
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                },
                ThumbnailDocuments = new List<ThumbnailDocument>()
                {
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("WHITE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_WHITE_PAPER_FILEPATH+PDF_TEST_WHITE_PAPER_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_WHITE_PAPER_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_WHITE_PAPER_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_WHITE_PAPER_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("WHITE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_WHITE_PAPER_FILEPATH+PDF_TEST_WHITE_PAPER_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_WHITE_PAPER_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_WHITE_PAPER_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_WHITE_PAPER_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("WHITE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_WHITE_PAPER_FILEPATH+PDF_TEST_WHITE_PAPER_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_WHITE_PAPER_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_WHITE_PAPER_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_WHITE_PAPER_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("CASE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_CASE_STUDY_FILEPATH+PDF_TEST_CASE_STUDY_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_CASE_STUDY_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_CASE_STUDY_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_CASE_STUDY_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("CASE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_CASE_STUDY_FILEPATH+PDF_TEST_CASE_STUDY_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_CASE_STUDY_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_CASE_STUDY_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_CASE_STUDY_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("CASE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_CASE_STUDY_FILEPATH+PDF_TEST_CASE_STUDY_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_CASE_STUDY_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_CASE_STUDY_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_CASE_STUDY_FILENAME,
                    },
                },
                #endregion
            };

            repository.AddCloudApplication(ca);

            #endregion

            #region MEETINGZONE
            ca = new CloudApplication()
            {
                Brand = "meetingzone",
                ServiceName = "Web Conference",
                CompanyURL = "www.meetingzone.com",
                OperatingSystems = new List<Domain.Models.OperatingSystem>()
                {
                    repository.FindOperatingSystemByName("WIN"),
                    repository.FindOperatingSystemByName("MAC"),
                    //repository.FindOperatingSystemByName("LINUX")
                },
                //MobilePlatforms = repository.GetAllMobilePlatforms(),
                //MobilePlatforms = new List<MobilePlatform>()
                //{
                //    repository.FindMobilePlatformByName("ANDROID"),
                //    repository.FindMobilePlatformByName("IPHONE"),
                //    repository.FindMobilePlatformByName("BB")
                //},
                Browsers = new List<Browser>()
                {
                    repository.FindBrowserByName("Internet Explorer 6"),
                    repository.FindBrowserByName("Internet Explorer 7"),
                    repository.FindBrowserByName("Internet Explorer 8"),
                    repository.FindBrowserByName("Internet Explorer 9"),
                    repository.FindBrowserByName("FIREFOX"),
                    repository.FindBrowserByName("CHROME"),
                    repository.FindBrowserByName("SAFARI"),
                },
                LicenceTypeMinimum = repository.FindLicenceTypeMinimumByName(1),
                LicenceTypeMaximum = repository.FindLicenceTypeMaximumByName(99),
                Languages = new List<Language>()
                {
                    repository.FindLanguageByName("ENGLISH")
                },
                SupportTypes = new List<SupportType>()
                {
                    repository.FindSupportTypeByName("ONLINE"),
                    repository.FindSupportTypeByName("TELEPHONE")
                },
                SupportHours = repository.FindSupportHoursByName("24 HOURS"),
                SupportDays = repository.FindSupportDaysByName("7"),
                SupportTerritories = new List<SupportTerritory>()
                {
                    repository.FindSupportTerritoryByName("UK"),
                },
                VideoTrainingSupport = false,
                MaximumMeetingAttendees = 16384,
                MaximumWebinarAttendees = 0,
                CloudApplicationFeatures = new List<CloudApplicationFeature>()
                {
                    //repository.FindFeatureByName("HIGH DEFINITION VIDEO"),
                    //repository.FindFeatureByName("PRESENTER PREPARATION MODE"),
                    //repository.FindFeatureByName("MULTIPLE MEETING HOSTS/CHAIRMAN"),
                    repository.FindFeatureByName("INDIVIDUAL USAGE REPORTS"),
                    repository.FindFeatureByName("'ON THE FLY' INVITATIONS FOR ADDITIONAL PARTICIPANTS"),
                    repository.FindFeatureByName("INSTANT MEETING FUNCTION"),
                    //repository.FindFeatureByName("ACTIVE SPEAKER VIDEO SWITCHING"),
                    repository.FindFeatureByName("FULL DESKTOP SHARING"),
                    repository.FindFeatureByName("SINGLE APPLICATION SHARE"),
                    repository.FindFeatureByName("UPLOAD MULTIPLE PRESENTATIONS"),
                    repository.FindFeatureByName("PRIVATE CHAT MODE"),
                    repository.FindFeatureByName("SSL SECURITY"),
                    repository.FindFeatureByName("RECORD & REPLAY SERVICE"),
                    //repository.FindFeatureByName("INTERFACE COMPANY BRANDING"),
                    //repository.FindFeatureByName("INACTIVITY TIME OUT"),
                    repository.FindFeatureByName("FIXED LINE & MOBILE DIAL-IN"),
                    //repository.FindFeatureByName("FREE VOIP CALLING"),
                    repository.FindFeatureByName("MS OUTLOOK INTEGRATION"),
                },
                ApplicationCostPerMonth = 0.00M,
                CallsPackageCostPerMonth = 0M,
                SetupFee = repository.FindSetupFeeByName("NOT APPLICABLE"),
                MinimumContract = repository.FindMinimumContractByName("NO CONTRACT"),
                PaymentFrequency = repository.FindPaymentFrequencyByName("ON-DEMAND"),
                PaymentOptions = new List<PaymentOption>()
                {
                    repository.FindPaymentOptionByName("CREDIT CARD"),
                    repository.FindPaymentOptionByName("PRE-PAY"),
                },
                FreeTrialPeriod = repository.FindFreeTrialPeriodByName("NO"),
                Category = repository.FindCategoryByName("WEB CONFERENCING"),
                Vendor = repository.FindVendorByName("meetingzone"),
                Description = repository.GetDescription(),
                AddDate = DateTime.Now,
                #region Ratings,Reviews,Case Studies,White Papers
                Ratings = new List<CloudApplicationRating>()
                {
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                },
                Reviews = new List<CloudApplicationReview>()
                {
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                },
                ThumbnailDocuments = new List<ThumbnailDocument>()
                {
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("WHITE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_WHITE_PAPER_FILEPATH+PDF_TEST_WHITE_PAPER_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_WHITE_PAPER_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_WHITE_PAPER_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_WHITE_PAPER_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("WHITE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_WHITE_PAPER_FILEPATH+PDF_TEST_WHITE_PAPER_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_WHITE_PAPER_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_WHITE_PAPER_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_WHITE_PAPER_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("WHITE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_WHITE_PAPER_FILEPATH+PDF_TEST_WHITE_PAPER_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_WHITE_PAPER_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_WHITE_PAPER_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_WHITE_PAPER_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("CASE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_CASE_STUDY_FILEPATH+PDF_TEST_CASE_STUDY_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_CASE_STUDY_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_CASE_STUDY_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_CASE_STUDY_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("CASE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_CASE_STUDY_FILEPATH+PDF_TEST_CASE_STUDY_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_CASE_STUDY_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_CASE_STUDY_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_CASE_STUDY_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("CASE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_CASE_STUDY_FILEPATH+PDF_TEST_CASE_STUDY_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_CASE_STUDY_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_CASE_STUDY_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_CASE_STUDY_FILENAME,
                    },
                },
                #endregion
            };

            repository.AddCloudApplication(ca);

            #endregion

            #region INTERCALL
            ca = new CloudApplication()
            {
                Brand = "InterCall",
                ServiceName = "Unified Meeting",
                CompanyURL = "www.intercall.com",
                OperatingSystems = new List<Domain.Models.OperatingSystem>()
                {
                    repository.FindOperatingSystemByName("WIN"),
                    repository.FindOperatingSystemByName("MAC"),
                    //repository.FindOperatingSystemByName("LINUX")
                },
                //MobilePlatforms = repository.GetAllMobilePlatforms(),
                //MobilePlatforms = new List<MobilePlatform>()
                //{
                //    repository.FindMobilePlatformByName("ANDROID"),
                //    repository.FindMobilePlatformByName("IPHONE"),
                //    repository.FindMobilePlatformByName("BB")
                //},
                Browsers = new List<Browser>()
                {
                    repository.FindBrowserByName("Internet Explorer 6"),
                    repository.FindBrowserByName("Internet Explorer 7"),
                    repository.FindBrowserByName("Internet Explorer 8"),
                    repository.FindBrowserByName("Internet Explorer 9"),
                    repository.FindBrowserByName("FIREFOX"),
                    repository.FindBrowserByName("CHROME"),
                    repository.FindBrowserByName("SAFARI"),
                },
                LicenceTypeMinimum = repository.FindLicenceTypeMinimumByName(1),
                LicenceTypeMaximum = repository.FindLicenceTypeMaximumByName(99),
                Languages = new List<Language>()
                {
                    repository.FindLanguageByName("ENGLISH")
                },
                SupportTypes = new List<SupportType>()
                {
                    repository.FindSupportTypeByName("FAQ"),
                    repository.FindSupportTypeByName("TROUBLESHOOT")
                },
                SupportHours = repository.FindSupportHoursByName("24 HOURS"),
                SupportDays = repository.FindSupportDaysByName("7"),
                SupportTerritories = new List<SupportTerritory>()
                {
                    repository.FindSupportTerritoryByName("US"),
                },
                VideoTrainingSupport = true,
                MaximumMeetingAttendees = 16384,
                MaximumWebinarAttendees = 0,
                CloudApplicationFeatures = new List<CloudApplicationFeature>()
                {
                    //repository.FindFeatureByName("HIGH DEFINITION VIDEO"),
                    repository.FindFeatureByName("PRESENTER PREPARATION MODE"),
                    repository.FindFeatureByName("MULTIPLE MEETING HOSTS/CHAIRPERSON"),
                    repository.FindFeatureByName("INDIVIDUAL USAGE REPORTS"),
                    repository.FindFeatureByName("'ON THE FLY' INVITATIONS FOR ADDITIONAL PARTICIPANTS"),
                    repository.FindFeatureByName("INSTANT MEETING FUNCTION"),
                    //repository.FindFeatureByName("ACTIVE SPEAKER VIDEO SWITCHING"),
                    repository.FindFeatureByName("FULL DESKTOP SHARING"),
                    repository.FindFeatureByName("SINGLE APPLICATION SHARE"),
                    repository.FindFeatureByName("UPLOAD MULTIPLE PRESENTATIONS"),
                    repository.FindFeatureByName("PRIVATE CHAT MODE"),
                    repository.FindFeatureByName("SSL SECURITY"),
                    repository.FindFeatureByName("RECORD & REPLAY SERVICE"),
                    repository.FindFeatureByName("INTERFACE COMPANY BRANDING"),
                    repository.FindFeatureByName("INACTIVITY TIME OUT"),
                    repository.FindFeatureByName("FIXED LINE & MOBILE DIAL-IN"),
                    repository.FindFeatureByName("FREE VOIP CALLING"),
                    repository.FindFeatureByName("MS OUTLOOK INTEGRATION"),
                },
                ApplicationCostPerMonth = 42.00M,
                CallsPackageCostPerMonth = 0M,
                SetupFee = repository.FindSetupFeeByName("NOT APPLICABLE"),
                MinimumContract = repository.FindMinimumContractByName("12 MONTHS"),
                PaymentFrequency = repository.FindPaymentFrequencyByName("MONTHLY"),
                PaymentOptions = new List<PaymentOption>()
                {
                    repository.FindPaymentOptionByName("CREDIT CARD"),
                    repository.FindPaymentOptionByName("PRE-PAY"),
                },
                FreeTrialPeriod = repository.FindFreeTrialPeriodByName("YES"),
                Category = repository.FindCategoryByName("WEB CONFERENCING"),
                Vendor = repository.FindVendorByName("InterCall"),
                Description = repository.GetDescription(),
                AddDate = DateTime.Now,
                #region Ratings,Reviews,Case Studies,White Papers
                Ratings = new List<CloudApplicationRating>()
                {
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                },
                Reviews = new List<CloudApplicationReview>()
                {
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                },
                ThumbnailDocuments = new List<ThumbnailDocument>()
                {
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("WHITE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_WHITE_PAPER_FILEPATH+PDF_TEST_WHITE_PAPER_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_WHITE_PAPER_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_WHITE_PAPER_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_WHITE_PAPER_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("WHITE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_WHITE_PAPER_FILEPATH+PDF_TEST_WHITE_PAPER_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_WHITE_PAPER_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_WHITE_PAPER_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_WHITE_PAPER_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("WHITE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_WHITE_PAPER_FILEPATH+PDF_TEST_WHITE_PAPER_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_WHITE_PAPER_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_WHITE_PAPER_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_WHITE_PAPER_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("CASE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_CASE_STUDY_FILEPATH+PDF_TEST_CASE_STUDY_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_CASE_STUDY_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_CASE_STUDY_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_CASE_STUDY_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("CASE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_CASE_STUDY_FILEPATH+PDF_TEST_CASE_STUDY_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_CASE_STUDY_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_CASE_STUDY_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_CASE_STUDY_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("CASE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_CASE_STUDY_FILEPATH+PDF_TEST_CASE_STUDY_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_CASE_STUDY_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_CASE_STUDY_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_CASE_STUDY_FILENAME,
                    },
                },
                #endregion
            };

            repository.AddCloudApplication(ca);

            #endregion

            #region ONSYNC
            ca = new CloudApplication()
            {
                Brand = "OnSync",
                ServiceName = "On-Sync Standard 50",
                CompanyURL = "www.digitalsamba.com",
                OperatingSystems = new List<Domain.Models.OperatingSystem>()
                {
                    repository.FindOperatingSystemByName("WIN"),
                    repository.FindOperatingSystemByName("MAC"),
                    //repository.FindOperatingSystemByName("LINUX")
                },
                //MobilePlatforms = repository.GetAllMobilePlatforms(),
                //MobilePlatforms = new List<MobilePlatform>()
                //{
                //    repository.FindMobilePlatformByName("ANDROID"),
                //    repository.FindMobilePlatformByName("IPHONE"),
                //    repository.FindMobilePlatformByName("BB")
                //},
                Browsers = new List<Browser>()
                {
                    repository.FindBrowserByName("Internet Explorer 6"),
                    repository.FindBrowserByName("Internet Explorer 7"),
                    repository.FindBrowserByName("Internet Explorer 8"),
                    repository.FindBrowserByName("Internet Explorer 9"),
                    repository.FindBrowserByName("FIREFOX"),
                    repository.FindBrowserByName("CHROME"),
                    repository.FindBrowserByName("SAFARI"),
                },
                LicenceTypeMinimum = repository.FindLicenceTypeMinimumByName(1),
                LicenceTypeMaximum = repository.FindLicenceTypeMaximumByName(50),
                Languages = new List<Language>()
                {
                    repository.FindLanguageByName("ENGLISH")
                },
                SupportTypes = new List<SupportType>()
                {
                    repository.FindSupportTypeByName("FAQ"),
                    repository.FindSupportTypeByName("TROUBLETICKET")
                },
                SupportHours = repository.FindSupportHoursByName("24 HOURS"),
                SupportDays = repository.FindSupportDaysByName("7"),
                SupportTerritories = new List<SupportTerritory>()
                {
                    repository.FindSupportTerritoryByName("US"),
                },
                VideoTrainingSupport = true,
                MaximumMeetingAttendees = 50,
                MaximumWebinarAttendees = 0,
                CloudApplicationFeatures = new List<CloudApplicationFeature>()
                {
                    //repository.FindFeatureByName("HIGH DEFINITION VIDEO"),
                    repository.FindFeatureByName("PRESENTER PREPARATION MODE"),
                    repository.FindFeatureByName("MULTIPLE MEETING HOSTS/CHAIRPERSON"),
                    repository.FindFeatureByName("INDIVIDUAL USAGE REPORTS"),
                    repository.FindFeatureByName("'ON THE FLY' INVITATIONS FOR ADDITIONAL PARTICIPANTS"),
                    repository.FindFeatureByName("INSTANT MEETING FUNCTION"),
                    //repository.FindFeatureByName("ACTIVE SPEAKER VIDEO SWITCHING"),
                    repository.FindFeatureByName("FULL DESKTOP SHARING"),
                    repository.FindFeatureByName("SINGLE APPLICATION SHARE"),
                    repository.FindFeatureByName("UPLOAD MULTIPLE PRESENTATIONS"),
                    repository.FindFeatureByName("PRIVATE CHAT MODE"),
                    repository.FindFeatureByName("SSL SECURITY"),
                    repository.FindFeatureByName("RECORD & REPLAY SERVICE"),
                    repository.FindFeatureByName("INTERFACE COMPANY BRANDING"),
                    repository.FindFeatureByName("INACTIVITY TIME OUT"),
                    repository.FindFeatureByName("FIXED LINE & MOBILE DIAL-IN"),
                    repository.FindFeatureByName("FREE VOIP CALLING"),
                    repository.FindFeatureByName("MS OUTLOOK INTEGRATION"),
                },
                ApplicationCostPerMonth = 75.00M,
                CallsPackageCostPerMonth = 0M,
                SetupFee = repository.FindSetupFeeByName("NOT APPLICABLE"),
                MinimumContract = repository.FindMinimumContractByName("12 MONTHS"),
                PaymentFrequency = repository.FindPaymentFrequencyByName("MONTHLY"),
                PaymentOptions = new List<PaymentOption>()
                {
                    repository.FindPaymentOptionByName("CREDIT CARD"),
                    repository.FindPaymentOptionByName("PRE-PAY"),
                },
                FreeTrialPeriod = repository.FindFreeTrialPeriodByName("YES"),
                Category = repository.FindCategoryByName("WEB CONFERENCING"),
                Vendor = repository.FindVendorByName("OnSync"),
                Description = repository.GetDescription(),
                AddDate = DateTime.Now,
                #region Ratings,Reviews,Case Studies,White Papers
                Ratings = new List<CloudApplicationRating>()
                {
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                },
                Reviews = new List<CloudApplicationReview>()
                {
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                },
                ThumbnailDocuments = new List<ThumbnailDocument>()
                {
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("WHITE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_WHITE_PAPER_FILEPATH+PDF_TEST_WHITE_PAPER_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_WHITE_PAPER_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_WHITE_PAPER_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_WHITE_PAPER_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("WHITE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_WHITE_PAPER_FILEPATH+PDF_TEST_WHITE_PAPER_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_WHITE_PAPER_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_WHITE_PAPER_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_WHITE_PAPER_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("WHITE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_WHITE_PAPER_FILEPATH+PDF_TEST_WHITE_PAPER_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_WHITE_PAPER_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_WHITE_PAPER_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_WHITE_PAPER_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("CASE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_CASE_STUDY_FILEPATH+PDF_TEST_CASE_STUDY_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_CASE_STUDY_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_CASE_STUDY_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_CASE_STUDY_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("CASE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_CASE_STUDY_FILEPATH+PDF_TEST_CASE_STUDY_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_CASE_STUDY_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_CASE_STUDY_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_CASE_STUDY_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("CASE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_CASE_STUDY_FILEPATH+PDF_TEST_CASE_STUDY_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_CASE_STUDY_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_CASE_STUDY_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_CASE_STUDY_FILENAME,
                    },
                },
                #endregion
            };

            repository.AddCloudApplication(ca);

            #endregion

            #endregion

            #region EMAIL

            #region YAHOO SMALL BUSINESS
            ca = new CloudApplication()
            {
                Brand = "YAHOO Small Business",
                ServiceName = "Business Mail",
                CompanyURL = "www.smallbusiness.yahoo.com",
                OperatingSystems = new List<Domain.Models.OperatingSystem>()
                {
                    repository.FindOperatingSystemByName("WIN"),
                    repository.FindOperatingSystemByName("MAC"),
                    repository.FindOperatingSystemByName("LINUX")
                },
                //MobilePlatforms = repository.GetAllMobilePlatforms(),
                MobilePlatforms = new List<MobilePlatform>()
                {
                    repository.FindMobilePlatformByName("ANDROID"),
                    repository.FindMobilePlatformByName("IPHONE"),
                    repository.FindMobilePlatformByName("BB")
                },
                Browsers = new List<Browser>()
                {
                    repository.FindBrowserByName("Internet Explorer 6"),
                    repository.FindBrowserByName("Internet Explorer 7"),
                    repository.FindBrowserByName("Internet Explorer 8"),
                    repository.FindBrowserByName("Internet Explorer 9"),
                    repository.FindBrowserByName("FIREFOX"),
                    repository.FindBrowserByName("CHROME"),
                    repository.FindBrowserByName("SAFARI"),
                },
                LicenceTypeMinimum = repository.FindLicenceTypeMinimumByName(1),
                LicenceTypeMaximum = repository.FindLicenceTypeMaximumByName(99),
                Languages = new List<Language>()
                {
                    repository.FindLanguageByName("ENGLISH")
                },
                SupportTypes = new List<SupportType>()
                {
                    repository.FindSupportTypeByName("PHONE"),
                    repository.FindSupportTypeByName("ONLINE")
                },
                SupportHours = repository.FindSupportHoursByName("24 HOURS"),
                SupportDays = repository.FindSupportDaysByName("7"),
                SupportTerritories = new List<SupportTerritory>()
                {
                    repository.FindSupportTerritoryByName("US"),
                },
                VideoTrainingSupport = true,
                //MaximumMeetingAttendees = 50,
                //MaximumWebinarAttendees = 0,
                CloudApplicationFeatures = new List<CloudApplicationFeature>()
                {
                    repository.FindFeatureByName("NUMBER OF MAILBOXES"),
                    repository.FindFeatureByName("STORAGE LIMIT"),
                    repository.FindFeatureByName("INDIVIDUAL FILE SIZE LIMIT"),
                    repository.FindFeatureByName("NO DAILY MAIL LIMITS"),
                    repository.FindFeatureByName("MIGRATE COMPANY DOMAIN"),
                    repository.FindFeatureByName("ANTI-VIRUS"),
                    repository.FindFeatureByName("SPAM GUARD / ANTI-PHISHING"),
                    //repository.FindFeatureByName("BLOCK ADDRESSES / BLACKLIST"),
                    repository.FindFeatureByName("ALIASES"),
                    repository.FindFeatureByName("AD-FREE"),
                    //repository.FindFeatureByName("EMAIL ARCHIVING"),
                    repository.FindFeatureByName("QUICK FILTER TOOLBAR"),
                    //repository.FindFeatureByName("SMART FOLDERS"),
                    //repository.FindFeatureByName("ACCOUNT GROUPS"),
                    //repository.FindFeatureByName("INSTANT MESSAGING"),
                    //repository.FindFeatureByName("TRACK CONVERSATIONS"),
                    //repository.FindFeatureByName("SOCIAL MEDIA INTEGRATION"),
                    //repository.FindFeatureByName("MS OUTLOOK COMPATIBLE"),
                    //repository.FindFeatureByName("EMAIL MIGRATION SERVICE"),
                    repository.FindFeatureByName("SSL SECURITY"),
                },
                ApplicationCostPerMonth = 9.95M,
                //CallsPackageCostPerMonth = 0M,
                SetupFee = repository.FindSetupFeeByName("$25.00"),
                MinimumContract = repository.FindMinimumContractByName("12 MONTHS"),
                PaymentFrequency = repository.FindPaymentFrequencyByName("MONTHLY"),
                PaymentOptions = new List<PaymentOption>()
                {
                    repository.FindPaymentOptionByName("CREDIT CARD"),
                    repository.FindPaymentOptionByName("PRE-PAY"),
                },
                FreeTrialPeriod = repository.FindFreeTrialPeriodByName("NO"),
                Category = repository.FindCategoryByName("EMAIL"),
                Vendor = repository.FindVendorByName("YAHOO Small Business"),
                Description = repository.GetDescription(),
                AddDate = DateTime.Now,
                #region Ratings,Reviews,Case Studies,White Papers
                Ratings = new List<CloudApplicationRating>()
                {
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                },
                Reviews = new List<CloudApplicationReview>()
                {
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                },
                ThumbnailDocuments = new List<ThumbnailDocument>()
                {
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("WHITE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_WHITE_PAPER_FILEPATH+PDF_TEST_WHITE_PAPER_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_WHITE_PAPER_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_WHITE_PAPER_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_WHITE_PAPER_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("WHITE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_WHITE_PAPER_FILEPATH+PDF_TEST_WHITE_PAPER_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_WHITE_PAPER_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_WHITE_PAPER_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_WHITE_PAPER_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("WHITE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_WHITE_PAPER_FILEPATH+PDF_TEST_WHITE_PAPER_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_WHITE_PAPER_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_WHITE_PAPER_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_WHITE_PAPER_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("CASE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_CASE_STUDY_FILEPATH+PDF_TEST_CASE_STUDY_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_CASE_STUDY_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_CASE_STUDY_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_CASE_STUDY_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("CASE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_CASE_STUDY_FILEPATH+PDF_TEST_CASE_STUDY_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_CASE_STUDY_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_CASE_STUDY_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_CASE_STUDY_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("CASE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_CASE_STUDY_FILEPATH+PDF_TEST_CASE_STUDY_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_CASE_STUDY_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_CASE_STUDY_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_CASE_STUDY_FILENAME,
                    },
                },
                #endregion
            };

            repository.AddCloudApplication(ca);

            #endregion

            #region MICROSOFT EXCHANGE ONLINE
            ca = new CloudApplication()
            {
                Brand = "Microsoft Exchange Online",
                ServiceName = "Exchange Online",
                CompanyURL = "www.office365.com",
                OperatingSystems = new List<Domain.Models.OperatingSystem>()
                {
                    repository.FindOperatingSystemByName("WIN"),
                    repository.FindOperatingSystemByName("MAC"),
                    //repository.FindOperatingSystemByName("LINUX")
                },
                //MobilePlatforms = repository.GetAllMobilePlatforms(),
                MobilePlatforms = new List<MobilePlatform>()
                {
                    repository.FindMobilePlatformByName("ANDROID"),
                    repository.FindMobilePlatformByName("IPHONE"),
                    repository.FindMobilePlatformByName("BB")
                },
                Browsers = new List<Browser>()
                {
                    repository.FindBrowserByName("Internet Explorer 6"),
                    repository.FindBrowserByName("Internet Explorer 7"),
                    repository.FindBrowserByName("Internet Explorer 8"),
                    repository.FindBrowserByName("Internet Explorer 9"),
                    repository.FindBrowserByName("FIREFOX"),
                    repository.FindBrowserByName("CHROME"),
                    repository.FindBrowserByName("SAFARI"),
                },
                LicenceTypeMinimum = repository.FindLicenceTypeMinimumByName(1),
                LicenceTypeMaximum = repository.FindLicenceTypeMaximumByName(9),
                Languages = new List<Language>()
                {
                    repository.FindLanguageByName("ENGLISH")
                },
                SupportTypes = new List<SupportType>()
                {
                    //repository.FindSupportTypeByName("PHONE"),
                    repository.FindSupportTypeByName("ONLINE")
                },
                SupportHours = repository.FindSupportHoursByName("24 HOURS"),
                SupportDays = repository.FindSupportDaysByName("7"),
                SupportTerritories = new List<SupportTerritory>()
                {
                    repository.FindSupportTerritoryByName("UK"),
                },
                VideoTrainingSupport = true,
                //MaximumMeetingAttendees = 50,
                //MaximumWebinarAttendees = 0,
                CloudApplicationFeatures = new List<CloudApplicationFeature>()
                {
                    repository.FindFeatureByName("NUMBER OF MAILBOXES"),
                    repository.FindFeatureByName("STORAGE LIMIT"),
                    repository.FindFeatureByName("INDIVIDUAL FILE SIZE LIMIT"),
                    repository.FindFeatureByName("NO DAILY MAIL LIMITS"),
                    repository.FindFeatureByName("MIGRATE COMPANY DOMAIN"),
                    repository.FindFeatureByName("ANTI-VIRUS"),
                    repository.FindFeatureByName("SPAM GUARD / ANTI-PHISHING"),
                    repository.FindFeatureByName("BLOCK ADDRESSES / BLACKLIST"),
                    repository.FindFeatureByName("ALIASES"),
                    repository.FindFeatureByName("AD-FREE"),
                    repository.FindFeatureByName("EMAIL ARCHIVING"),
                    repository.FindFeatureByName("QUICK FILTER TOOLBAR"),
                    //repository.FindFeatureByName("SMART FOLDERS"),
                    repository.FindFeatureByName("ACCOUNT GROUPS"),
                    repository.FindFeatureByName("INSTANT MESSAGING"),
                    //repository.FindFeatureByName("TRACK CONVERSATIONS"),
                    //repository.FindFeatureByName("SOCIAL MEDIA INTEGRATION"),
                    repository.FindFeatureByName("MS OUTLOOK COMPATIBLE"),
                    repository.FindFeatureByName("EMAIL MIGRATION SERVICE"),
                    repository.FindFeatureByName("SSL SECURITY"),
                },
                ApplicationCostPerMonth = 4.0M,
                //CallsPackageCostPerMonth = 0M,
                SetupFee = repository.FindSetupFeeByName("NOT APPLICABLE"),
                MinimumContract = repository.FindMinimumContractByName("12 MONTHS"),
                PaymentFrequency = repository.FindPaymentFrequencyByName("MONTHLY"),
                PaymentOptions = new List<PaymentOption>()
                {
                    repository.FindPaymentOptionByName("CREDIT CARD"),
                    repository.FindPaymentOptionByName("PRE-PAY"),
                },
                FreeTrialPeriod = repository.FindFreeTrialPeriodByName("NO"),
                Category = repository.FindCategoryByName("EMAIL"),
                Vendor = repository.FindVendorByName("Microsoft Exchange Online"),
                Description = repository.GetDescription(),
                AddDate = DateTime.Now,
                #region Ratings,Reviews,Case Studies,White Papers
                Ratings = new List<CloudApplicationRating>()
                {
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                },
                Reviews = new List<CloudApplicationReview>()
                {
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                },
                ThumbnailDocuments = new List<ThumbnailDocument>()
                {
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("WHITE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_WHITE_PAPER_FILEPATH+PDF_TEST_WHITE_PAPER_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_WHITE_PAPER_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_WHITE_PAPER_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_WHITE_PAPER_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("WHITE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_WHITE_PAPER_FILEPATH+PDF_TEST_WHITE_PAPER_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_WHITE_PAPER_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_WHITE_PAPER_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_WHITE_PAPER_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("WHITE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_WHITE_PAPER_FILEPATH+PDF_TEST_WHITE_PAPER_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_WHITE_PAPER_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_WHITE_PAPER_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_WHITE_PAPER_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("CASE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_CASE_STUDY_FILEPATH+PDF_TEST_CASE_STUDY_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_CASE_STUDY_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_CASE_STUDY_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_CASE_STUDY_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("CASE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_CASE_STUDY_FILEPATH+PDF_TEST_CASE_STUDY_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_CASE_STUDY_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_CASE_STUDY_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_CASE_STUDY_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("CASE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_CASE_STUDY_FILEPATH+PDF_TEST_CASE_STUDY_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_CASE_STUDY_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_CASE_STUDY_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_CASE_STUDY_FILENAME,
                    },
                },
                #endregion
            };

            repository.AddCloudApplication(ca);

            #endregion

            #region ZOHO MAIL
            ca = new CloudApplication()
            {
                Brand = "ZOHO Mail",
                ServiceName = "Standard 15Gig",
                CompanyURL = "www.zoho.com/mail",
                OperatingSystems = new List<Domain.Models.OperatingSystem>()
                {
                    repository.FindOperatingSystemByName("WIN"),
                    repository.FindOperatingSystemByName("MAC"),
                    //repository.FindOperatingSystemByName("LINUX")
                },
                //MobilePlatforms = repository.GetAllMobilePlatforms(),
                MobilePlatforms = new List<MobilePlatform>()
                {
                    repository.FindMobilePlatformByName("ANDROID"),
                    repository.FindMobilePlatformByName("IPHONE"),
                    repository.FindMobilePlatformByName("BB")
                },
                Browsers = new List<Browser>()
                {
                    repository.FindBrowserByName("Internet Explorer 6"),
                    repository.FindBrowserByName("Internet Explorer 7"),
                    repository.FindBrowserByName("Internet Explorer 8"),
                    repository.FindBrowserByName("Internet Explorer 9"),
                    repository.FindBrowserByName("FIREFOX"),
                    repository.FindBrowserByName("CHROME"),
                    repository.FindBrowserByName("SAFARI"),
                },
                LicenceTypeMinimum = repository.FindLicenceTypeMinimumByName(1),
                LicenceTypeMaximum = repository.FindLicenceTypeMaximumByName(99),
                Languages = new List<Language>()
                {
                    repository.FindLanguageByName("ENGLISH")
                },
                SupportTypes = new List<SupportType>()
                {
                    repository.FindSupportTypeByName("PHONE"),
                    repository.FindSupportTypeByName("EMAIL")
                },
                SupportHours = repository.FindSupportHoursByName("24 HOURS"),
                SupportDays = repository.FindSupportDaysByName("7"),
                SupportTerritories = new List<SupportTerritory>()
                {
                    repository.FindSupportTerritoryByName("US"),
                },
                VideoTrainingSupport = true,
                //MaximumMeetingAttendees = 50,
                //MaximumWebinarAttendees = 0,
                CloudApplicationFeatures = new List<CloudApplicationFeature>()
                {
                    repository.FindFeatureByName("NUMBER OF MAILBOXES"),
                    repository.FindFeatureByName("STORAGE LIMIT"),
                    repository.FindFeatureByName("INDIVIDUAL FILE SIZE LIMIT"),
                    repository.FindFeatureByName("NO DAILY MAIL LIMITS"),
                    repository.FindFeatureByName("MIGRATE COMPANY DOMAIN"),
                    repository.FindFeatureByName("ANTI-VIRUS"),
                    repository.FindFeatureByName("SPAM GUARD / ANTI-PHISHING"),
                    //repository.FindFeatureByName("BLOCK ADDRESSES / BLACKLIST"),
                    repository.FindFeatureByName("ALIASES"),
                    repository.FindFeatureByName("AD-FREE"),
                    //repository.FindFeatureByName("EMAIL ARCHIVING"),
                    repository.FindFeatureByName("QUICK FILTER TOOLBAR"),
                    repository.FindFeatureByName("SMART FOLDERS"),
                    repository.FindFeatureByName("ACCOUNT GROUPS"),
                    repository.FindFeatureByName("INSTANT MESSAGING"),
                    repository.FindFeatureByName("TRACK CONVERSATIONS"),
                    repository.FindFeatureByName("SOCIAL MEDIA INTEGRATION"),
                    //repository.FindFeatureByName("MS OUTLOOK COMPATIBLE"),
                    repository.FindFeatureByName("EMAIL MIGRATION SERVICE"),
                    repository.FindFeatureByName("SSL SECURITY"),
                },
                ApplicationCostPerMonth = 3.50M,
                //CallsPackageCostPerMonth = 0M,
                SetupFee = repository.FindSetupFeeByName("$25.00"),
                MinimumContract = repository.FindMinimumContractByName("NOT APPLICABLE"),
                PaymentFrequency = repository.FindPaymentFrequencyByName("MONTHLY"),
                PaymentOptions = new List<PaymentOption>()
                {
                    repository.FindPaymentOptionByName("CREDIT CARD"),
                    repository.FindPaymentOptionByName("PRE-PAY"),
                },
                FreeTrialPeriod = repository.FindFreeTrialPeriodByName("NO"),
                Category = repository.FindCategoryByName("EMAIL"),
                Vendor = repository.FindVendorByName("ZOHO Mail"),
                Description = repository.GetDescription(),
                AddDate = DateTime.Now,
                #region Ratings,Reviews,Case Studies,White Papers
                Ratings = new List<CloudApplicationRating>()
                {
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                },
                Reviews = new List<CloudApplicationReview>()
                {
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                },
                ThumbnailDocuments = new List<ThumbnailDocument>()
                {
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("WHITE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_WHITE_PAPER_FILEPATH+PDF_TEST_WHITE_PAPER_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_WHITE_PAPER_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_WHITE_PAPER_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_WHITE_PAPER_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("WHITE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_WHITE_PAPER_FILEPATH+PDF_TEST_WHITE_PAPER_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_WHITE_PAPER_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_WHITE_PAPER_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_WHITE_PAPER_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("WHITE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_WHITE_PAPER_FILEPATH+PDF_TEST_WHITE_PAPER_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_WHITE_PAPER_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_WHITE_PAPER_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_WHITE_PAPER_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("CASE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_CASE_STUDY_FILEPATH+PDF_TEST_CASE_STUDY_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_CASE_STUDY_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_CASE_STUDY_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_CASE_STUDY_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("CASE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_CASE_STUDY_FILEPATH+PDF_TEST_CASE_STUDY_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_CASE_STUDY_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_CASE_STUDY_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_CASE_STUDY_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("CASE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_CASE_STUDY_FILEPATH+PDF_TEST_CASE_STUDY_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_CASE_STUDY_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_CASE_STUDY_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_CASE_STUDY_FILENAME,
                    },
                },
                #endregion
            };

            repository.AddCloudApplication(ca);

            #endregion

            #region SMS
            ca = new CloudApplication()
            {
                Brand = "SMS",
                ServiceName = "SMSNexGen",
                CompanyURL = "www.simplymailsolutions.com",
                OperatingSystems = new List<Domain.Models.OperatingSystem>()
                {
                    repository.FindOperatingSystemByName("WIN"),
                    repository.FindOperatingSystemByName("MAC"),
                    //repository.FindOperatingSystemByName("LINUX")
                },
                //MobilePlatforms = repository.GetAllMobilePlatforms(),
                MobilePlatforms = new List<MobilePlatform>()
                {
                    repository.FindMobilePlatformByName("ANDROID"),
                    repository.FindMobilePlatformByName("IPHONE"),
                    repository.FindMobilePlatformByName("BB")
                },
                Browsers = new List<Browser>()
                {
                    repository.FindBrowserByName("Internet Explorer 6"),
                    repository.FindBrowserByName("Internet Explorer 7"),
                    repository.FindBrowserByName("Internet Explorer 8"),
                    repository.FindBrowserByName("Internet Explorer 9"),
                    repository.FindBrowserByName("FIREFOX"),
                    repository.FindBrowserByName("CHROME"),
                    repository.FindBrowserByName("SAFARI"),
                },
                LicenceTypeMinimum = repository.FindLicenceTypeMinimumByName(1),
                LicenceTypeMaximum = repository.FindLicenceTypeMaximumByName(99),
                Languages = new List<Language>()
                {
                    repository.FindLanguageByName("ENGLISH")
                },
                SupportTypes = new List<SupportType>()
                {
                    repository.FindSupportTypeByName("PHONE"),
                    repository.FindSupportTypeByName("ONLINE")
                },
                SupportHours = repository.FindSupportHoursByName("9AM-6PM"),
                SupportDays = repository.FindSupportDaysByName("MON-FRI"),
                SupportTerritories = new List<SupportTerritory>()
                {
                    repository.FindSupportTerritoryByName("UK"),
                },
                VideoTrainingSupport = false,
                //MaximumMeetingAttendees = 50,
                //MaximumWebinarAttendees = 0,
                CloudApplicationFeatures = new List<CloudApplicationFeature>()
                {
                    repository.FindFeatureByName("NUMBER OF MAILBOXES"),
                    repository.FindFeatureByName("STORAGE LIMIT"),
                    repository.FindFeatureByName("INDIVIDUAL FILE SIZE LIMIT"),
                    repository.FindFeatureByName("NO DAILY MAIL LIMITS"),
                    repository.FindFeatureByName("MIGRATE COMPANY DOMAIN"),
                    repository.FindFeatureByName("ANTI-VIRUS"),
                    repository.FindFeatureByName("SPAM GUARD / ANTI-PHISHING"),
                    repository.FindFeatureByName("BLOCK ADDRESSES / BLACKLIST"),
                    repository.FindFeatureByName("ALIASES"),
                    repository.FindFeatureByName("AD-FREE"),
                    repository.FindFeatureByName("EMAIL ARCHIVING"),
                    repository.FindFeatureByName("QUICK FILTER TOOLBAR"),
                    repository.FindFeatureByName("SMART FOLDERS"),
                    repository.FindFeatureByName("ACCOUNT GROUPS"),
                    //repository.FindFeatureByName("INSTANT MESSAGING"),
                    //repository.FindFeatureByName("TRACK CONVERSATIONS"),
                    //repository.FindFeatureByName("SOCIAL MEDIA INTEGRATION"),
                    repository.FindFeatureByName("MS OUTLOOK COMPATIBLE"),
                    repository.FindFeatureByName("EMAIL MIGRATION SERVICE"),
                    repository.FindFeatureByName("SSL SECURITY"),
                },
                ApplicationCostPerMonth = 100.0M,
                //CallsPackageCostPerMonth = 0M,
                SetupFee = repository.FindSetupFeeByName("NOT APPLICABLE"),
                MinimumContract = repository.FindMinimumContractByName("12 MONTHS"),
                PaymentFrequency = repository.FindPaymentFrequencyByName("MONTHLY"),
                PaymentOptions = new List<PaymentOption>()
                {
                    repository.FindPaymentOptionByName("CREDIT CARD"),
                    repository.FindPaymentOptionByName("PRE-PAY"),
                },
                FreeTrialPeriod = repository.FindFreeTrialPeriodByName("NO"),
                Category = repository.FindCategoryByName("EMAIL"),
                Vendor = repository.FindVendorByName("SMS"),
                Description = repository.GetDescription(),
                AddDate = DateTime.Now,
                #region Ratings,Reviews,Case Studies,White Papers
                Ratings = new List<CloudApplicationRating>()
                {
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                },
                Reviews = new List<CloudApplicationReview>()
                {
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                },
                ThumbnailDocuments = new List<ThumbnailDocument>()
                {
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("WHITE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_WHITE_PAPER_FILEPATH+PDF_TEST_WHITE_PAPER_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_WHITE_PAPER_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_WHITE_PAPER_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_WHITE_PAPER_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("WHITE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_WHITE_PAPER_FILEPATH+PDF_TEST_WHITE_PAPER_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_WHITE_PAPER_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_WHITE_PAPER_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_WHITE_PAPER_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("WHITE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_WHITE_PAPER_FILEPATH+PDF_TEST_WHITE_PAPER_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_WHITE_PAPER_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_WHITE_PAPER_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_WHITE_PAPER_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("CASE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_CASE_STUDY_FILEPATH+PDF_TEST_CASE_STUDY_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_CASE_STUDY_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_CASE_STUDY_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_CASE_STUDY_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("CASE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_CASE_STUDY_FILEPATH+PDF_TEST_CASE_STUDY_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_CASE_STUDY_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_CASE_STUDY_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_CASE_STUDY_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("CASE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_CASE_STUDY_FILEPATH+PDF_TEST_CASE_STUDY_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_CASE_STUDY_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_CASE_STUDY_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_CASE_STUDY_FILENAME,
                    },
                },
                #endregion
            };

            repository.AddCloudApplication(ca);

            #endregion

            #region BLUETIE
            ca = new CloudApplication()
            {
                Brand = "BlueTie",
                ServiceName = "Business Email",
                CompanyURL = "www.bluetie.com",
                OperatingSystems = new List<Domain.Models.OperatingSystem>()
                {
                    repository.FindOperatingSystemByName("WIN"),
                    repository.FindOperatingSystemByName("MAC"),
                    //repository.FindOperatingSystemByName("LINUX")
                },
                //MobilePlatforms = repository.GetAllMobilePlatforms(),
                MobilePlatforms = new List<MobilePlatform>()
                {
                    repository.FindMobilePlatformByName("ANDROID"),
                    repository.FindMobilePlatformByName("IPHONE"),
                    repository.FindMobilePlatformByName("BB")
                },
                Browsers = new List<Browser>()
                {
                    repository.FindBrowserByName("Internet Explorer 6"),
                    repository.FindBrowserByName("Internet Explorer 7"),
                    repository.FindBrowserByName("Internet Explorer 8"),
                    repository.FindBrowserByName("Internet Explorer 9"),
                    repository.FindBrowserByName("FIREFOX"),
                    repository.FindBrowserByName("CHROME"),
                    repository.FindBrowserByName("SAFARI"),
                },
                LicenceTypeMinimum = repository.FindLicenceTypeMinimumByName(1),
                LicenceTypeMaximum = repository.FindLicenceTypeMaximumByName(99),
                Languages = new List<Language>()
                {
                    repository.FindLanguageByName("ENGLISH")
                },
                SupportTypes = new List<SupportType>()
                {
                    //repository.FindSupportTypeByName("PHONE"),
                    repository.FindSupportTypeByName("ONLINE")
                },
                SupportHours = repository.FindSupportHoursByName("24 HOURS"),
                SupportDays = repository.FindSupportDaysByName("7"),
                SupportTerritories = new List<SupportTerritory>()
                {
                    repository.FindSupportTerritoryByName("US"),
                },
                VideoTrainingSupport = false,
                //MaximumMeetingAttendees = 50,
                //MaximumWebinarAttendees = 0,
                CloudApplicationFeatures = new List<CloudApplicationFeature>()
                {
                    repository.FindFeatureByName("NUMBER OF MAILBOXES"),
                    repository.FindFeatureByName("STORAGE LIMIT"),
                    repository.FindFeatureByName("INDIVIDUAL FILE SIZE LIMIT"),
                    repository.FindFeatureByName("NO DAILY MAIL LIMITS"),
                    repository.FindFeatureByName("MIGRATE COMPANY DOMAIN"),
                    repository.FindFeatureByName("ANTI-VIRUS"),
                    repository.FindFeatureByName("SPAM GUARD / ANTI-PHISHING"),
                    repository.FindFeatureByName("BLOCK ADDRESSES / BLACKLIST"),
                    repository.FindFeatureByName("ALIASES"),
                    repository.FindFeatureByName("AD-FREE"),
                    repository.FindFeatureByName("EMAIL ARCHIVING"),
                    repository.FindFeatureByName("QUICK FILTER TOOLBAR"),
                    repository.FindFeatureByName("SMART FOLDERS"),
                    repository.FindFeatureByName("ACCOUNT GROUPS"),
                    repository.FindFeatureByName("INSTANT MESSAGING"),
                    repository.FindFeatureByName("TRACK CONVERSATIONS"),
                    repository.FindFeatureByName("SOCIAL MEDIA INTEGRATION"),
                    repository.FindFeatureByName("MS OUTLOOK COMPATIBLE"),
                    repository.FindFeatureByName("EMAIL MIGRATION SERVICE"),
                    repository.FindFeatureByName("SSL SECURITY"),
                },
                ApplicationCostPerMonth = 5.99M,
                //CallsPackageCostPerMonth = 0M,
                SetupFee = repository.FindSetupFeeByName("NOT APPLICABLE"),
                MinimumContract = repository.FindMinimumContractByName("12 MONTHS"),
                PaymentFrequency = repository.FindPaymentFrequencyByName("MONTHLY"),
                PaymentOptions = new List<PaymentOption>()
                {
                    repository.FindPaymentOptionByName("CREDIT CARD"),
                    repository.FindPaymentOptionByName("PRE-PAY"),
                },
                FreeTrialPeriod = repository.FindFreeTrialPeriodByName("YES"),
                Category = repository.FindCategoryByName("EMAIL"),
                Vendor = repository.FindVendorByName("BlueTie"),
                Description = repository.GetDescription(),
                AddDate = DateTime.Now,
                #region Ratings,Reviews,Case Studies,White Papers
                Ratings = new List<CloudApplicationRating>()
                {
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                },
                Reviews = new List<CloudApplicationReview>()
                {
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                },
                ThumbnailDocuments = new List<ThumbnailDocument>()
                {
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("WHITE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_WHITE_PAPER_FILEPATH+PDF_TEST_WHITE_PAPER_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_WHITE_PAPER_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_WHITE_PAPER_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_WHITE_PAPER_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("WHITE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_WHITE_PAPER_FILEPATH+PDF_TEST_WHITE_PAPER_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_WHITE_PAPER_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_WHITE_PAPER_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_WHITE_PAPER_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("WHITE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_WHITE_PAPER_FILEPATH+PDF_TEST_WHITE_PAPER_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_WHITE_PAPER_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_WHITE_PAPER_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_WHITE_PAPER_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("CASE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_CASE_STUDY_FILEPATH+PDF_TEST_CASE_STUDY_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_CASE_STUDY_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_CASE_STUDY_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_CASE_STUDY_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("CASE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_CASE_STUDY_FILEPATH+PDF_TEST_CASE_STUDY_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_CASE_STUDY_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_CASE_STUDY_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_CASE_STUDY_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("CASE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_CASE_STUDY_FILEPATH+PDF_TEST_CASE_STUDY_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_CASE_STUDY_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_CASE_STUDY_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_CASE_STUDY_FILENAME,
                    },
                },
                #endregion
            };

            repository.AddCloudApplication(ca);

            #endregion

            #region GMAIL
            ca = new CloudApplication()
            {
                Brand = "GMail",
                ServiceName = "Apps For Business Flexible Plan",
                CompanyURL = "www.google.com/apps",
                OperatingSystems = new List<Domain.Models.OperatingSystem>()
                {
                    repository.FindOperatingSystemByName("WIN"),
                    repository.FindOperatingSystemByName("MAC"),
                    //repository.FindOperatingSystemByName("LINUX")
                },
                //MobilePlatforms = repository.GetAllMobilePlatforms(),
                MobilePlatforms = new List<MobilePlatform>()
                {
                    repository.FindMobilePlatformByName("ANDROID"),
                    repository.FindMobilePlatformByName("IPHONE"),
                    repository.FindMobilePlatformByName("BB")
                },
                Browsers = new List<Browser>()
                {
                    repository.FindBrowserByName("Internet Explorer 6"),
                    repository.FindBrowserByName("Internet Explorer 7"),
                    repository.FindBrowserByName("Internet Explorer 8"),
                    repository.FindBrowserByName("Internet Explorer 9"),
                    repository.FindBrowserByName("FIREFOX"),
                    repository.FindBrowserByName("CHROME"),
                    repository.FindBrowserByName("SAFARI"),
                },
                LicenceTypeMinimum = repository.FindLicenceTypeMinimumByName(1),
                LicenceTypeMaximum = repository.FindLicenceTypeMaximumByName(99),
                Languages = new List<Language>()
                {
                    repository.FindLanguageByName("ENGLISH")
                },
                SupportTypes = new List<SupportType>()
                {
                    repository.FindSupportTypeByName("PHONE"),
                    repository.FindSupportTypeByName("ONLINE")
                },
                SupportHours = repository.FindSupportHoursByName("24 HOURS"),
                SupportDays = repository.FindSupportDaysByName("7"),
                SupportTerritories = new List<SupportTerritory>()
                {
                    repository.FindSupportTerritoryByName("US"),
                },
                VideoTrainingSupport = true,
                //MaximumMeetingAttendees = 50,
                //MaximumWebinarAttendees = 0,
                CloudApplicationFeatures = new List<CloudApplicationFeature>()
                {
                    repository.FindFeatureByName("NUMBER OF MAILBOXES"),
                    repository.FindFeatureByName("STORAGE LIMIT"),
                    repository.FindFeatureByName("INDIVIDUAL FILE SIZE LIMIT"),
                    repository.FindFeatureByName("NO DAILY MAIL LIMITS"),
                    repository.FindFeatureByName("MIGRATE COMPANY DOMAIN"),
                    repository.FindFeatureByName("ANTI-VIRUS"),
                    repository.FindFeatureByName("SPAM GUARD / ANTI-PHISHING"),
                    repository.FindFeatureByName("BLOCK ADDRESSES / BLACKLIST"),
                    repository.FindFeatureByName("ALIASES"),
                    repository.FindFeatureByName("AD-FREE"),
                    repository.FindFeatureByName("EMAIL ARCHIVING"),
                    repository.FindFeatureByName("QUICK FILTER TOOLBAR"),
                    repository.FindFeatureByName("SMART FOLDERS"),
                    repository.FindFeatureByName("ACCOUNT GROUPS"),
                    repository.FindFeatureByName("INSTANT MESSAGING"),
                    repository.FindFeatureByName("TRACK CONVERSATIONS"),
                    repository.FindFeatureByName("SOCIAL MEDIA INTEGRATION"),
                    repository.FindFeatureByName("MS OUTLOOK COMPATIBLE"),
                    repository.FindFeatureByName("EMAIL MIGRATION SERVICE"),
                    repository.FindFeatureByName("SSL SECURITY"),
                },
                ApplicationCostPerMonth = 3.30M,
                //CallsPackageCostPerMonth = 0M,
                SetupFee = repository.FindSetupFeeByName("NOT APPLICABLE"),
                MinimumContract = repository.FindMinimumContractByName("NOT APPLICABLE"),
                PaymentFrequency = repository.FindPaymentFrequencyByName("MONTHLY"),
                PaymentOptions = new List<PaymentOption>()
                {
                    repository.FindPaymentOptionByName("CREDIT CARD"),
                    repository.FindPaymentOptionByName("PRE-PAY"),
                },
                FreeTrialPeriod = repository.FindFreeTrialPeriodByName("YES"),
                Category = repository.FindCategoryByName("EMAIL"),
                Vendor = repository.FindVendorByName("GMail"),
                Description = repository.GetDescription(),
                AddDate = DateTime.Now,
                #region Ratings,Reviews,Case Studies,White Papers
                Ratings = new List<CloudApplicationRating>()
                {
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                },
                Reviews = new List<CloudApplicationReview>()
                {
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                },
                ThumbnailDocuments = new List<ThumbnailDocument>()
                {
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("WHITE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_WHITE_PAPER_FILEPATH+PDF_TEST_WHITE_PAPER_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_WHITE_PAPER_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_WHITE_PAPER_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_WHITE_PAPER_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("WHITE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_WHITE_PAPER_FILEPATH+PDF_TEST_WHITE_PAPER_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_WHITE_PAPER_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_WHITE_PAPER_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_WHITE_PAPER_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("WHITE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_WHITE_PAPER_FILEPATH+PDF_TEST_WHITE_PAPER_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_WHITE_PAPER_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_WHITE_PAPER_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_WHITE_PAPER_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("CASE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_CASE_STUDY_FILEPATH+PDF_TEST_CASE_STUDY_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_CASE_STUDY_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_CASE_STUDY_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_CASE_STUDY_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("CASE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_CASE_STUDY_FILEPATH+PDF_TEST_CASE_STUDY_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_CASE_STUDY_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_CASE_STUDY_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_CASE_STUDY_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("CASE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_CASE_STUDY_FILEPATH+PDF_TEST_CASE_STUDY_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_CASE_STUDY_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_CASE_STUDY_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_CASE_STUDY_FILENAME,
                    },
                },
                #endregion
            };

            repository.AddCloudApplication(ca);

            #endregion

            #region STAR
            ca = new CloudApplication()
            {
                Brand = "Star",
                ServiceName = "Star Business Email",
                CompanyURL = "http://email.star.co.uk",
                OperatingSystems = new List<Domain.Models.OperatingSystem>()
                {
                    repository.FindOperatingSystemByName("WIN"),
                    repository.FindOperatingSystemByName("MAC"),
                    //repository.FindOperatingSystemByName("LINUX")
                },
                //MobilePlatforms = repository.GetAllMobilePlatforms(),
                MobilePlatforms = new List<MobilePlatform>()
                {
                    repository.FindMobilePlatformByName("ANDROID"),
                    repository.FindMobilePlatformByName("IPHONE"),
                    repository.FindMobilePlatformByName("BB")
                },
                Browsers = new List<Browser>()
                {
                    repository.FindBrowserByName("Internet Explorer 6"),
                    repository.FindBrowserByName("Internet Explorer 7"),
                    repository.FindBrowserByName("Internet Explorer 8"),
                    repository.FindBrowserByName("Internet Explorer 9"),
                    repository.FindBrowserByName("FIREFOX"),
                    repository.FindBrowserByName("CHROME"),
                    repository.FindBrowserByName("SAFARI"),
                },
                LicenceTypeMinimum = repository.FindLicenceTypeMinimumByName(1),
                LicenceTypeMaximum = repository.FindLicenceTypeMaximumByName(99),
                Languages = new List<Language>()
                {
                    repository.FindLanguageByName("ENGLISH")
                },
                SupportTypes = new List<SupportType>()
                {
                    repository.FindSupportTypeByName("PHONE"),
                    repository.FindSupportTypeByName("EMAIL")
                },
                SupportHours = repository.FindSupportHoursByName("24 HOURS"),
                SupportDays = repository.FindSupportDaysByName("7"),
                SupportTerritories = new List<SupportTerritory>()
                {
                    repository.FindSupportTerritoryByName("UK"),
                },
                VideoTrainingSupport = true,
                //MaximumMeetingAttendees = 50,
                //MaximumWebinarAttendees = 0,
                CloudApplicationFeatures = new List<CloudApplicationFeature>()
                {
                    repository.FindFeatureByName("NUMBER OF MAILBOXES"),
                    repository.FindFeatureByName("STORAGE LIMIT"),
                    repository.FindFeatureByName("INDIVIDUAL FILE SIZE LIMIT"),
                    repository.FindFeatureByName("NO DAILY MAIL LIMITS"),
                    repository.FindFeatureByName("MIGRATE COMPANY DOMAIN"),
                    repository.FindFeatureByName("ANTI-VIRUS"),
                    repository.FindFeatureByName("SPAM GUARD / ANTI-PHISHING"),
                    repository.FindFeatureByName("BLOCK ADDRESSES / BLACKLIST"),
                    repository.FindFeatureByName("ALIASES"),
                    repository.FindFeatureByName("AD-FREE"),
                    repository.FindFeatureByName("EMAIL ARCHIVING"),
                    repository.FindFeatureByName("QUICK FILTER TOOLBAR"),
                    //repository.FindFeatureByName("SMART FOLDERS"),
                    repository.FindFeatureByName("ACCOUNT GROUPS"),
                    repository.FindFeatureByName("INSTANT MESSAGING"),
                    //repository.FindFeatureByName("TRACK CONVERSATIONS"),
                    //repository.FindFeatureByName("SOCIAL MEDIA INTEGRATION"),
                    repository.FindFeatureByName("MS OUTLOOK COMPATIBLE"),
                    repository.FindFeatureByName("EMAIL MIGRATION SERVICE"),
                    repository.FindFeatureByName("SSL SECURITY"),
                },
                ApplicationCostPerMonth = 8.99M,
                //CallsPackageCostPerMonth = 0M,
                SetupFee = repository.FindSetupFeeByName("NOT APPLICABLE"),
                MinimumContract = repository.FindMinimumContractByName("12 MONTHS"),
                PaymentFrequency = repository.FindPaymentFrequencyByName("MONTHLY"),
                PaymentOptions = new List<PaymentOption>()
                {
                    repository.FindPaymentOptionByName("CREDIT CARD"),
                    repository.FindPaymentOptionByName("PRE-PAY"),
                },
                FreeTrialPeriod = repository.FindFreeTrialPeriodByName("NO"),
                Category = repository.FindCategoryByName("EMAIL"),
                Vendor = repository.FindVendorByName("Star"),
                Description = repository.GetDescription(),
                AddDate = DateTime.Now,
                #region Ratings,Reviews,Case Studies,White Papers
                Ratings = new List<CloudApplicationRating>()
                {
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                },
                Reviews = new List<CloudApplicationReview>()
                {
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                },
                ThumbnailDocuments = new List<ThumbnailDocument>()
                {
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("WHITE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_WHITE_PAPER_FILEPATH+PDF_TEST_WHITE_PAPER_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_WHITE_PAPER_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_WHITE_PAPER_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_WHITE_PAPER_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("WHITE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_WHITE_PAPER_FILEPATH+PDF_TEST_WHITE_PAPER_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_WHITE_PAPER_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_WHITE_PAPER_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_WHITE_PAPER_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("WHITE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_WHITE_PAPER_FILEPATH+PDF_TEST_WHITE_PAPER_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_WHITE_PAPER_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_WHITE_PAPER_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_WHITE_PAPER_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("CASE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_CASE_STUDY_FILEPATH+PDF_TEST_CASE_STUDY_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_CASE_STUDY_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_CASE_STUDY_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_CASE_STUDY_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("CASE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_CASE_STUDY_FILEPATH+PDF_TEST_CASE_STUDY_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_CASE_STUDY_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_CASE_STUDY_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_CASE_STUDY_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("CASE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_CASE_STUDY_FILEPATH+PDF_TEST_CASE_STUDY_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_CASE_STUDY_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_CASE_STUDY_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_CASE_STUDY_FILENAME,
                    },
                },
                #endregion
            };

            repository.AddCloudApplication(ca);

            #endregion

            #region HYPEROFFICE
            ca = new CloudApplication()
            {
                Brand = "HyperOffice",
                ServiceName = "Business Email",
                CompanyURL = "www.hyperoffice.com",
                OperatingSystems = new List<Domain.Models.OperatingSystem>()
                {
                    repository.FindOperatingSystemByName("WIN"),
                    repository.FindOperatingSystemByName("MAC"),
                    //repository.FindOperatingSystemByName("LINUX")
                },
                //MobilePlatforms = repository.GetAllMobilePlatforms(),
                MobilePlatforms = new List<MobilePlatform>()
                {
                    repository.FindMobilePlatformByName("ANDROID"),
                    repository.FindMobilePlatformByName("IPHONE"),
                    repository.FindMobilePlatformByName("BB")
                },
                Browsers = new List<Browser>()
                {
                    repository.FindBrowserByName("Internet Explorer 6"),
                    repository.FindBrowserByName("Internet Explorer 7"),
                    repository.FindBrowserByName("Internet Explorer 8"),
                    repository.FindBrowserByName("Internet Explorer 9"),
                    repository.FindBrowserByName("FIREFOX"),
                    repository.FindBrowserByName("CHROME"),
                    repository.FindBrowserByName("SAFARI"),
                },
                LicenceTypeMinimum = repository.FindLicenceTypeMinimumByName(1),
                LicenceTypeMaximum = repository.FindLicenceTypeMaximumByName(99),
                Languages = new List<Language>()
                {
                    repository.FindLanguageByName("ENGLISH")
                },
                SupportTypes = new List<SupportType>()
                {
                    //repository.FindSupportTypeByName("PHONE"),
                    repository.FindSupportTypeByName("ONLINE")
                },
                SupportHours = repository.FindSupportHoursByName("24 HOURS"),
                SupportDays = repository.FindSupportDaysByName("7"),
                SupportTerritories = new List<SupportTerritory>()
                {
                    repository.FindSupportTerritoryByName("US"),
                },
                VideoTrainingSupport = false,
                //MaximumMeetingAttendees = 50,
                //MaximumWebinarAttendees = 0,
                CloudApplicationFeatures = new List<CloudApplicationFeature>()
                {
                    repository.FindFeatureByName("NUMBER OF MAILBOXES"),
                    repository.FindFeatureByName("STORAGE LIMIT"),
                    repository.FindFeatureByName("INDIVIDUAL FILE SIZE LIMIT"),
                    repository.FindFeatureByName("NO DAILY MAIL LIMITS"),
                    repository.FindFeatureByName("MIGRATE COMPANY DOMAIN"),
                    repository.FindFeatureByName("ANTI-VIRUS"),
                    repository.FindFeatureByName("SPAM GUARD / ANTI-PHISHING"),
                    repository.FindFeatureByName("BLOCK ADDRESSES / BLACKLIST"),
                    repository.FindFeatureByName("ALIASES"),
                    repository.FindFeatureByName("AD-FREE"),
                    repository.FindFeatureByName("EMAIL ARCHIVING"),
                    repository.FindFeatureByName("QUICK FILTER TOOLBAR"),
                    //repository.FindFeatureByName("SMART FOLDERS"),
                    repository.FindFeatureByName("ACCOUNT GROUPS"),
                    repository.FindFeatureByName("INSTANT MESSAGING"),
                    //repository.FindFeatureByName("TRACK CONVERSATIONS"),
                    repository.FindFeatureByName("SOCIAL MEDIA INTEGRATION"),
                    repository.FindFeatureByName("MS OUTLOOK COMPATIBLE"),
                    repository.FindFeatureByName("EMAIL MIGRATION SERVICE"),
                    repository.FindFeatureByName("SSL SECURITY"),
                },
                ApplicationCostPerMonth = 0.0M,
                //CallsPackageCostPerMonth = 0M,
                SetupFee = repository.FindSetupFeeByName("$49.99"),
                MinimumContract = repository.FindMinimumContractByName("12 MONTHS"),
                PaymentFrequency = repository.FindPaymentFrequencyByName("MONTHLY"),
                PaymentOptions = new List<PaymentOption>()
                {
                    repository.FindPaymentOptionByName("CREDIT CARD"),
                    repository.FindPaymentOptionByName("PRE-PAY"),
                },
                FreeTrialPeriod = repository.FindFreeTrialPeriodByName("YES"),
                Category = repository.FindCategoryByName("EMAIL"),
                Vendor = repository.FindVendorByName("HyperOffice"),
                Description = repository.GetDescription(),
                AddDate = DateTime.Now,
                #region Ratings,Reviews,Case Studies,White Papers
                Ratings = new List<CloudApplicationRating>()
                {
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                },
                Reviews = new List<CloudApplicationReview>()
                {
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                },
                ThumbnailDocuments = new List<ThumbnailDocument>()
                {
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("WHITE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_WHITE_PAPER_FILEPATH+PDF_TEST_WHITE_PAPER_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_WHITE_PAPER_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_WHITE_PAPER_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_WHITE_PAPER_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("WHITE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_WHITE_PAPER_FILEPATH+PDF_TEST_WHITE_PAPER_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_WHITE_PAPER_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_WHITE_PAPER_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_WHITE_PAPER_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("WHITE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_WHITE_PAPER_FILEPATH+PDF_TEST_WHITE_PAPER_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_WHITE_PAPER_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_WHITE_PAPER_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_WHITE_PAPER_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("CASE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_CASE_STUDY_FILEPATH+PDF_TEST_CASE_STUDY_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_CASE_STUDY_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_CASE_STUDY_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_CASE_STUDY_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("CASE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_CASE_STUDY_FILEPATH+PDF_TEST_CASE_STUDY_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_CASE_STUDY_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_CASE_STUDY_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_CASE_STUDY_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("CASE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_CASE_STUDY_FILEPATH+PDF_TEST_CASE_STUDY_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_CASE_STUDY_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_CASE_STUDY_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_CASE_STUDY_FILENAME,
                    },
                },
                #endregion
            };

            repository.AddCloudApplication(ca);

            #endregion

            #region FASTMAIL
            ca = new CloudApplication()
            {
                Brand = "FastMail",
                ServiceName = "FastMail Business",
                CompanyURL = "www.fastmail.fm",
                OperatingSystems = new List<Domain.Models.OperatingSystem>()
                {
                    repository.FindOperatingSystemByName("WIN"),
                    repository.FindOperatingSystemByName("MAC"),
                    //repository.FindOperatingSystemByName("LINUX")
                },
                //MobilePlatforms = repository.GetAllMobilePlatforms(),
                MobilePlatforms = new List<MobilePlatform>()
                {
                    repository.FindMobilePlatformByName("ANDROID"),
                    repository.FindMobilePlatformByName("IPHONE"),
                    repository.FindMobilePlatformByName("BB")
                },
                Browsers = new List<Browser>()
                {
                    repository.FindBrowserByName("Internet Explorer 6"),
                    repository.FindBrowserByName("Internet Explorer 7"),
                    repository.FindBrowserByName("Internet Explorer 8"),
                    repository.FindBrowserByName("Internet Explorer 9"),
                    repository.FindBrowserByName("FIREFOX"),
                    repository.FindBrowserByName("CHROME"),
                    repository.FindBrowserByName("SAFARI"),
                },
                LicenceTypeMinimum = repository.FindLicenceTypeMinimumByName(1),
                LicenceTypeMaximum = repository.FindLicenceTypeMaximumByName(99),
                Languages = new List<Language>()
                {
                    repository.FindLanguageByName("ENGLISH")
                },
                SupportTypes = new List<SupportType>()
                {
                    repository.FindSupportTypeByName("PHONE"),
                    repository.FindSupportTypeByName("EMAIL")
                },
                SupportHours = repository.FindSupportHoursByName("9AM-5PM"),
                SupportDays = repository.FindSupportDaysByName("5"),
                SupportTerritories = new List<SupportTerritory>()
                {
                    repository.FindSupportTerritoryByName("US"),
                },
                VideoTrainingSupport = true,
                //MaximumMeetingAttendees = 50,
                //MaximumWebinarAttendees = 0,
                CloudApplicationFeatures = new List<CloudApplicationFeature>()
                {
                    repository.FindFeatureByName("NUMBER OF MAILBOXES"),
                    repository.FindFeatureByName("STORAGE LIMIT"),
                    repository.FindFeatureByName("INDIVIDUAL FILE SIZE LIMIT"),
                    repository.FindFeatureByName("NO DAILY MAIL LIMITS"),
                    repository.FindFeatureByName("MIGRATE COMPANY DOMAIN"),
                    repository.FindFeatureByName("ANTI-VIRUS"),
                    repository.FindFeatureByName("SPAM GUARD / ANTI-PHISHING"),
                    repository.FindFeatureByName("BLOCK ADDRESSES / BLACKLIST"),
                    repository.FindFeatureByName("ALIASES"),
                    repository.FindFeatureByName("AD-FREE"),
                    repository.FindFeatureByName("EMAIL ARCHIVING"),
                    repository.FindFeatureByName("QUICK FILTER TOOLBAR"),
                    //repository.FindFeatureByName("SMART FOLDERS"),
                    repository.FindFeatureByName("ACCOUNT GROUPS"),
                    //repository.FindFeatureByName("INSTANT MESSAGING"),
                    //repository.FindFeatureByName("TRACK CONVERSATIONS"),
                    repository.FindFeatureByName("SOCIAL MEDIA INTEGRATION"),
                    repository.FindFeatureByName("MS OUTLOOK COMPATIBLE"),
                    repository.FindFeatureByName("EMAIL MIGRATION SERVICE"),
                    repository.FindFeatureByName("SSL SECURITY"),
                },
                ApplicationCostPerMonth = 0.0M,
                ApplicationCostPerAnnum = 39.95M,
                //CallsPackageCostPerMonth = 0M,
                SetupFee = repository.FindSetupFeeByName("NOT APPLICABLE"),
                MinimumContract = repository.FindMinimumContractByName("6 MONTHS"),
                PaymentFrequency = repository.FindPaymentFrequencyByName("MONTHLY"),
                PaymentOptions = new List<PaymentOption>()
                {
                    repository.FindPaymentOptionByName("CREDIT CARD"),
                    repository.FindPaymentOptionByName("PRE-PAY"),
                },
                FreeTrialPeriod = repository.FindFreeTrialPeriodByName("NO"),
                Category = repository.FindCategoryByName("EMAIL"),
                Vendor = repository.FindVendorByName("FastMail"),
                Description = repository.GetDescription(),
                AddDate = DateTime.Now,
                #region Ratings,Reviews,Case Studies,White Papers
                Ratings = new List<CloudApplicationRating>()
                {
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                },
                Reviews = new List<CloudApplicationReview>()
                {
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                },
                ThumbnailDocuments = new List<ThumbnailDocument>()
                {
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("WHITE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_WHITE_PAPER_FILEPATH+PDF_TEST_WHITE_PAPER_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_WHITE_PAPER_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_WHITE_PAPER_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_WHITE_PAPER_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("WHITE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_WHITE_PAPER_FILEPATH+PDF_TEST_WHITE_PAPER_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_WHITE_PAPER_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_WHITE_PAPER_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_WHITE_PAPER_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("WHITE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_WHITE_PAPER_FILEPATH+PDF_TEST_WHITE_PAPER_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_WHITE_PAPER_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_WHITE_PAPER_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_WHITE_PAPER_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("CASE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_CASE_STUDY_FILEPATH+PDF_TEST_CASE_STUDY_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_CASE_STUDY_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_CASE_STUDY_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_CASE_STUDY_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("CASE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_CASE_STUDY_FILEPATH+PDF_TEST_CASE_STUDY_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_CASE_STUDY_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_CASE_STUDY_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_CASE_STUDY_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("CASE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_CASE_STUDY_FILEPATH+PDF_TEST_CASE_STUDY_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_CASE_STUDY_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_CASE_STUDY_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_CASE_STUDY_FILENAME,
                    },
                },
                #endregion
            };

            repository.AddCloudApplication(ca);

            #endregion

            #region WEBFUSION
            ca = new CloudApplication()
            {
                Brand = "webfusion",
                ServiceName = "Small Business Exchange",
                CompanyURL = "www.webfusion.co.uk",
                OperatingSystems = new List<Domain.Models.OperatingSystem>()
                {
                    repository.FindOperatingSystemByName("WIN"),
                    repository.FindOperatingSystemByName("MAC"),
                    //repository.FindOperatingSystemByName("LINUX")
                },
                //MobilePlatforms = repository.GetAllMobilePlatforms(),
                MobilePlatforms = new List<MobilePlatform>()
                {
                    repository.FindMobilePlatformByName("ANDROID"),
                    repository.FindMobilePlatformByName("IPHONE"),
                    repository.FindMobilePlatformByName("BB")
                },
                Browsers = new List<Browser>()
                {
                    repository.FindBrowserByName("Internet Explorer 6"),
                    repository.FindBrowserByName("Internet Explorer 7"),
                    repository.FindBrowserByName("Internet Explorer 8"),
                    repository.FindBrowserByName("Internet Explorer 9"),
                    repository.FindBrowserByName("FIREFOX"),
                    repository.FindBrowserByName("CHROME"),
                    repository.FindBrowserByName("SAFARI"),
                },
                LicenceTypeMinimum = repository.FindLicenceTypeMinimumByName(1),
                LicenceTypeMaximum = repository.FindLicenceTypeMaximumByName(99),
                Languages = new List<Language>()
                {
                    repository.FindLanguageByName("ENGLISH")
                },
                SupportTypes = new List<SupportType>()
                {
                    repository.FindSupportTypeByName("PHONE"),
                    repository.FindSupportTypeByName("ONLINE")
                },
                SupportHours = repository.FindSupportHoursByName("24 HOURS"),
                SupportDays = repository.FindSupportDaysByName("7"),
                SupportTerritories = new List<SupportTerritory>()
                {
                    repository.FindSupportTerritoryByName("UK"),
                },
                VideoTrainingSupport = false,
                //MaximumMeetingAttendees = 50,
                //MaximumWebinarAttendees = 0,
                CloudApplicationFeatures = new List<CloudApplicationFeature>()
                {
                    repository.FindFeatureByName("NUMBER OF MAILBOXES"),
                    repository.FindFeatureByName("STORAGE LIMIT"),
                    repository.FindFeatureByName("INDIVIDUAL FILE SIZE LIMIT"),
                    repository.FindFeatureByName("NO DAILY MAIL LIMITS"),
                    repository.FindFeatureByName("MIGRATE COMPANY DOMAIN"),
                    repository.FindFeatureByName("ANTI-VIRUS"),
                    repository.FindFeatureByName("SPAM GUARD / ANTI-PHISHING"),
                    repository.FindFeatureByName("BLOCK ADDRESSES / BLACKLIST"),
                    repository.FindFeatureByName("ALIASES"),
                    repository.FindFeatureByName("AD-FREE"),
                    repository.FindFeatureByName("EMAIL ARCHIVING"),
                    repository.FindFeatureByName("QUICK FILTER TOOLBAR"),
                    //repository.FindFeatureByName("SMART FOLDERS"),
                    repository.FindFeatureByName("ACCOUNT GROUPS"),
                    repository.FindFeatureByName("INSTANT MESSAGING"),
                    //repository.FindFeatureByName("TRACK CONVERSATIONS"),
                    //repository.FindFeatureByName("SOCIAL MEDIA INTEGRATION"),
                    repository.FindFeatureByName("MS OUTLOOK COMPATIBLE"),
                    repository.FindFeatureByName("EMAIL MIGRATION SERVICE"),
                    repository.FindFeatureByName("SSL SECURITY"),
                },
                ApplicationCostPerMonth = 10.99M,
                //CallsPackageCostPerMonth = 0M,
                SetupFee = repository.FindSetupFeeByName("NOT APPLICABLE"),
                MinimumContract = repository.FindMinimumContractByName("12 MONTHS"),
                PaymentFrequency = repository.FindPaymentFrequencyByName("MONTHLY"),
                PaymentOptions = new List<PaymentOption>()
                {
                    repository.FindPaymentOptionByName("CREDIT CARD"),
                    repository.FindPaymentOptionByName("PRE-PAY"),
                },
                FreeTrialPeriod = repository.FindFreeTrialPeriodByName("YES"),
                Category = repository.FindCategoryByName("EMAIL"),
                Vendor = repository.FindVendorByName("webfusion"),
                Description = repository.GetDescription(),
                AddDate = DateTime.Now,
                #region Ratings,Reviews,Case Studies,White Papers
                Ratings = new List<CloudApplicationRating>()
                {
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                },
                Reviews = new List<CloudApplicationReview>()
                {
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                },
                ThumbnailDocuments = new List<ThumbnailDocument>()
                {
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("WHITE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_WHITE_PAPER_FILEPATH+PDF_TEST_WHITE_PAPER_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_WHITE_PAPER_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_WHITE_PAPER_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_WHITE_PAPER_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("WHITE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_WHITE_PAPER_FILEPATH+PDF_TEST_WHITE_PAPER_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_WHITE_PAPER_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_WHITE_PAPER_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_WHITE_PAPER_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("WHITE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_WHITE_PAPER_FILEPATH+PDF_TEST_WHITE_PAPER_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_WHITE_PAPER_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_WHITE_PAPER_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_WHITE_PAPER_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("CASE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_CASE_STUDY_FILEPATH+PDF_TEST_CASE_STUDY_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_CASE_STUDY_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_CASE_STUDY_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_CASE_STUDY_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("CASE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_CASE_STUDY_FILEPATH+PDF_TEST_CASE_STUDY_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_CASE_STUDY_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_CASE_STUDY_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_CASE_STUDY_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("CASE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_CASE_STUDY_FILEPATH+PDF_TEST_CASE_STUDY_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_CASE_STUDY_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_CASE_STUDY_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_CASE_STUDY_FILENAME,
                    },
                },
                #endregion
            };

            repository.AddCloudApplication(ca);

            #endregion

            #region RACKSPACE
            ca = new CloudApplication()
            {
                Brand = "rackspace",
                ServiceName = "Rackspace Email",
                CompanyURL = "www.rackspace.co.uk",
                OperatingSystems = new List<Domain.Models.OperatingSystem>()
                {
                    repository.FindOperatingSystemByName("WIN"),
                    repository.FindOperatingSystemByName("MAC"),
                    //repository.FindOperatingSystemByName("LINUX")
                },
                //MobilePlatforms = repository.GetAllMobilePlatforms(),
                MobilePlatforms = new List<MobilePlatform>()
                {
                    repository.FindMobilePlatformByName("ANDROID"),
                    repository.FindMobilePlatformByName("IPHONE"),
                    repository.FindMobilePlatformByName("BB")
                },
                Browsers = new List<Browser>()
                {
                    repository.FindBrowserByName("Internet Explorer 6"),
                    repository.FindBrowserByName("Internet Explorer 7"),
                    repository.FindBrowserByName("Internet Explorer 8"),
                    repository.FindBrowserByName("Internet Explorer 9"),
                    repository.FindBrowserByName("FIREFOX"),
                    repository.FindBrowserByName("CHROME"),
                    repository.FindBrowserByName("SAFARI"),
                },
                LicenceTypeMinimum = repository.FindLicenceTypeMinimumByName(1),
                LicenceTypeMaximum = repository.FindLicenceTypeMaximumByName(99),
                Languages = new List<Language>()
                {
                    repository.FindLanguageByName("ENGLISH")
                },
                SupportTypes = new List<SupportType>()
                {
                    repository.FindSupportTypeByName("PHONE"),
                    repository.FindSupportTypeByName("ONLINE")
                },
                SupportHours = repository.FindSupportHoursByName("24 HOURS"),
                SupportDays = repository.FindSupportDaysByName("7"),
                SupportTerritories = new List<SupportTerritory>()
                {
                    repository.FindSupportTerritoryByName("UK"),
                },
                VideoTrainingSupport = false,
                //MaximumMeetingAttendees = 50,
                //MaximumWebinarAttendees = 0,
                CloudApplicationFeatures = new List<CloudApplicationFeature>()
                {
                    repository.FindFeatureByName("NUMBER OF MAILBOXES"),
                    repository.FindFeatureByName("STORAGE LIMIT"),
                    repository.FindFeatureByName("INDIVIDUAL FILE SIZE LIMIT"),
                    repository.FindFeatureByName("NO DAILY MAIL LIMITS"),
                    repository.FindFeatureByName("MIGRATE COMPANY DOMAIN"),
                    repository.FindFeatureByName("ANTI-VIRUS"),
                    repository.FindFeatureByName("SPAM GUARD / ANTI-PHISHING"),
                    repository.FindFeatureByName("BLOCK ADDRESSES / BLACKLIST"),
                    repository.FindFeatureByName("ALIASES"),
                    repository.FindFeatureByName("AD-FREE"),
                    repository.FindFeatureByName("EMAIL ARCHIVING"),
                    repository.FindFeatureByName("QUICK FILTER TOOLBAR"),
                    //repository.FindFeatureByName("SMART FOLDERS"),
                    repository.FindFeatureByName("ACCOUNT GROUPS"),
                    repository.FindFeatureByName("INSTANT MESSAGING"),
                    //repository.FindFeatureByName("TRACK CONVERSATIONS"),
                    //repository.FindFeatureByName("SOCIAL MEDIA INTEGRATION"),
                    repository.FindFeatureByName("MS OUTLOOK COMPATIBLE"),
                    repository.FindFeatureByName("EMAIL MIGRATION SERVICE"),
                    repository.FindFeatureByName("SSL SECURITY"),
                },
                ApplicationCostPerMonth = 150.00M,
                //CallsPackageCostPerMonth = 0M,
                SetupFee = repository.FindSetupFeeByName("NOT APPLICABLE"),
                MinimumContract = repository.FindMinimumContractByName("12 MONTHS"),
                PaymentFrequency = repository.FindPaymentFrequencyByName("MONTHLY"),
                PaymentOptions = new List<PaymentOption>()
                {
                    repository.FindPaymentOptionByName("CREDIT CARD"),
                    repository.FindPaymentOptionByName("PRE-PAY"),
                },
                FreeTrialPeriod = repository.FindFreeTrialPeriodByName("YES"),
                Category = repository.FindCategoryByName("EMAIL"),
                Vendor = repository.FindVendorByName("rackspace"),
                Description = repository.GetDescription(),
                AddDate = DateTime.Now,
                #region Ratings,Reviews,Case Studies,White Papers
                Ratings = new List<CloudApplicationRating>()
                {
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                },
                Reviews = new List<CloudApplicationReview>()
                {
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                },
                ThumbnailDocuments = new List<ThumbnailDocument>()
                {
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("WHITE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_WHITE_PAPER_FILEPATH+PDF_TEST_WHITE_PAPER_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_WHITE_PAPER_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_WHITE_PAPER_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_WHITE_PAPER_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("WHITE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_WHITE_PAPER_FILEPATH+PDF_TEST_WHITE_PAPER_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_WHITE_PAPER_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_WHITE_PAPER_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_WHITE_PAPER_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("WHITE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_WHITE_PAPER_FILEPATH+PDF_TEST_WHITE_PAPER_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_WHITE_PAPER_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_WHITE_PAPER_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_WHITE_PAPER_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("CASE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_CASE_STUDY_FILEPATH+PDF_TEST_CASE_STUDY_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_CASE_STUDY_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_CASE_STUDY_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_CASE_STUDY_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("CASE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_CASE_STUDY_FILEPATH+PDF_TEST_CASE_STUDY_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_CASE_STUDY_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_CASE_STUDY_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_CASE_STUDY_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("CASE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_CASE_STUDY_FILEPATH+PDF_TEST_CASE_STUDY_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_CASE_STUDY_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_CASE_STUDY_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_CASE_STUDY_FILENAME,
                    },
                },
                #endregion
            };

            repository.AddCloudApplication(ca);

            #endregion

            #region ECLIPSE
            ca = new CloudApplication()
            {
                Brand = "eclipse",
                ServiceName = "Standard Email",
                CompanyURL = "www.eclipse.net.uk",
                OperatingSystems = new List<Domain.Models.OperatingSystem>()
                {
                    repository.FindOperatingSystemByName("WIN"),
                    repository.FindOperatingSystemByName("MAC"),
                    //repository.FindOperatingSystemByName("LINUX")
                },
                //MobilePlatforms = repository.GetAllMobilePlatforms(),
                MobilePlatforms = new List<MobilePlatform>()
                {
                    repository.FindMobilePlatformByName("ANDROID"),
                    repository.FindMobilePlatformByName("IPHONE"),
                    repository.FindMobilePlatformByName("BB")
                },
                Browsers = new List<Browser>()
                {
                    repository.FindBrowserByName("Internet Explorer 6"),
                    repository.FindBrowserByName("Internet Explorer 7"),
                    repository.FindBrowserByName("Internet Explorer 8"),
                    repository.FindBrowserByName("Internet Explorer 9"),
                    repository.FindBrowserByName("FIREFOX"),
                    repository.FindBrowserByName("CHROME"),
                    repository.FindBrowserByName("SAFARI"),
                },
                LicenceTypeMinimum = repository.FindLicenceTypeMinimumByName(1),
                LicenceTypeMaximum = repository.FindLicenceTypeMaximumByName(99),
                Languages = new List<Language>()
                {
                    repository.FindLanguageByName("ENGLISH")
                },
                SupportTypes = new List<SupportType>()
                {
                    repository.FindSupportTypeByName("PHONE"),
                    repository.FindSupportTypeByName("ONLINE")
                },
                SupportHours = repository.FindSupportHoursByName("24 HOURS"),
                SupportDays = repository.FindSupportDaysByName("7"),
                SupportTerritories = new List<SupportTerritory>()
                {
                    repository.FindSupportTerritoryByName("UK"),
                },
                VideoTrainingSupport = true,
                //MaximumMeetingAttendees = 50,
                //MaximumWebinarAttendees = 0,
                CloudApplicationFeatures = new List<CloudApplicationFeature>()
                {
                    repository.FindFeatureByName("NUMBER OF MAILBOXES"),
                    repository.FindFeatureByName("STORAGE LIMIT"),
                    repository.FindFeatureByName("INDIVIDUAL FILE SIZE LIMIT"),
                    repository.FindFeatureByName("NO DAILY MAIL LIMITS"),
                    repository.FindFeatureByName("MIGRATE COMPANY DOMAIN"),
                    repository.FindFeatureByName("ANTI-VIRUS"),
                    repository.FindFeatureByName("SPAM GUARD / ANTI-PHISHING"),
                    repository.FindFeatureByName("BLOCK ADDRESSES / BLACKLIST"),
                    repository.FindFeatureByName("ALIASES"),
                    repository.FindFeatureByName("AD-FREE"),
                    repository.FindFeatureByName("EMAIL ARCHIVING"),
                    repository.FindFeatureByName("QUICK FILTER TOOLBAR"),
                    //repository.FindFeatureByName("SMART FOLDERS"),
                    repository.FindFeatureByName("ACCOUNT GROUPS"),
                    repository.FindFeatureByName("INSTANT MESSAGING"),
                    //repository.FindFeatureByName("TRACK CONVERSATIONS"),
                    //repository.FindFeatureByName("SOCIAL MEDIA INTEGRATION"),
                    repository.FindFeatureByName("MS OUTLOOK COMPATIBLE"),
                    repository.FindFeatureByName("EMAIL MIGRATION SERVICE"),
                    repository.FindFeatureByName("SSL SECURITY"),
                },
                ApplicationCostPerMonth = 5.49M,
                //CallsPackageCostPerMonth = 0M,
                SetupFee = repository.FindSetupFeeByName("NOT APPLICABLE"),
                MinimumContract = repository.FindMinimumContractByName("NOT APPLICABLE"),
                PaymentFrequency = repository.FindPaymentFrequencyByName("MONTHLY"),
                PaymentOptions = new List<PaymentOption>()
                {
                    repository.FindPaymentOptionByName("CREDIT CARD"),
                    repository.FindPaymentOptionByName("PRE-PAY"),
                },
                FreeTrialPeriod = repository.FindFreeTrialPeriodByName("YES"),
                Category = repository.FindCategoryByName("EMAIL"),
                Vendor = repository.FindVendorByName("eclipse"),
                Description = repository.GetDescription(),
                AddDate = DateTime.Now,
                #region Ratings,Reviews,Case Studies,White Papers
                Ratings = new List<CloudApplicationRating>()
                {
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                },
                Reviews = new List<CloudApplicationReview>()
                {
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                },
                ThumbnailDocuments = new List<ThumbnailDocument>()
                {
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("WHITE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_WHITE_PAPER_FILEPATH+PDF_TEST_WHITE_PAPER_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_WHITE_PAPER_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_WHITE_PAPER_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_WHITE_PAPER_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("WHITE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_WHITE_PAPER_FILEPATH+PDF_TEST_WHITE_PAPER_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_WHITE_PAPER_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_WHITE_PAPER_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_WHITE_PAPER_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("WHITE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_WHITE_PAPER_FILEPATH+PDF_TEST_WHITE_PAPER_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_WHITE_PAPER_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_WHITE_PAPER_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_WHITE_PAPER_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("CASE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_CASE_STUDY_FILEPATH+PDF_TEST_CASE_STUDY_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_CASE_STUDY_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_CASE_STUDY_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_CASE_STUDY_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("CASE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_CASE_STUDY_FILEPATH+PDF_TEST_CASE_STUDY_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_CASE_STUDY_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_CASE_STUDY_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_CASE_STUDY_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("CASE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_CASE_STUDY_FILEPATH+PDF_TEST_CASE_STUDY_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_CASE_STUDY_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_CASE_STUDY_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_CASE_STUDY_FILENAME,
                    },
                },
                #endregion
            };

            repository.AddCloudApplication(ca);

            #endregion

            #region FUSEMAIL
            ca = new CloudApplication()
            {
                Brand = "FuseMail",
                ServiceName = "Small Business Email",
                CompanyURL = "www.fusemail.com",
                OperatingSystems = new List<Domain.Models.OperatingSystem>()
                {
                    repository.FindOperatingSystemByName("WIN"),
                    repository.FindOperatingSystemByName("MAC"),
                    //repository.FindOperatingSystemByName("LINUX")
                },
                //MobilePlatforms = repository.GetAllMobilePlatforms(),
                MobilePlatforms = new List<MobilePlatform>()
                {
                    repository.FindMobilePlatformByName("ANDROID"),
                    repository.FindMobilePlatformByName("IPHONE"),
                    repository.FindMobilePlatformByName("BB")
                },
                Browsers = new List<Browser>()
                {
                    repository.FindBrowserByName("Internet Explorer 6"),
                    repository.FindBrowserByName("Internet Explorer 7"),
                    repository.FindBrowserByName("Internet Explorer 8"),
                    repository.FindBrowserByName("Internet Explorer 9"),
                    repository.FindBrowserByName("FIREFOX"),
                    repository.FindBrowserByName("CHROME"),
                    repository.FindBrowserByName("SAFARI"),
                },
                LicenceTypeMinimum = repository.FindLicenceTypeMinimumByName(1),
                LicenceTypeMaximum = repository.FindLicenceTypeMaximumByName(99),
                Languages = new List<Language>()
                {
                    repository.FindLanguageByName("ENGLISH")
                },
                SupportTypes = new List<SupportType>()
                {
                    repository.FindSupportTypeByName("PHONE"),
                    repository.FindSupportTypeByName("ONLINE")
                },
                SupportHours = repository.FindSupportHoursByName("24 HOURS"),
                SupportDays = repository.FindSupportDaysByName("7"),
                SupportTerritories = new List<SupportTerritory>()
                {
                    repository.FindSupportTerritoryByName("US"),
                },
                VideoTrainingSupport = true,
                //MaximumMeetingAttendees = 50,
                //MaximumWebinarAttendees = 0,
                CloudApplicationFeatures = new List<CloudApplicationFeature>()
                {
                    repository.FindFeatureByName("NUMBER OF MAILBOXES"),
                    repository.FindFeatureByName("STORAGE LIMIT"),
                    repository.FindFeatureByName("INDIVIDUAL FILE SIZE LIMIT"),
                    repository.FindFeatureByName("NO DAILY MAIL LIMITS"),
                    repository.FindFeatureByName("MIGRATE COMPANY DOMAIN"),
                    repository.FindFeatureByName("ANTI-VIRUS"),
                    repository.FindFeatureByName("SPAM GUARD / ANTI-PHISHING"),
                    repository.FindFeatureByName("BLOCK ADDRESSES / BLACKLIST"),
                    repository.FindFeatureByName("ALIASES"),
                    repository.FindFeatureByName("AD-FREE"),
                    repository.FindFeatureByName("EMAIL ARCHIVING"),
                    repository.FindFeatureByName("QUICK FILTER TOOLBAR"),
                    //repository.FindFeatureByName("SMART FOLDERS"),
                    repository.FindFeatureByName("ACCOUNT GROUPS"),
                    repository.FindFeatureByName("INSTANT MESSAGING"),
                    //repository.FindFeatureByName("TRACK CONVERSATIONS"),
                    //repository.FindFeatureByName("SOCIAL MEDIA INTEGRATION"),
                    repository.FindFeatureByName("MS OUTLOOK COMPATIBLE"),
                    repository.FindFeatureByName("EMAIL MIGRATION SERVICE"),
                    repository.FindFeatureByName("SSL SECURITY"),
                },
                ApplicationCostPerMonth = 2.0M,
                //CallsPackageCostPerMonth = 0M,
                SetupFee = repository.FindSetupFeeByName("NOT APPLICABLE"),
                MinimumContract = repository.FindMinimumContractByName("NOT APPLICABLE"),
                PaymentFrequency = repository.FindPaymentFrequencyByName("MONTHLY"),
                PaymentOptions = new List<PaymentOption>()
                {
                    repository.FindPaymentOptionByName("CREDIT CARD"),
                    repository.FindPaymentOptionByName("PRE-PAY"),
                },
                FreeTrialPeriod = repository.FindFreeTrialPeriodByName("YES"),
                Category = repository.FindCategoryByName("EMAIL"),
                Vendor = repository.FindVendorByName("FuseMail"),
                Description = repository.GetDescription(),
                AddDate = DateTime.Now,
                #region Ratings,Reviews,Case Studies,White Papers
                Ratings = new List<CloudApplicationRating>()
                {
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                },
                Reviews = new List<CloudApplicationReview>()
                {
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                },
                ThumbnailDocuments = new List<ThumbnailDocument>()
                {
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("WHITE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_WHITE_PAPER_FILEPATH+PDF_TEST_WHITE_PAPER_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_WHITE_PAPER_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_WHITE_PAPER_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_WHITE_PAPER_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("WHITE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_WHITE_PAPER_FILEPATH+PDF_TEST_WHITE_PAPER_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_WHITE_PAPER_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_WHITE_PAPER_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_WHITE_PAPER_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("WHITE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_WHITE_PAPER_FILEPATH+PDF_TEST_WHITE_PAPER_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_WHITE_PAPER_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_WHITE_PAPER_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_WHITE_PAPER_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("CASE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_CASE_STUDY_FILEPATH+PDF_TEST_CASE_STUDY_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_CASE_STUDY_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_CASE_STUDY_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_CASE_STUDY_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("CASE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_CASE_STUDY_FILEPATH+PDF_TEST_CASE_STUDY_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_CASE_STUDY_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_CASE_STUDY_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_CASE_STUDY_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("CASE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_CASE_STUDY_FILEPATH+PDF_TEST_CASE_STUDY_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_CASE_STUDY_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_CASE_STUDY_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_CASE_STUDY_FILENAME,
                    },
                },
                #endregion
            };

            repository.AddCloudApplication(ca);

            #endregion

            #region FASTHOSTS
            ca = new CloudApplication()
            {
                Brand = "fasthosts",
                ServiceName = "Business Standard",
                CompanyURL = "www.fasthosts.co.uk",
                OperatingSystems = new List<Domain.Models.OperatingSystem>()
                {
                    repository.FindOperatingSystemByName("WIN"),
                    repository.FindOperatingSystemByName("MAC"),
                    //repository.FindOperatingSystemByName("LINUX")
                },
                //MobilePlatforms = repository.GetAllMobilePlatforms(),
                MobilePlatforms = new List<MobilePlatform>()
                {
                    repository.FindMobilePlatformByName("ANDROID"),
                    repository.FindMobilePlatformByName("IPHONE"),
                    repository.FindMobilePlatformByName("BB")
                },
                Browsers = new List<Browser>()
                {
                    repository.FindBrowserByName("Internet Explorer 6"),
                    repository.FindBrowserByName("Internet Explorer 7"),
                    repository.FindBrowserByName("Internet Explorer 8"),
                    repository.FindBrowserByName("Internet Explorer 9"),
                    repository.FindBrowserByName("FIREFOX"),
                    repository.FindBrowserByName("CHROME"),
                    repository.FindBrowserByName("SAFARI"),
                },
                LicenceTypeMinimum = repository.FindLicenceTypeMinimumByName(1),
                LicenceTypeMaximum = repository.FindLicenceTypeMaximumByName(99),
                Languages = new List<Language>()
                {
                    repository.FindLanguageByName("ENGLISH")
                },
                SupportTypes = new List<SupportType>()
                {
                    repository.FindSupportTypeByName("PHONE"),
                    repository.FindSupportTypeByName("ONLINE")
                },
                SupportHours = repository.FindSupportHoursByName("24 HOURS"),
                SupportDays = repository.FindSupportDaysByName("7"),
                SupportTerritories = new List<SupportTerritory>()
                {
                    repository.FindSupportTerritoryByName("UK"),
                },
                VideoTrainingSupport = false,
                //MaximumMeetingAttendees = 50,
                //MaximumWebinarAttendees = 0,
                CloudApplicationFeatures = new List<CloudApplicationFeature>()
                {
                    repository.FindFeatureByName("NUMBER OF MAILBOXES"),
                    repository.FindFeatureByName("STORAGE LIMIT"),
                    repository.FindFeatureByName("INDIVIDUAL FILE SIZE LIMIT"),
                    repository.FindFeatureByName("NO DAILY MAIL LIMITS"),
                    repository.FindFeatureByName("MIGRATE COMPANY DOMAIN"),
                    repository.FindFeatureByName("ANTI-VIRUS"),
                    repository.FindFeatureByName("SPAM GUARD / ANTI-PHISHING"),
                    repository.FindFeatureByName("BLOCK ADDRESSES / BLACKLIST"),
                    repository.FindFeatureByName("ALIASES"),
                    repository.FindFeatureByName("AD-FREE"),
                    repository.FindFeatureByName("EMAIL ARCHIVING"),
                    repository.FindFeatureByName("QUICK FILTER TOOLBAR"),
                    //repository.FindFeatureByName("SMART FOLDERS"),
                    repository.FindFeatureByName("ACCOUNT GROUPS"),
                    repository.FindFeatureByName("INSTANT MESSAGING"),
                    //repository.FindFeatureByName("TRACK CONVERSATIONS"),
                    //repository.FindFeatureByName("SOCIAL MEDIA INTEGRATION"),
                    repository.FindFeatureByName("MS OUTLOOK COMPATIBLE"),
                    repository.FindFeatureByName("EMAIL MIGRATION SERVICE"),
                    repository.FindFeatureByName("SSL SECURITY"),
                },
                ApplicationCostPerMonth = 9.99M,
                //CallsPackageCostPerMonth = 0M,
                SetupFee = repository.FindSetupFeeByName("NOT APPLICABLE"),
                MinimumContract = repository.FindMinimumContractByName("NOT APPLICABLE"),
                PaymentFrequency = repository.FindPaymentFrequencyByName("MONTHLY"),
                PaymentOptions = new List<PaymentOption>()
                {
                    repository.FindPaymentOptionByName("CREDIT CARD"),
                    repository.FindPaymentOptionByName("PRE-PAY"),
                },
                FreeTrialPeriod = repository.FindFreeTrialPeriodByName("YES"),
                Category = repository.FindCategoryByName("EMAIL"),
                Vendor = repository.FindVendorByName("fasthosts"),
                Description = repository.GetDescription(),
                AddDate = DateTime.Now,
                #region Ratings,Reviews,Case Studies,White Papers
                Ratings = new List<CloudApplicationRating>()
                {
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                },
                Reviews = new List<CloudApplicationReview>()
                {
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                },
                ThumbnailDocuments = new List<ThumbnailDocument>()
                {
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("WHITE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_WHITE_PAPER_FILEPATH+PDF_TEST_WHITE_PAPER_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_WHITE_PAPER_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_WHITE_PAPER_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_WHITE_PAPER_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("WHITE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_WHITE_PAPER_FILEPATH+PDF_TEST_WHITE_PAPER_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_WHITE_PAPER_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_WHITE_PAPER_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_WHITE_PAPER_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("WHITE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_WHITE_PAPER_FILEPATH+PDF_TEST_WHITE_PAPER_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_WHITE_PAPER_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_WHITE_PAPER_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_WHITE_PAPER_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("CASE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_CASE_STUDY_FILEPATH+PDF_TEST_CASE_STUDY_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_CASE_STUDY_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_CASE_STUDY_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_CASE_STUDY_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("CASE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_CASE_STUDY_FILEPATH+PDF_TEST_CASE_STUDY_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_CASE_STUDY_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_CASE_STUDY_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_CASE_STUDY_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("CASE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_CASE_STUDY_FILEPATH+PDF_TEST_CASE_STUDY_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_CASE_STUDY_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_CASE_STUDY_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_CASE_STUDY_FILENAME,
                    },
                },
                #endregion
            };

            repository.AddCloudApplication(ca);

            #endregion

            #region INTERMEDIA
            ca = new CloudApplication()
            {
                Brand = "INTERMEDIA",
                ServiceName = "Hosted Exchange",
                CompanyURL = "www.intermedia.co.uk",
                OperatingSystems = new List<Domain.Models.OperatingSystem>()
                {
                    repository.FindOperatingSystemByName("WIN"),
                    repository.FindOperatingSystemByName("MAC"),
                    //repository.FindOperatingSystemByName("LINUX")
                },
                //MobilePlatforms = repository.GetAllMobilePlatforms(),
                MobilePlatforms = new List<MobilePlatform>()
                {
                    repository.FindMobilePlatformByName("ANDROID"),
                    repository.FindMobilePlatformByName("IPHONE"),
                    repository.FindMobilePlatformByName("BB")
                },
                Browsers = new List<Browser>()
                {
                    repository.FindBrowserByName("Internet Explorer 6"),
                    repository.FindBrowserByName("Internet Explorer 7"),
                    repository.FindBrowserByName("Internet Explorer 8"),
                    repository.FindBrowserByName("Internet Explorer 9"),
                    repository.FindBrowserByName("FIREFOX"),
                    repository.FindBrowserByName("CHROME"),
                    repository.FindBrowserByName("SAFARI"),
                },
                LicenceTypeMinimum = repository.FindLicenceTypeMinimumByName(1),
                LicenceTypeMaximum = repository.FindLicenceTypeMaximumByName(99),
                Languages = new List<Language>()
                {
                    repository.FindLanguageByName("ENGLISH")
                },
                SupportTypes = new List<SupportType>()
                {
                    repository.FindSupportTypeByName("PHONE"),
                    repository.FindSupportTypeByName("ONLINE")
                },
                SupportHours = repository.FindSupportHoursByName("24 HOURS"),
                SupportDays = repository.FindSupportDaysByName("7"),
                SupportTerritories = new List<SupportTerritory>()
                {
                    repository.FindSupportTerritoryByName("UK"),
                },
                VideoTrainingSupport = false,
                //MaximumMeetingAttendees = 50,
                //MaximumWebinarAttendees = 0,
                CloudApplicationFeatures = new List<CloudApplicationFeature>()
                {
                    repository.FindFeatureByName("NUMBER OF MAILBOXES"),
                    repository.FindFeatureByName("STORAGE LIMIT"),
                    repository.FindFeatureByName("INDIVIDUAL FILE SIZE LIMIT"),
                    repository.FindFeatureByName("NO DAILY MAIL LIMITS"),
                    repository.FindFeatureByName("MIGRATE COMPANY DOMAIN"),
                    repository.FindFeatureByName("ANTI-VIRUS"),
                    repository.FindFeatureByName("SPAM GUARD / ANTI-PHISHING"),
                    repository.FindFeatureByName("BLOCK ADDRESSES / BLACKLIST"),
                    repository.FindFeatureByName("ALIASES"),
                    repository.FindFeatureByName("AD-FREE"),
                    repository.FindFeatureByName("EMAIL ARCHIVING"),
                    repository.FindFeatureByName("QUICK FILTER TOOLBAR"),
                    //repository.FindFeatureByName("SMART FOLDERS"),
                    repository.FindFeatureByName("ACCOUNT GROUPS"),
                    repository.FindFeatureByName("INSTANT MESSAGING"),
                    //repository.FindFeatureByName("TRACK CONVERSATIONS"),
                    //repository.FindFeatureByName("SOCIAL MEDIA INTEGRATION"),
                    repository.FindFeatureByName("MS OUTLOOK COMPATIBLE"),
                    repository.FindFeatureByName("EMAIL MIGRATION SERVICE"),
                    repository.FindFeatureByName("SSL SECURITY"),
                },
                ApplicationCostPerMonth = 150.00M,
                //CallsPackageCostPerMonth = 0M,
                SetupFee = repository.FindSetupFeeByName("NOT APPLICABLE"),
                MinimumContract = repository.FindMinimumContractByName("NOT APPLICABLE"),
                PaymentFrequency = repository.FindPaymentFrequencyByName("MONTHLY"),
                PaymentOptions = new List<PaymentOption>()
                {
                    repository.FindPaymentOptionByName("CREDIT CARD"),
                    repository.FindPaymentOptionByName("PRE-PAY"),
                },
                FreeTrialPeriod = repository.FindFreeTrialPeriodByName("YES"),
                Category = repository.FindCategoryByName("EMAIL"),
                Vendor = repository.FindVendorByName("INTERMEDIA"),
                Description = repository.GetDescription(),
                AddDate = DateTime.Now,
                #region Ratings,Reviews,Case Studies,White Papers
                Ratings = new List<CloudApplicationRating>()
                {
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                },
                Reviews = new List<CloudApplicationReview>()
                {
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                },
                ThumbnailDocuments = new List<ThumbnailDocument>()
                {
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("WHITE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_WHITE_PAPER_FILEPATH+PDF_TEST_WHITE_PAPER_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_WHITE_PAPER_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_WHITE_PAPER_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_WHITE_PAPER_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("WHITE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_WHITE_PAPER_FILEPATH+PDF_TEST_WHITE_PAPER_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_WHITE_PAPER_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_WHITE_PAPER_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_WHITE_PAPER_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("WHITE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_WHITE_PAPER_FILEPATH+PDF_TEST_WHITE_PAPER_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_WHITE_PAPER_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_WHITE_PAPER_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_WHITE_PAPER_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("CASE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_CASE_STUDY_FILEPATH+PDF_TEST_CASE_STUDY_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_CASE_STUDY_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_CASE_STUDY_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_CASE_STUDY_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("CASE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_CASE_STUDY_FILEPATH+PDF_TEST_CASE_STUDY_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_CASE_STUDY_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_CASE_STUDY_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_CASE_STUDY_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("CASE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_CASE_STUDY_FILEPATH+PDF_TEST_CASE_STUDY_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_CASE_STUDY_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_CASE_STUDY_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_CASE_STUDY_FILENAME,
                    },
                },
                #endregion
            };

            repository.AddCloudApplication(ca);

            #endregion

            #region 1&1
            ca = new CloudApplication()
            {
                Brand = "1&1",
                ServiceName = "Instant Business Mail",
                CompanyURL = "www.1and1.co.uk",
                OperatingSystems = new List<Domain.Models.OperatingSystem>()
                {
                    repository.FindOperatingSystemByName("WIN"),
                    repository.FindOperatingSystemByName("MAC"),
                    //repository.FindOperatingSystemByName("LINUX")
                },
                //MobilePlatforms = repository.GetAllMobilePlatforms(),
                MobilePlatforms = new List<MobilePlatform>()
                {
                    repository.FindMobilePlatformByName("ANDROID"),
                    repository.FindMobilePlatformByName("IPHONE"),
                    repository.FindMobilePlatformByName("BB")
                },
                Browsers = new List<Browser>()
                {
                    repository.FindBrowserByName("Internet Explorer 6"),
                    repository.FindBrowserByName("Internet Explorer 7"),
                    repository.FindBrowserByName("Internet Explorer 8"),
                    repository.FindBrowserByName("Internet Explorer 9"),
                    repository.FindBrowserByName("FIREFOX"),
                    repository.FindBrowserByName("CHROME"),
                    repository.FindBrowserByName("SAFARI"),
                },
                LicenceTypeMinimum = repository.FindLicenceTypeMinimumByName(1),
                LicenceTypeMaximum = repository.FindLicenceTypeMaximumByName(99),
                Languages = new List<Language>()
                {
                    repository.FindLanguageByName("ENGLISH")
                },
                SupportTypes = new List<SupportType>()
                {
                    repository.FindSupportTypeByName("FAQ"),
                    repository.FindSupportTypeByName("TROUBLESHOOT")
                },
                SupportHours = repository.FindSupportHoursByName("NOT APPLICABLE"),
                SupportDays = repository.FindSupportDaysByName("NOT APPLICABLE"),
                SupportTerritories = new List<SupportTerritory>()
                {
                    repository.FindSupportTerritoryByName("UK"),
                },
                VideoTrainingSupport = false,
                //MaximumMeetingAttendees = 50,
                //MaximumWebinarAttendees = 0,
                CloudApplicationFeatures = new List<CloudApplicationFeature>()
                {
                    repository.FindFeatureByName("NUMBER OF MAILBOXES"),
                    repository.FindFeatureByName("STORAGE LIMIT"),
                    repository.FindFeatureByName("INDIVIDUAL FILE SIZE LIMIT"),
                    repository.FindFeatureByName("NO DAILY MAIL LIMITS"),
                    repository.FindFeatureByName("MIGRATE COMPANY DOMAIN"),
                    repository.FindFeatureByName("ANTI-VIRUS"),
                    repository.FindFeatureByName("SPAM GUARD / ANTI-PHISHING"),
                    repository.FindFeatureByName("BLOCK ADDRESSES / BLACKLIST"),
                    repository.FindFeatureByName("ALIASES"),
                    repository.FindFeatureByName("AD-FREE"),
                    repository.FindFeatureByName("EMAIL ARCHIVING"),
                    repository.FindFeatureByName("QUICK FILTER TOOLBAR"),
                    //repository.FindFeatureByName("SMART FOLDERS"),
                    repository.FindFeatureByName("ACCOUNT GROUPS"),
                    repository.FindFeatureByName("INSTANT MESSAGING"),
                    //repository.FindFeatureByName("TRACK CONVERSATIONS"),
                    repository.FindFeatureByName("SOCIAL MEDIA INTEGRATION"),
                    repository.FindFeatureByName("MS OUTLOOK COMPATIBLE"),
                    repository.FindFeatureByName("EMAIL MIGRATION SERVICE"),
                    repository.FindFeatureByName("SSL SECURITY"),
                },
                ApplicationCostPerMonth = 0.69M,
                //CallsPackageCostPerMonth = 0M,
                SetupFee = repository.FindSetupFeeByName("£4.99"),
                MinimumContract = repository.FindMinimumContractByName("12 MONTHS"),
                PaymentFrequency = repository.FindPaymentFrequencyByName("MONTHLY"),
                PaymentOptions = new List<PaymentOption>()
                {
                    repository.FindPaymentOptionByName("CREDIT CARD"),
                    repository.FindPaymentOptionByName("PRE-PAY"),
                },
                FreeTrialPeriod = repository.FindFreeTrialPeriodByName("YES"),
                Category = repository.FindCategoryByName("EMAIL"),
                Vendor = repository.FindVendorByName("1&1"),
                Description = repository.GetDescription(),
                AddDate = DateTime.Now,
                #region Ratings,Reviews,Case Studies,White Papers
                Ratings = new List<CloudApplicationRating>()
                {
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                },
                Reviews = new List<CloudApplicationReview>()
                {
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                },
                ThumbnailDocuments = new List<ThumbnailDocument>()
                {
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("WHITE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_WHITE_PAPER_FILEPATH+PDF_TEST_WHITE_PAPER_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_WHITE_PAPER_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_WHITE_PAPER_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_WHITE_PAPER_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("WHITE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_WHITE_PAPER_FILEPATH+PDF_TEST_WHITE_PAPER_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_WHITE_PAPER_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_WHITE_PAPER_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_WHITE_PAPER_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("WHITE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_WHITE_PAPER_FILEPATH+PDF_TEST_WHITE_PAPER_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_WHITE_PAPER_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_WHITE_PAPER_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_WHITE_PAPER_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("CASE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_CASE_STUDY_FILEPATH+PDF_TEST_CASE_STUDY_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_CASE_STUDY_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_CASE_STUDY_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_CASE_STUDY_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("CASE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_CASE_STUDY_FILEPATH+PDF_TEST_CASE_STUDY_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_CASE_STUDY_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_CASE_STUDY_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_CASE_STUDY_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("CASE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_CASE_STUDY_FILEPATH+PDF_TEST_CASE_STUDY_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_CASE_STUDY_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_CASE_STUDY_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_CASE_STUDY_FILENAME,
                    },
                },
                #endregion
            };

            repository.AddCloudApplication(ca);

            #endregion

            #endregion

            #region OFFICE

            #region MICROSOFT OFFICE 365
            ca = new CloudApplication()
            {
                Brand = "Microsoft Office 365",
                ServiceName = "Office 365",
                CompanyURL = "www.office365.com",
                OperatingSystems = new List<Domain.Models.OperatingSystem>()
                {
                    repository.FindOperatingSystemByName("WIN"),
                    repository.FindOperatingSystemByName("MAC"),
                    //repository.FindOperatingSystemByName("LINUX")
                },
                //MobilePlatforms = repository.GetAllMobilePlatforms(),
                MobilePlatforms = new List<MobilePlatform>()
                {
                    repository.FindMobilePlatformByName("ANDROID"),
                    repository.FindMobilePlatformByName("IPHONE"),
                    repository.FindMobilePlatformByName("BB")
                },
                Browsers = new List<Browser>()
                {
                    repository.FindBrowserByName("Internet Explorer 6"),
                    repository.FindBrowserByName("Internet Explorer 7"),
                    repository.FindBrowserByName("Internet Explorer 8"),
                    repository.FindBrowserByName("Internet Explorer 9"),
                    repository.FindBrowserByName("FIREFOX"),
                    repository.FindBrowserByName("CHROME"),
                    repository.FindBrowserByName("SAFARI"),
                },
                LicenceTypeMinimum = repository.FindLicenceTypeMinimumByName(1),
                LicenceTypeMaximum = repository.FindLicenceTypeMaximumByName(9),
                Languages = new List<Language>()
                {
                    repository.FindLanguageByName("ENGLISH")
                },
                SupportTypes = new List<SupportType>()
                {
                    //repository.FindSupportTypeByName("PHONE"),
                    repository.FindSupportTypeByName("ONLINE")
                },
                SupportHours = repository.FindSupportHoursByName("24 HOURS"),
                SupportDays = repository.FindSupportDaysByName("7"),
                SupportTerritories = new List<SupportTerritory>()
                {
                    repository.FindSupportTerritoryByName("UK"),
                },
                VideoTrainingSupport = true,
                //MaximumMeetingAttendees = 50,
                //MaximumWebinarAttendees = 0,
                CloudApplicationFeatures = new List<CloudApplicationFeature>()
                {
                    repository.FindFeatureByName("ADVANCED PROOFING & EDITING"),
                    repository.FindFeatureByName("ADVANCED REFERENCING & INDEXING"),
                    repository.FindFeatureByName("MAILING FEATURES"),
                    repository.FindFeatureByName("FORMULA MANAGEMENT"),
                    repository.FindFeatureByName("DATA MANAGEMENT"),
                    repository.FindFeatureByName("ADVANCED CHARTING & TABLES"),
                    repository.FindFeatureByName("ADVANCED DESIGN & ANIMATION"),
                    repository.FindFeatureByName("REAL-TIME COLLABORATION"),
                    repository.FindFeatureByName("AUTOMATIC VERSION MANAGEMENT"),
                    repository.FindFeatureByName("LARGE VIDEO FILES"),
                    repository.FindFeatureByName("OWN BRANDING"),
                    repository.FindFeatureByName("SHARED/COLLABORATION WORKSPACE"),
                    repository.FindFeatureByName("EMAIL CLIENT"),
                    repository.FindFeatureByName("CONTACT MANAGEMENT"),
                    repository.FindFeatureByName("SHARED CALENDAR"),
                    repository.FindFeatureByName("WEB MEETINGS"),
                    repository.FindFeatureByName("PROJECT MANAGEMENT / TASK MANAGER"),
                    repository.FindFeatureByName("WEB PUBLISHING"),
                    repository.FindFeatureByName("SOCIAL MEDIA INTEGRATION"),
                    repository.FindFeatureByName("INTERNAL WEBSITE"),
                    repository.FindFeatureByName("EXTERNAL CUSTOMER WEBSITE"),
                    repository.FindFeatureByName("READ & EDIT"),
                    repository.FindFeatureByName("SAVE WEB CONTENT"),
                    repository.FindFeatureByName("IMAGE CAPTURE"),
                    repository.FindFeatureByName("AUTOMATIC SYNC"),
                    repository.FindFeatureByName("MS OFFICE COMPATIBLE"),
                    repository.FindFeatureByName("OFFLINE MODE"),
                    repository.FindFeatureByName("UNLIMITED DOCUMENT STORAGE"),
                    repository.FindFeatureByName("DOCUMENT REVISION HISTORY"),
                    //repository.FindFeatureByName("DOCUMENT PASSWORD PROTECTION"),
                    //repository.FindFeatureByName("MOBILE/BROWSER EDITING"),
                    //repository.FindFeatureByName("MULTI-USER / GUEST USER"),
                    //repository.FindFeatureByName("3RD PARTY APIS"),
                    repository.FindFeatureByName("SSL SECURITY/ENCRYPTION"),
                },
                ApplicationCostPerMonth = 4.00M,
                //CallsPackageCostPerMonth = 0M,
                SetupFee = repository.FindSetupFeeByName("NOT APPLICABLE"),
                MinimumContract = repository.FindMinimumContractByName("12 MONTHS"),
                PaymentFrequency = repository.FindPaymentFrequencyByName("MONTHLY"),
                PaymentOptions = new List<PaymentOption>()
                {
                    repository.FindPaymentOptionByName("CREDIT CARD"),
                    repository.FindPaymentOptionByName("PRE-PAY"),
                },
                FreeTrialPeriod = repository.FindFreeTrialPeriodByName("YES"),
                Category = repository.FindCategoryByName("OFFICE"),
                Vendor = repository.FindVendorByName("Microsoft Office 365"),
                Description = repository.GetDescription(),
                AddDate = DateTime.Now,
                #region Ratings,Reviews,Case Studies,White Papers
                Ratings = new List<CloudApplicationRating>()
                {
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                },
                Reviews = new List<CloudApplicationReview>()
                {
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                },
                ThumbnailDocuments = new List<ThumbnailDocument>()
                {
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("WHITE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_WHITE_PAPER_FILEPATH+PDF_TEST_WHITE_PAPER_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_WHITE_PAPER_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_WHITE_PAPER_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_WHITE_PAPER_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("WHITE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_WHITE_PAPER_FILEPATH+PDF_TEST_WHITE_PAPER_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_WHITE_PAPER_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_WHITE_PAPER_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_WHITE_PAPER_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("WHITE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_WHITE_PAPER_FILEPATH+PDF_TEST_WHITE_PAPER_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_WHITE_PAPER_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_WHITE_PAPER_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_WHITE_PAPER_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("CASE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_CASE_STUDY_FILEPATH+PDF_TEST_CASE_STUDY_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_CASE_STUDY_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_CASE_STUDY_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_CASE_STUDY_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("CASE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_CASE_STUDY_FILEPATH+PDF_TEST_CASE_STUDY_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_CASE_STUDY_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_CASE_STUDY_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_CASE_STUDY_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("CASE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_CASE_STUDY_FILEPATH+PDF_TEST_CASE_STUDY_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_CASE_STUDY_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_CASE_STUDY_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_CASE_STUDY_FILENAME,
                    },
                },
                #endregion
            };

            repository.AddCloudApplication(ca);

            #endregion

            #region GOOGLE APPS FOR BUSINESS
            ca = new CloudApplication()
            {
                Brand = "Google Apps for Business",
                ServiceName = "Flexible Plan",
                CompanyURL = "www.google.com/apps",
                OperatingSystems = new List<Domain.Models.OperatingSystem>()
                {
                    repository.FindOperatingSystemByName("WIN"),
                    repository.FindOperatingSystemByName("MAC"),
                    //repository.FindOperatingSystemByName("LINUX")
                },
                //MobilePlatforms = repository.GetAllMobilePlatforms(),
                MobilePlatforms = new List<MobilePlatform>()
                {
                    repository.FindMobilePlatformByName("ANDROID"),
                    repository.FindMobilePlatformByName("IPHONE"),
                    repository.FindMobilePlatformByName("BB")
                },
                Browsers = new List<Browser>()
                {
                    repository.FindBrowserByName("Internet Explorer 6"),
                    repository.FindBrowserByName("Internet Explorer 7"),
                    repository.FindBrowserByName("Internet Explorer 8"),
                    repository.FindBrowserByName("Internet Explorer 9"),
                    repository.FindBrowserByName("FIREFOX"),
                    repository.FindBrowserByName("CHROME"),
                    repository.FindBrowserByName("SAFARI"),
                },
                LicenceTypeMinimum = repository.FindLicenceTypeMinimumByName(1),
                LicenceTypeMaximum = repository.FindLicenceTypeMaximumByName(99),
                Languages = new List<Language>()
                {
                    repository.FindLanguageByName("ENGLISH")
                },
                SupportTypes = new List<SupportType>()
                {
                    repository.FindSupportTypeByName("PHONE"),
                    repository.FindSupportTypeByName("ONLINE")
                },
                SupportHours = repository.FindSupportHoursByName("24 HOURS"),
                SupportDays = repository.FindSupportDaysByName("7"),
                SupportTerritories = new List<SupportTerritory>()
                {
                    repository.FindSupportTerritoryByName("US"),
                },
                VideoTrainingSupport = true,
                //MaximumMeetingAttendees = 50,
                //MaximumWebinarAttendees = 0,
                CloudApplicationFeatures = new List<CloudApplicationFeature>()
                {
                    repository.FindFeatureByName("ADVANCED PROOFING & EDITING"),
                    repository.FindFeatureByName("ADVANCED REFERENCING & INDEXING"),
                    repository.FindFeatureByName("MAILING FEATURES"),
                    repository.FindFeatureByName("FORMULA MANAGEMENT"),
                    repository.FindFeatureByName("DATA MANAGEMENT"),
                    repository.FindFeatureByName("ADVANCED CHARTING & TABLES"),
                    repository.FindFeatureByName("ADVANCED DESIGN & ANIMATION"),
                    repository.FindFeatureByName("REAL-TIME COLLABORATION"),
                    repository.FindFeatureByName("AUTOMATIC VERSION MANAGEMENT"),
                    repository.FindFeatureByName("LARGE VIDEO FILES"),
                    repository.FindFeatureByName("OWN BRANDING"),
                    repository.FindFeatureByName("SHARED/COLLABORATION WORKSPACE"),
                    repository.FindFeatureByName("EMAIL CLIENT"),
                    repository.FindFeatureByName("CONTACT MANAGEMENT"),
                    repository.FindFeatureByName("SHARED CALENDAR"),
                    repository.FindFeatureByName("WEB MEETINGS"),
                    repository.FindFeatureByName("PROJECT MANAGEMENT / TASK MANAGER"),
                    repository.FindFeatureByName("WEB PUBLISHING"),
                    repository.FindFeatureByName("SOCIAL MEDIA INTEGRATION"),
                    repository.FindFeatureByName("INTERNAL WEBSITE"),
                    repository.FindFeatureByName("EXTERNAL CUSTOMER WEBSITE"),
                    repository.FindFeatureByName("READ & EDIT"),
                    repository.FindFeatureByName("SAVE WEB CONTENT"),
                    repository.FindFeatureByName("IMAGE CAPTURE"),
                    repository.FindFeatureByName("AUTOMATIC SYNC"),
                    repository.FindFeatureByName("MS OFFICE COMPATIBLE"),
                    //repository.FindFeatureByName("OFFLINE MODE"),
                    repository.FindFeatureByName("UNLIMITED DOCUMENT STORAGE"),
                    repository.FindFeatureByName("DOCUMENT REVISION HISTORY"),
                    repository.FindFeatureByName("DOCUMENT PASSWORD PROTECTION"),
                    //repository.FindFeatureByName("MOBILE/BROWSER EDITING"),
                    repository.FindFeatureByName("MULTI-USER / GUEST USER"),
                    repository.FindFeatureByName("3RD PARTY APIS"),
                    repository.FindFeatureByName("SSL SECURITY/ENCRYPTION"),
                },
                ApplicationCostPerMonth = 5.00M,
                //CallsPackageCostPerMonth = 0M,
                SetupFee = repository.FindSetupFeeByName("NOT APPLICABLE"),
                MinimumContract = repository.FindMinimumContractByName("NOT APPLICABLE"),
                PaymentFrequency = repository.FindPaymentFrequencyByName("MONTHLY"),
                PaymentOptions = new List<PaymentOption>()
                {
                    repository.FindPaymentOptionByName("CREDIT CARD"),
                    repository.FindPaymentOptionByName("PRE-PAY"),
                },
                FreeTrialPeriod = repository.FindFreeTrialPeriodByName("YES"),
                Category = repository.FindCategoryByName("OFFICE"),
                Vendor = repository.FindVendorByName("Google Apps for Business"),
                Description = repository.GetDescription(),
                AddDate = DateTime.Now,
                #region Ratings,Reviews,Case Studies,White Papers
                Ratings = new List<CloudApplicationRating>()
                {
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                },
                Reviews = new List<CloudApplicationReview>()
                {
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                },
                ThumbnailDocuments = new List<ThumbnailDocument>()
                {
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("WHITE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_WHITE_PAPER_FILEPATH+PDF_TEST_WHITE_PAPER_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_WHITE_PAPER_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_WHITE_PAPER_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_WHITE_PAPER_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("WHITE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_WHITE_PAPER_FILEPATH+PDF_TEST_WHITE_PAPER_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_WHITE_PAPER_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_WHITE_PAPER_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_WHITE_PAPER_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("WHITE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_WHITE_PAPER_FILEPATH+PDF_TEST_WHITE_PAPER_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_WHITE_PAPER_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_WHITE_PAPER_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_WHITE_PAPER_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("CASE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_CASE_STUDY_FILEPATH+PDF_TEST_CASE_STUDY_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_CASE_STUDY_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_CASE_STUDY_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_CASE_STUDY_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("CASE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_CASE_STUDY_FILEPATH+PDF_TEST_CASE_STUDY_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_CASE_STUDY_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_CASE_STUDY_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_CASE_STUDY_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("CASE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_CASE_STUDY_FILEPATH+PDF_TEST_CASE_STUDY_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_CASE_STUDY_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_CASE_STUDY_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_CASE_STUDY_FILENAME,
                    },
                },
                #endregion
            };

            repository.AddCloudApplication(ca);

            #endregion

            #region ZOHO DOCS
            ca = new CloudApplication()
            {
                Brand = "ZOHO docs",
                ServiceName = "Zoho Docs Standard",
                CompanyURL = "www.zoho.com",
                OperatingSystems = new List<Domain.Models.OperatingSystem>()
                {
                    repository.FindOperatingSystemByName("WIN"),
                    repository.FindOperatingSystemByName("MAC"),
                    //repository.FindOperatingSystemByName("LINUX")
                },
                //MobilePlatforms = repository.GetAllMobilePlatforms(),
                MobilePlatforms = new List<MobilePlatform>()
                {
                    repository.FindMobilePlatformByName("ANDROID"),
                    repository.FindMobilePlatformByName("IPHONE"),
                    repository.FindMobilePlatformByName("BB")
                },
                Browsers = new List<Browser>()
                {
                    repository.FindBrowserByName("Internet Explorer 6"),
                    repository.FindBrowserByName("Internet Explorer 7"),
                    repository.FindBrowserByName("Internet Explorer 8"),
                    repository.FindBrowserByName("Internet Explorer 9"),
                    repository.FindBrowserByName("FIREFOX"),
                    repository.FindBrowserByName("CHROME"),
                    repository.FindBrowserByName("SAFARI"),
                },
                LicenceTypeMinimum = repository.FindLicenceTypeMinimumByName(1),
                LicenceTypeMaximum = repository.FindLicenceTypeMaximumByName(99),
                Languages = new List<Language>()
                {
                    repository.FindLanguageByName("ENGLISH")
                },
                SupportTypes = new List<SupportType>()
                {
                    repository.FindSupportTypeByName("PHONE"),
                    repository.FindSupportTypeByName("EMAIL")
                },
                SupportHours = repository.FindSupportHoursByName("24 HOURS"),
                SupportDays = repository.FindSupportDaysByName("7"),
                SupportTerritories = new List<SupportTerritory>()
                {
                    repository.FindSupportTerritoryByName("US"),
                },
                VideoTrainingSupport = true,
                //MaximumMeetingAttendees = 50,
                //MaximumWebinarAttendees = 0,
                CloudApplicationFeatures = new List<CloudApplicationFeature>()
                {
                    repository.FindFeatureByName("ADVANCED PROOFING & EDITING"),
                    repository.FindFeatureByName("ADVANCED REFERENCING & INDEXING"),
                    repository.FindFeatureByName("MAILING FEATURES"),
                    repository.FindFeatureByName("FORMULA MANAGEMENT"),
                    repository.FindFeatureByName("DATA MANAGEMENT"),
                    repository.FindFeatureByName("ADVANCED CHARTING & TABLES"),
                    repository.FindFeatureByName("ADVANCED DESIGN & ANIMATION"),
                    repository.FindFeatureByName("REAL-TIME COLLABORATION"),
                    repository.FindFeatureByName("AUTOMATIC VERSION MANAGEMENT"),
                    repository.FindFeatureByName("LARGE VIDEO FILES"),
                    repository.FindFeatureByName("OWN BRANDING"),
                    repository.FindFeatureByName("SHARED/COLLABORATION WORKSPACE"),
                    repository.FindFeatureByName("EMAIL CLIENT"),
                    repository.FindFeatureByName("CONTACT MANAGEMENT"),
                    repository.FindFeatureByName("SHARED CALENDAR"),
                    repository.FindFeatureByName("WEB MEETINGS"),
                    repository.FindFeatureByName("PROJECT MANAGEMENT / TASK MANAGER"),
                    repository.FindFeatureByName("WEB PUBLISHING"),
                    repository.FindFeatureByName("SOCIAL MEDIA INTEGRATION"),
                    repository.FindFeatureByName("INTERNAL WEBSITE"),
                    repository.FindFeatureByName("EXTERNAL CUSTOMER WEBSITE"),
                    repository.FindFeatureByName("READ & EDIT"),
                    repository.FindFeatureByName("SAVE WEB CONTENT"),
                    repository.FindFeatureByName("IMAGE CAPTURE"),
                    repository.FindFeatureByName("AUTOMATIC SYNC"),
                    repository.FindFeatureByName("MS OFFICE COMPATIBLE"),
                    //repository.FindFeatureByName("OFFLINE MODE"),
                    repository.FindFeatureByName("UNLIMITED DOCUMENT STORAGE"),
                    repository.FindFeatureByName("DOCUMENT REVISION HISTORY"),
                    repository.FindFeatureByName("DOCUMENT PASSWORD PROTECTION"),
                    //repository.FindFeatureByName("MOBILE/BROWSER EDITING"),
                    repository.FindFeatureByName("MULTI-USER / GUEST USER"),
                    repository.FindFeatureByName("3RD PARTY APIS"),
                    repository.FindFeatureByName("SSL SECURITY/ENCRYPTION"),
                },
                ApplicationCostPerMonth = 3.00M,
                //CallsPackageCostPerMonth = 0M,
                SetupFee = repository.FindSetupFeeByName("NOT APPLICABLE"),
                MinimumContract = repository.FindMinimumContractByName("NOT APPLICABLE"),
                PaymentFrequency = repository.FindPaymentFrequencyByName("MONTHLY"),
                PaymentOptions = new List<PaymentOption>()
                {
                    repository.FindPaymentOptionByName("CREDIT CARD"),
                    repository.FindPaymentOptionByName("PRE-PAY"),
                },
                FreeTrialPeriod = repository.FindFreeTrialPeriodByName("YES"),
                Category = repository.FindCategoryByName("OFFICE"),
                Vendor = repository.FindVendorByName("ZOHO docs"),
                Description = repository.GetDescription(),
                AddDate = DateTime.Now,
                #region Ratings,Reviews,Case Studies,White Papers
                Ratings = new List<CloudApplicationRating>()
                {
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                },
                Reviews = new List<CloudApplicationReview>()
                {
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                },
                ThumbnailDocuments = new List<ThumbnailDocument>()
                {
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("WHITE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_WHITE_PAPER_FILEPATH+PDF_TEST_WHITE_PAPER_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_WHITE_PAPER_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_WHITE_PAPER_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_WHITE_PAPER_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("WHITE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_WHITE_PAPER_FILEPATH+PDF_TEST_WHITE_PAPER_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_WHITE_PAPER_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_WHITE_PAPER_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_WHITE_PAPER_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("WHITE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_WHITE_PAPER_FILEPATH+PDF_TEST_WHITE_PAPER_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_WHITE_PAPER_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_WHITE_PAPER_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_WHITE_PAPER_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("CASE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_CASE_STUDY_FILEPATH+PDF_TEST_CASE_STUDY_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_CASE_STUDY_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_CASE_STUDY_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_CASE_STUDY_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("CASE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_CASE_STUDY_FILEPATH+PDF_TEST_CASE_STUDY_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_CASE_STUDY_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_CASE_STUDY_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_CASE_STUDY_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("CASE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_CASE_STUDY_FILEPATH+PDF_TEST_CASE_STUDY_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_CASE_STUDY_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_CASE_STUDY_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_CASE_STUDY_FILENAME,
                    },
                },
                #endregion
            };

            repository.AddCloudApplication(ca);

            #endregion

            #region THINKFREE
            ca = new CloudApplication()
            {
                Brand = "Think Free",
                ServiceName = "Think Free Online",
                CompanyURL = "www.thinkfree.com",
                OperatingSystems = new List<Domain.Models.OperatingSystem>()
                {
                    repository.FindOperatingSystemByName("WIN"),
                    repository.FindOperatingSystemByName("MAC"),
                    //repository.FindOperatingSystemByName("LINUX")
                },
                //MobilePlatforms = repository.GetAllMobilePlatforms(),
                MobilePlatforms = new List<MobilePlatform>()
                {
                    repository.FindMobilePlatformByName("ANDROID"),
                    repository.FindMobilePlatformByName("IPHONE"),
                    repository.FindMobilePlatformByName("BB")
                },
                Browsers = new List<Browser>()
                {
                    repository.FindBrowserByName("Internet Explorer 6"),
                    repository.FindBrowserByName("Internet Explorer 7"),
                    repository.FindBrowserByName("Internet Explorer 8"),
                    repository.FindBrowserByName("Internet Explorer 9"),
                    repository.FindBrowserByName("FIREFOX"),
                    repository.FindBrowserByName("CHROME"),
                    repository.FindBrowserByName("SAFARI"),
                },
                LicenceTypeMinimum = repository.FindLicenceTypeMinimumByName(1),
                LicenceTypeMaximum = repository.FindLicenceTypeMaximumByName(99),
                Languages = new List<Language>()
                {
                    repository.FindLanguageByName("ENGLISH")
                },
                SupportTypes = new List<SupportType>()
                {
                    repository.FindSupportTypeByName("PHONE"),
                    repository.FindSupportTypeByName("EMAIL")
                },
                SupportHours = repository.FindSupportHoursByName("24 HOURS"),
                SupportDays = repository.FindSupportDaysByName("7"),
                SupportTerritories = new List<SupportTerritory>()
                {
                    repository.FindSupportTerritoryByName("US"),
                },
                VideoTrainingSupport = false,
                //MaximumMeetingAttendees = 50,
                //MaximumWebinarAttendees = 0,
                CloudApplicationFeatures = new List<CloudApplicationFeature>()
                {
                    repository.FindFeatureByName("ADVANCED PROOFING & EDITING"),
                    repository.FindFeatureByName("ADVANCED REFERENCING & INDEXING"),
                    repository.FindFeatureByName("MAILING FEATURES"),
                    repository.FindFeatureByName("FORMULA MANAGEMENT"),
                    repository.FindFeatureByName("DATA MANAGEMENT"),
                    repository.FindFeatureByName("ADVANCED CHARTING & TABLES"),
                    repository.FindFeatureByName("ADVANCED DESIGN & ANIMATION"),
                    repository.FindFeatureByName("REAL-TIME COLLABORATION"),
                    repository.FindFeatureByName("AUTOMATIC VERSION MANAGEMENT"),
                    repository.FindFeatureByName("LARGE VIDEO FILES"),
                    repository.FindFeatureByName("OWN BRANDING"),
                    //repository.FindFeatureByName("SHARED/COLLABORATION WORKSPACE"),
                    //repository.FindFeatureByName("EMAIL CLIENT"),
                    //repository.FindFeatureByName("CONTACT MANAGEMENT"),
                    repository.FindFeatureByName("SHARED CALENDAR"),
                    repository.FindFeatureByName("WEB MEETINGS"),
                    repository.FindFeatureByName("PROJECT MANAGEMENT / TASK MANAGER"),
                    repository.FindFeatureByName("WEB PUBLISHING"),
                    repository.FindFeatureByName("SOCIAL MEDIA INTEGRATION"),
                    repository.FindFeatureByName("INTERNAL WEBSITE"),
                    repository.FindFeatureByName("EXTERNAL CUSTOMER WEBSITE"),
                    repository.FindFeatureByName("READ & EDIT"),
                    repository.FindFeatureByName("SAVE WEB CONTENT"),
                    repository.FindFeatureByName("IMAGE CAPTURE"),
                    repository.FindFeatureByName("AUTOMATIC SYNC"),
                    repository.FindFeatureByName("MS OFFICE COMPATIBLE"),
                    repository.FindFeatureByName("OFFLINE MODE"),
                    repository.FindFeatureByName("UNLIMITED DOCUMENT STORAGE"),
                    //repository.FindFeatureByName("DOCUMENT REVISION HISTORY"),
                    repository.FindFeatureByName("DOCUMENT PASSWORD PROTECTION"),
                    repository.FindFeatureByName("MOBILE/BROWSER EDITING"),
                    //repository.FindFeatureByName("MULTI-USER / GUEST USER"),
                    repository.FindFeatureByName("3RD PARTY APIS"),
                    repository.FindFeatureByName("SSL SECURITY/ENCRYPTION"),
                },
                ApplicationCostPerMonth = 0.00M,
                //CallsPackageCostPerMonth = 0M,
                SetupFee = repository.FindSetupFeeByName("NOT APPLICABLE"),
                MinimumContract = repository.FindMinimumContractByName("NOT APPLICABLE"),
                PaymentFrequency = repository.FindPaymentFrequencyByName("MONTHLY"),
                PaymentOptions = new List<PaymentOption>()
                {
                    repository.FindPaymentOptionByName("CREDIT CARD"),
                    repository.FindPaymentOptionByName("PRE-PAY"),
                },
                FreeTrialPeriod = repository.FindFreeTrialPeriodByName("YES"),
                Category = repository.FindCategoryByName("OFFICE"),
                Vendor = repository.FindVendorByName("Think Free"),
                Description = repository.GetDescription(),
                AddDate = DateTime.Now,
                #region Ratings,Reviews,Case Studies,White Papers
                Ratings = new List<CloudApplicationRating>()
                {
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                },
                Reviews = new List<CloudApplicationReview>()
                {
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                },
                ThumbnailDocuments = new List<ThumbnailDocument>()
                {
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("WHITE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_WHITE_PAPER_FILEPATH+PDF_TEST_WHITE_PAPER_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_WHITE_PAPER_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_WHITE_PAPER_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_WHITE_PAPER_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("WHITE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_WHITE_PAPER_FILEPATH+PDF_TEST_WHITE_PAPER_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_WHITE_PAPER_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_WHITE_PAPER_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_WHITE_PAPER_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("WHITE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_WHITE_PAPER_FILEPATH+PDF_TEST_WHITE_PAPER_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_WHITE_PAPER_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_WHITE_PAPER_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_WHITE_PAPER_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("CASE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_CASE_STUDY_FILEPATH+PDF_TEST_CASE_STUDY_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_CASE_STUDY_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_CASE_STUDY_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_CASE_STUDY_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("CASE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_CASE_STUDY_FILEPATH+PDF_TEST_CASE_STUDY_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_CASE_STUDY_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_CASE_STUDY_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_CASE_STUDY_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("CASE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_CASE_STUDY_FILEPATH+PDF_TEST_CASE_STUDY_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_CASE_STUDY_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_CASE_STUDY_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_CASE_STUDY_FILENAME,
                    },
                },
                #endregion
            };

            repository.AddCloudApplication(ca);

            #endregion

            #region FENG OFFICE
            ca = new CloudApplication()
            {
                Brand = "feng OFFICE",
                ServiceName = "Feng Sky",
                CompanyURL = "www.fengoffice.com",
                OperatingSystems = new List<Domain.Models.OperatingSystem>()
                {
                    repository.FindOperatingSystemByName("WIN"),
                    repository.FindOperatingSystemByName("MAC"),
                    //repository.FindOperatingSystemByName("LINUX")
                },
                //MobilePlatforms = repository.GetAllMobilePlatforms(),
                MobilePlatforms = new List<MobilePlatform>()
                {
                    repository.FindMobilePlatformByName("ANDROID"),
                    repository.FindMobilePlatformByName("IPHONE"),
                    repository.FindMobilePlatformByName("BB")
                },
                Browsers = new List<Browser>()
                {
                    repository.FindBrowserByName("Internet Explorer 6"),
                    repository.FindBrowserByName("Internet Explorer 7"),
                    repository.FindBrowserByName("Internet Explorer 8"),
                    repository.FindBrowserByName("Internet Explorer 9"),
                    repository.FindBrowserByName("FIREFOX"),
                    repository.FindBrowserByName("CHROME"),
                    repository.FindBrowserByName("SAFARI"),
                },
                LicenceTypeMinimum = repository.FindLicenceTypeMinimumByName(1),
                LicenceTypeMaximum = repository.FindLicenceTypeMaximumByName(99),
                Languages = new List<Language>()
                {
                    repository.FindLanguageByName("ENGLISH")
                },
                SupportTypes = new List<SupportType>()
                {
                    repository.FindSupportTypeByName("FAQ"),
                    repository.FindSupportTypeByName("ONLINE")
                },
                SupportHours = repository.FindSupportHoursByName("24 HOURS"),
                SupportDays = repository.FindSupportDaysByName("7"),
                SupportTerritories = new List<SupportTerritory>()
                {
                    repository.FindSupportTerritoryByName("US"),
                },
                VideoTrainingSupport = false,
                //MaximumMeetingAttendees = 50,
                //MaximumWebinarAttendees = 0,
                CloudApplicationFeatures = new List<CloudApplicationFeature>()
                {
                    repository.FindFeatureByName("ADVANCED PROOFING & EDITING"),
                    repository.FindFeatureByName("ADVANCED REFERENCING & INDEXING"),
                    repository.FindFeatureByName("MAILING FEATURES"),
                    //repository.FindFeatureByName("FORMULA MANAGEMENT"),
                    //repository.FindFeatureByName("DATA MANAGEMENT"),
                    //repository.FindFeatureByName("ADVANCED CHARTING & TABLES"),
                    //repository.FindFeatureByName("ADVANCED DESIGN & ANIMATION"),
                    //repository.FindFeatureByName("REAL-TIME COLLABORATION"),
                    //repository.FindFeatureByName("AUTOMATIC VERSION MANAGEMENT"),
                    //repository.FindFeatureByName("LARGE VIDEO FILES"),
                    //repository.FindFeatureByName("OWN BRANDING"),
                    repository.FindFeatureByName("SHARED/COLLABORATION WORKSPACE"),
                    repository.FindFeatureByName("EMAIL CLIENT"),
                    repository.FindFeatureByName("CONTACT MANAGEMENT"),
                    repository.FindFeatureByName("SHARED CALENDAR"),
                    repository.FindFeatureByName("WEB MEETINGS"),
                    repository.FindFeatureByName("PROJECT MANAGEMENT / TASK MANAGER"),
                    repository.FindFeatureByName("WEB PUBLISHING"),
                    repository.FindFeatureByName("SOCIAL MEDIA INTEGRATION"),
                    repository.FindFeatureByName("INTERNAL WEBSITE"),
                    repository.FindFeatureByName("EXTERNAL CUSTOMER WEBSITE"),
                    repository.FindFeatureByName("READ & EDIT"),
                    repository.FindFeatureByName("SAVE WEB CONTENT"),
                    repository.FindFeatureByName("IMAGE CAPTURE"),
                    repository.FindFeatureByName("AUTOMATIC SYNC"),
                    repository.FindFeatureByName("MS OFFICE COMPATIBLE"),
                    //repository.FindFeatureByName("OFFLINE MODE"),
                    repository.FindFeatureByName("UNLIMITED DOCUMENT STORAGE"),
                    //repository.FindFeatureByName("DOCUMENT REVISION HISTORY"),
                    //repository.FindFeatureByName("DOCUMENT PASSWORD PROTECTION"),
                    //repository.FindFeatureByName("MOBILE/BROWSER EDITING"),
                    repository.FindFeatureByName("MULTI-USER / GUEST USER"),
                    //repository.FindFeatureByName("3RD PARTY APIS"),
                    repository.FindFeatureByName("SSL SECURITY/ENCRYPTION"),
                },
                ApplicationCostPerMonth = 10.00M,
                //CallsPackageCostPerMonth = 0M,
                SetupFee = repository.FindSetupFeeByName("NOT APPLICABLE"),
                MinimumContract = repository.FindMinimumContractByName("NOT APPLICABLE"),
                PaymentFrequency = repository.FindPaymentFrequencyByName("MONTHLY"),
                PaymentOptions = new List<PaymentOption>()
                {
                    repository.FindPaymentOptionByName("CREDIT CARD"),
                    repository.FindPaymentOptionByName("PRE-PAY"),
                },
                FreeTrialPeriod = repository.FindFreeTrialPeriodByName("YES"),
                Category = repository.FindCategoryByName("OFFICE"),
                Vendor = repository.FindVendorByName("feng OFFICE"),
                Description = repository.GetDescription(),
                AddDate = DateTime.Now,
                #region Ratings,Reviews,Case Studies,White Papers
                Ratings = new List<CloudApplicationRating>()
                {
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                },
                Reviews = new List<CloudApplicationReview>()
                {
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                },
                ThumbnailDocuments = new List<ThumbnailDocument>()
                {
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("WHITE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_WHITE_PAPER_FILEPATH+PDF_TEST_WHITE_PAPER_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_WHITE_PAPER_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_WHITE_PAPER_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_WHITE_PAPER_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("WHITE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_WHITE_PAPER_FILEPATH+PDF_TEST_WHITE_PAPER_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_WHITE_PAPER_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_WHITE_PAPER_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_WHITE_PAPER_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("WHITE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_WHITE_PAPER_FILEPATH+PDF_TEST_WHITE_PAPER_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_WHITE_PAPER_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_WHITE_PAPER_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_WHITE_PAPER_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("CASE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_CASE_STUDY_FILEPATH+PDF_TEST_CASE_STUDY_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_CASE_STUDY_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_CASE_STUDY_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_CASE_STUDY_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("CASE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_CASE_STUDY_FILEPATH+PDF_TEST_CASE_STUDY_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_CASE_STUDY_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_CASE_STUDY_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_CASE_STUDY_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("CASE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_CASE_STUDY_FILEPATH+PDF_TEST_CASE_STUDY_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_CASE_STUDY_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_CASE_STUDY_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_CASE_STUDY_FILENAME,
                    },
                },
                #endregion
            };

            repository.AddCloudApplication(ca);

            #endregion

            #region ZCUBES
            ca = new CloudApplication()
            {
                Brand = "Z CUBES",
                ServiceName = "Enterprise",
                CompanyURL = "www.zcubes.com",
                OperatingSystems = new List<Domain.Models.OperatingSystem>()
                {
                    repository.FindOperatingSystemByName("WIN"),
                    repository.FindOperatingSystemByName("MAC"),
                    //repository.FindOperatingSystemByName("LINUX")
                },
                //MobilePlatforms = repository.GetAllMobilePlatforms(),
                MobilePlatforms = new List<MobilePlatform>()
                {
                    repository.FindMobilePlatformByName("ANDROID"),
                    repository.FindMobilePlatformByName("IPHONE"),
                    repository.FindMobilePlatformByName("BB")
                },
                Browsers = new List<Browser>()
                {
                    repository.FindBrowserByName("Internet Explorer 6"),
                    repository.FindBrowserByName("Internet Explorer 7"),
                    repository.FindBrowserByName("Internet Explorer 8"),
                    repository.FindBrowserByName("Internet Explorer 9"),
                    repository.FindBrowserByName("FIREFOX"),
                    repository.FindBrowserByName("CHROME"),
                    repository.FindBrowserByName("SAFARI"),
                },
                LicenceTypeMinimum = repository.FindLicenceTypeMinimumByName(1),
                LicenceTypeMaximum = repository.FindLicenceTypeMaximumByName(99),
                Languages = new List<Language>()
                {
                    repository.FindLanguageByName("ENGLISH")
                },
                SupportTypes = new List<SupportType>()
                {
                    repository.FindSupportTypeByName("FAQ"),
                    repository.FindSupportTypeByName("TROUBLETICKET")
                },
                SupportHours = repository.FindSupportHoursByName("NOT APPLICABLE"),
                SupportDays = repository.FindSupportDaysByName("NOT APPLICABLE"),
                SupportTerritories = new List<SupportTerritory>()
                {
                    repository.FindSupportTerritoryByName("US"),
                },
                VideoTrainingSupport = false,
                //MaximumMeetingAttendees = 50,
                //MaximumWebinarAttendees = 0,
                CloudApplicationFeatures = new List<CloudApplicationFeature>()
                {
                    repository.FindFeatureByName("ADVANCED PROOFING & EDITING"),
                    repository.FindFeatureByName("ADVANCED REFERENCING & INDEXING"),
                    repository.FindFeatureByName("MAILING FEATURES"),
                    repository.FindFeatureByName("FORMULA MANAGEMENT"),
                    repository.FindFeatureByName("DATA MANAGEMENT"),
                    repository.FindFeatureByName("ADVANCED CHARTING & TABLES"),
                    repository.FindFeatureByName("ADVANCED DESIGN & ANIMATION"),
                    repository.FindFeatureByName("REAL-TIME COLLABORATION"),
                    repository.FindFeatureByName("AUTOMATIC VERSION MANAGEMENT"),
                    repository.FindFeatureByName("LARGE VIDEO FILES"),
                    repository.FindFeatureByName("OWN BRANDING"),
                    repository.FindFeatureByName("SHARED/COLLABORATION WORKSPACE"),
                    //repository.FindFeatureByName("EMAIL CLIENT"),
                    repository.FindFeatureByName("CONTACT MANAGEMENT"),
                    repository.FindFeatureByName("SHARED CALENDAR"),
                    repository.FindFeatureByName("WEB MEETINGS"),
                    repository.FindFeatureByName("PROJECT MANAGEMENT / TASK MANAGER"),
                    repository.FindFeatureByName("WEB PUBLISHING"),
                    repository.FindFeatureByName("SOCIAL MEDIA INTEGRATION"),
                    repository.FindFeatureByName("INTERNAL WEBSITE"),
                    repository.FindFeatureByName("EXTERNAL CUSTOMER WEBSITE"),
                    repository.FindFeatureByName("READ & EDIT"),
                    repository.FindFeatureByName("SAVE WEB CONTENT"),
                    repository.FindFeatureByName("IMAGE CAPTURE"),
                    repository.FindFeatureByName("AUTOMATIC SYNC"),
                    //repository.FindFeatureByName("MS OFFICE COMPATIBLE"),
                    //repository.FindFeatureByName("OFFLINE MODE"),
                    repository.FindFeatureByName("UNLIMITED DOCUMENT STORAGE"),
                    repository.FindFeatureByName("DOCUMENT REVISION HISTORY"),
                    repository.FindFeatureByName("DOCUMENT PASSWORD PROTECTION"),
                    repository.FindFeatureByName("MOBILE/BROWSER EDITING"),
                    repository.FindFeatureByName("MULTI-USER / GUEST USER"),
                    repository.FindFeatureByName("3RD PARTY APIS"),
                    repository.FindFeatureByName("SSL SECURITY/ENCRYPTION"),
                },
                ApplicationCostPerMonth = 0.00M,
                //CallsPackageCostPerMonth = 0M,
                SetupFee = repository.FindSetupFeeByName("NOT APPLICABLE"),
                MinimumContract = repository.FindMinimumContractByName("NOT APPLICABLE"),
                PaymentFrequency = repository.FindPaymentFrequencyByName("MONTHLY"),
                PaymentOptions = new List<PaymentOption>()
                {
                    repository.FindPaymentOptionByName("CREDIT CARD"),
                    repository.FindPaymentOptionByName("PRE-PAY"),
                },
                FreeTrialPeriod = repository.FindFreeTrialPeriodByName("YES"),
                Category = repository.FindCategoryByName("OFFICE"),
                Vendor = repository.FindVendorByName("Z CUBES"),
                Description = repository.GetDescription(),
                AddDate = DateTime.Now,
                #region Ratings,Reviews,Case Studies,White Papers
                Ratings = new List<CloudApplicationRating>()
                {
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                },
                Reviews = new List<CloudApplicationReview>()
                {
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                },
                ThumbnailDocuments = new List<ThumbnailDocument>()
                {
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("WHITE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_WHITE_PAPER_FILEPATH+PDF_TEST_WHITE_PAPER_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_WHITE_PAPER_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_WHITE_PAPER_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_WHITE_PAPER_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("WHITE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_WHITE_PAPER_FILEPATH+PDF_TEST_WHITE_PAPER_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_WHITE_PAPER_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_WHITE_PAPER_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_WHITE_PAPER_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("WHITE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_WHITE_PAPER_FILEPATH+PDF_TEST_WHITE_PAPER_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_WHITE_PAPER_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_WHITE_PAPER_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_WHITE_PAPER_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("CASE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_CASE_STUDY_FILEPATH+PDF_TEST_CASE_STUDY_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_CASE_STUDY_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_CASE_STUDY_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_CASE_STUDY_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("CASE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_CASE_STUDY_FILEPATH+PDF_TEST_CASE_STUDY_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_CASE_STUDY_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_CASE_STUDY_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_CASE_STUDY_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("CASE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_CASE_STUDY_FILEPATH+PDF_TEST_CASE_STUDY_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_CASE_STUDY_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_CASE_STUDY_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_CASE_STUDY_FILENAME,
                    },
                },
                #endregion
            };

            repository.AddCloudApplication(ca);

            #endregion

            #region HYPEROFFICE
            ca = new CloudApplication()
            {
                Brand = "HyperOffice",
                ServiceName = "Online Collaboration",
                CompanyURL = "www.hyperoffice.com",
                OperatingSystems = new List<Domain.Models.OperatingSystem>()
                {
                    repository.FindOperatingSystemByName("WIN"),
                    repository.FindOperatingSystemByName("MAC"),
                    //repository.FindOperatingSystemByName("LINUX")
                },
                //MobilePlatforms = repository.GetAllMobilePlatforms(),
                MobilePlatforms = new List<MobilePlatform>()
                {
                    repository.FindMobilePlatformByName("ANDROID"),
                    repository.FindMobilePlatformByName("IPHONE"),
                    repository.FindMobilePlatformByName("BB")
                },
                Browsers = new List<Browser>()
                {
                    repository.FindBrowserByName("Internet Explorer 6"),
                    repository.FindBrowserByName("Internet Explorer 7"),
                    repository.FindBrowserByName("Internet Explorer 8"),
                    repository.FindBrowserByName("Internet Explorer 9"),
                    repository.FindBrowserByName("FIREFOX"),
                    repository.FindBrowserByName("CHROME"),
                    repository.FindBrowserByName("SAFARI"),
                },
                LicenceTypeMinimum = repository.FindLicenceTypeMinimumByName(5),
                LicenceTypeMaximum = repository.FindLicenceTypeMaximumByName(250),
                Languages = new List<Language>()
                {
                    repository.FindLanguageByName("ENGLISH")
                },
                SupportTypes = new List<SupportType>()
                {
                    repository.FindSupportTypeByName("PHONE"),
                    repository.FindSupportTypeByName("EMAIL")
                },
                SupportHours = repository.FindSupportHoursByName("24 HOURS"),
                SupportDays = repository.FindSupportDaysByName("7"),
                SupportTerritories = new List<SupportTerritory>()
                {
                    repository.FindSupportTerritoryByName("US"),
                },
                VideoTrainingSupport = false,
                //MaximumMeetingAttendees = 50,
                //MaximumWebinarAttendees = 0,
                CloudApplicationFeatures = new List<CloudApplicationFeature>()
                {
                    //repository.FindFeatureByName("ADVANCED PROOFING & EDITING"),
                    //repository.FindFeatureByName("ADVANCED REFERENCING & INDEXING"),
                    //repository.FindFeatureByName("MAILING FEATURES"),
                    //repository.FindFeatureByName("FORMULA MANAGEMENT"),
                    //repository.FindFeatureByName("DATA MANAGEMENT"),
                    //repository.FindFeatureByName("ADVANCED CHARTING & TABLES"),
                    //repository.FindFeatureByName("ADVANCED DESIGN & ANIMATION"),
                    //repository.FindFeatureByName("REAL-TIME COLLABORATION"),
                    //repository.FindFeatureByName("AUTOMATIC VERSION MANAGEMENT"),
                    //repository.FindFeatureByName("LARGE VIDEO FILES"),
                    //repository.FindFeatureByName("OWN BRANDING"),
                    repository.FindFeatureByName("SHARED/COLLABORATION WORKSPACE"),
                    repository.FindFeatureByName("EMAIL CLIENT"),
                    repository.FindFeatureByName("CONTACT MANAGEMENT"),
                    repository.FindFeatureByName("SHARED CALENDAR"),
                    repository.FindFeatureByName("WEB MEETINGS"),
                    repository.FindFeatureByName("PROJECT MANAGEMENT / TASK MANAGER"),
                    repository.FindFeatureByName("WEB PUBLISHING"),
                    repository.FindFeatureByName("SOCIAL MEDIA INTEGRATION"),
                    repository.FindFeatureByName("INTERNAL WEBSITE"),
                    repository.FindFeatureByName("EXTERNAL CUSTOMER WEBSITE"),
                    repository.FindFeatureByName("READ & EDIT"),
                    repository.FindFeatureByName("SAVE WEB CONTENT"),
                    repository.FindFeatureByName("IMAGE CAPTURE"),
                    repository.FindFeatureByName("AUTOMATIC SYNC"),
                    //repository.FindFeatureByName("MS OFFICE COMPATIBLE"),
                    //repository.FindFeatureByName("OFFLINE MODE"),
                    repository.FindFeatureByName("UNLIMITED DOCUMENT STORAGE"),
                    //repository.FindFeatureByName("DOCUMENT REVISION HISTORY"),
                    //repository.FindFeatureByName("DOCUMENT PASSWORD PROTECTION"),
                    //repository.FindFeatureByName("MOBILE/BROWSER EDITING"),
                    repository.FindFeatureByName("MULTI-USER / GUEST USER"),
                    repository.FindFeatureByName("3RD PARTY APIS"),
                    repository.FindFeatureByName("SSL SECURITY/ENCRYPTION"),
                },
                ApplicationCostPerMonth = 44.99M,
                //CallsPackageCostPerMonth = 0M,
                SetupFee = repository.FindSetupFeeByName("NOT APPLICABLE"),
                MinimumContract = repository.FindMinimumContractByName("12 MONTHS"),
                PaymentFrequency = repository.FindPaymentFrequencyByName("MONTHLY"),
                PaymentOptions = new List<PaymentOption>()
                {
                    repository.FindPaymentOptionByName("CREDIT CARD"),
                    repository.FindPaymentOptionByName("PRE-PAY"),
                },
                FreeTrialPeriod = repository.FindFreeTrialPeriodByName("YES"),
                Category = repository.FindCategoryByName("OFFICE"),
                Vendor = repository.FindVendorByName("HyperOffice"),
                Description = repository.GetDescription(),
                AddDate = DateTime.Now,
                #region Ratings,Reviews,Case Studies,White Papers
                Ratings = new List<CloudApplicationRating>()
                {
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                },
                Reviews = new List<CloudApplicationReview>()
                {
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                },
                ThumbnailDocuments = new List<ThumbnailDocument>()
                {
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("WHITE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_WHITE_PAPER_FILEPATH+PDF_TEST_WHITE_PAPER_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_WHITE_PAPER_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_WHITE_PAPER_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_WHITE_PAPER_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("WHITE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_WHITE_PAPER_FILEPATH+PDF_TEST_WHITE_PAPER_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_WHITE_PAPER_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_WHITE_PAPER_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_WHITE_PAPER_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("WHITE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_WHITE_PAPER_FILEPATH+PDF_TEST_WHITE_PAPER_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_WHITE_PAPER_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_WHITE_PAPER_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_WHITE_PAPER_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("CASE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_CASE_STUDY_FILEPATH+PDF_TEST_CASE_STUDY_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_CASE_STUDY_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_CASE_STUDY_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_CASE_STUDY_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("CASE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_CASE_STUDY_FILEPATH+PDF_TEST_CASE_STUDY_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_CASE_STUDY_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_CASE_STUDY_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_CASE_STUDY_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("CASE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_CASE_STUDY_FILEPATH+PDF_TEST_CASE_STUDY_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_CASE_STUDY_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_CASE_STUDY_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_CASE_STUDY_FILENAME,
                    },
                },
                #endregion
            };

            repository.AddCloudApplication(ca);

            #endregion

            #region MYOFFICE
            ca = new CloudApplication()
            {
                Brand = "myoffice",
                ServiceName = "O",
                CompanyURL = "www.myoffice.net",
                OperatingSystems = new List<Domain.Models.OperatingSystem>()
                {
                    repository.FindOperatingSystemByName("WIN"),
                    repository.FindOperatingSystemByName("MAC"),
                    //repository.FindOperatingSystemByName("LINUX")
                },
                //MobilePlatforms = repository.GetAllMobilePlatforms(),
                MobilePlatforms = new List<MobilePlatform>()
                {
                    repository.FindMobilePlatformByName("ANDROID"),
                    repository.FindMobilePlatformByName("IPHONE"),
                    repository.FindMobilePlatformByName("BB")
                },
                Browsers = new List<Browser>()
                {
                    repository.FindBrowserByName("Internet Explorer 6"),
                    repository.FindBrowserByName("Internet Explorer 7"),
                    repository.FindBrowserByName("Internet Explorer 8"),
                    repository.FindBrowserByName("Internet Explorer 9"),
                    repository.FindBrowserByName("FIREFOX"),
                    repository.FindBrowserByName("CHROME"),
                    repository.FindBrowserByName("SAFARI"),
                },
                LicenceTypeMinimum = repository.FindLicenceTypeMinimumByName(1),
                LicenceTypeMaximum = repository.FindLicenceTypeMaximumByName(99),
                Languages = new List<Language>()
                {
                    repository.FindLanguageByName("ENGLISH")
                },
                SupportTypes = new List<SupportType>()
                {
                    repository.FindSupportTypeByName("PHONE"),
                    repository.FindSupportTypeByName("EMAIL")
                },
                SupportHours = repository.FindSupportHoursByName("9AM-5PM"),
                SupportDays = repository.FindSupportDaysByName("5"),
                SupportTerritories = new List<SupportTerritory>()
                {
                    repository.FindSupportTerritoryByName("UK"),
                },
                VideoTrainingSupport = true,
                //MaximumMeetingAttendees = 50,
                //MaximumWebinarAttendees = 0,
                CloudApplicationFeatures = new List<CloudApplicationFeature>()
                {
                    //repository.FindFeatureByName("ADVANCED PROOFING & EDITING"),
                    //repository.FindFeatureByName("ADVANCED REFERENCING & INDEXING"),
                    //repository.FindFeatureByName("MAILING FEATURES"),
                    //repository.FindFeatureByName("FORMULA MANAGEMENT"),
                    //repository.FindFeatureByName("DATA MANAGEMENT"),
                    //repository.FindFeatureByName("ADVANCED CHARTING & TABLES"),
                    //repository.FindFeatureByName("ADVANCED DESIGN & ANIMATION"),
                    //repository.FindFeatureByName("REAL-TIME COLLABORATION"),
                    //repository.FindFeatureByName("AUTOMATIC VERSION MANAGEMENT"),
                    //repository.FindFeatureByName("LARGE VIDEO FILES"),
                    //repository.FindFeatureByName("OWN BRANDING"),
                    repository.FindFeatureByName("SHARED/COLLABORATION WORKSPACE"),
                    repository.FindFeatureByName("EMAIL CLIENT"),
                    repository.FindFeatureByName("CONTACT MANAGEMENT"),
                    repository.FindFeatureByName("SHARED CALENDAR"),
                    repository.FindFeatureByName("WEB MEETINGS"),
                    repository.FindFeatureByName("PROJECT MANAGEMENT / TASK MANAGER"),
                    repository.FindFeatureByName("WEB PUBLISHING"),
                    repository.FindFeatureByName("SOCIAL MEDIA INTEGRATION"),
                    repository.FindFeatureByName("INTERNAL WEBSITE"),
                    repository.FindFeatureByName("EXTERNAL CUSTOMER WEBSITE"),
                    repository.FindFeatureByName("READ & EDIT"),
                    repository.FindFeatureByName("SAVE WEB CONTENT"),
                    repository.FindFeatureByName("IMAGE CAPTURE"),
                    repository.FindFeatureByName("AUTOMATIC SYNC"),
                    //repository.FindFeatureByName("MS OFFICE COMPATIBLE"),
                    repository.FindFeatureByName("OFFLINE MODE"),
                    repository.FindFeatureByName("UNLIMITED DOCUMENT STORAGE"),
                    //repository.FindFeatureByName("DOCUMENT REVISION HISTORY"),
                    //repository.FindFeatureByName("DOCUMENT PASSWORD PROTECTION"),
                    //repository.FindFeatureByName("MOBILE/BROWSER EDITING"),
                    repository.FindFeatureByName("MULTI-USER / GUEST USER"),
                    repository.FindFeatureByName("3RD PARTY APIS"),
                    repository.FindFeatureByName("SSL SECURITY/ENCRYPTION"),
                },
                ApplicationCostPerMonth = 0.00M,
                ApplicationCostPerAnnum = 49.50M,
                //CallsPackageCostPerMonth = 0M,
                SetupFee = repository.FindSetupFeeByName("NOT APPLICABLE"),
                MinimumContract = repository.FindMinimumContractByName("12 MONTHS"),
                PaymentFrequency = repository.FindPaymentFrequencyByName("ANNUAL"),
                PaymentOptions = new List<PaymentOption>()
                {
                    repository.FindPaymentOptionByName("CREDIT CARD"),
                    repository.FindPaymentOptionByName("PRE-PAY"),
                },
                FreeTrialPeriod = repository.FindFreeTrialPeriodByName("YES"),
                Category = repository.FindCategoryByName("OFFICE"),
                Vendor = repository.FindVendorByName("myoffice"),
                Description = repository.GetDescription(),
                AddDate = DateTime.Now,
                #region Ratings,Reviews,Case Studies,White Papers
                Ratings = new List<CloudApplicationRating>()
                {
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                },
                Reviews = new List<CloudApplicationReview>()
                {
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                },
                ThumbnailDocuments = new List<ThumbnailDocument>()
                {
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("WHITE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_WHITE_PAPER_FILEPATH+PDF_TEST_WHITE_PAPER_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_WHITE_PAPER_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_WHITE_PAPER_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_WHITE_PAPER_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("WHITE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_WHITE_PAPER_FILEPATH+PDF_TEST_WHITE_PAPER_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_WHITE_PAPER_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_WHITE_PAPER_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_WHITE_PAPER_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("WHITE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_WHITE_PAPER_FILEPATH+PDF_TEST_WHITE_PAPER_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_WHITE_PAPER_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_WHITE_PAPER_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_WHITE_PAPER_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("CASE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_CASE_STUDY_FILEPATH+PDF_TEST_CASE_STUDY_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_CASE_STUDY_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_CASE_STUDY_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_CASE_STUDY_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("CASE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_CASE_STUDY_FILEPATH+PDF_TEST_CASE_STUDY_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_CASE_STUDY_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_CASE_STUDY_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_CASE_STUDY_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("CASE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_CASE_STUDY_FILEPATH+PDF_TEST_CASE_STUDY_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_CASE_STUDY_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_CASE_STUDY_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_CASE_STUDY_FILENAME,
                    },
                },
                #endregion
            };

            repository.AddCloudApplication(ca);

            #endregion

            #region QUICKOFFICE
            ca = new CloudApplication()
            {
                Brand = "Quickoffice",
                ServiceName = "Quickoffice Pro",
                CompanyURL = "www.quickoffice.com",
                OperatingSystems = new List<Domain.Models.OperatingSystem>()
                {
                    repository.FindOperatingSystemByName("WIN"),
                    repository.FindOperatingSystemByName("MAC"),
                    //repository.FindOperatingSystemByName("LINUX")
                },
                //MobilePlatforms = repository.GetAllMobilePlatforms(),
                MobilePlatforms = new List<MobilePlatform>()
                {
                    repository.FindMobilePlatformByName("ANDROID"),
                    repository.FindMobilePlatformByName("IPHONE"),
                    repository.FindMobilePlatformByName("BB")
                },
                Browsers = new List<Browser>()
                {
                    repository.FindBrowserByName("Internet Explorer 6"),
                    repository.FindBrowserByName("Internet Explorer 7"),
                    repository.FindBrowserByName("Internet Explorer 8"),
                    repository.FindBrowserByName("Internet Explorer 9"),
                    repository.FindBrowserByName("FIREFOX"),
                    repository.FindBrowserByName("CHROME"),
                    repository.FindBrowserByName("SAFARI"),
                },
                LicenceTypeMinimum = repository.FindLicenceTypeMinimumByName(1),
                LicenceTypeMaximum = repository.FindLicenceTypeMaximumByName(99),
                Languages = new List<Language>()
                {
                    repository.FindLanguageByName("ENGLISH")
                },
                SupportTypes = new List<SupportType>()
                {
                    repository.FindSupportTypeByName("PHONE"),
                    repository.FindSupportTypeByName("EMAIL")
                },
                SupportHours = repository.FindSupportHoursByName("NOT APPLICABLE"),
                SupportDays = repository.FindSupportDaysByName("NOT APPLICABLE"),
                SupportTerritories = new List<SupportTerritory>()
                {
                    repository.FindSupportTerritoryByName("UK"),
                },
                VideoTrainingSupport = false,
                //MaximumMeetingAttendees = 50,
                //MaximumWebinarAttendees = 0,
                CloudApplicationFeatures = new List<CloudApplicationFeature>()
                {
                    //repository.FindFeatureByName("ADVANCED PROOFING & EDITING"),
                    //repository.FindFeatureByName("ADVANCED REFERENCING & INDEXING"),
                    //repository.FindFeatureByName("MAILING FEATURES"),
                    //repository.FindFeatureByName("FORMULA MANAGEMENT"),
                    //repository.FindFeatureByName("DATA MANAGEMENT"),
                    //repository.FindFeatureByName("ADVANCED CHARTING & TABLES"),
                    //repository.FindFeatureByName("ADVANCED DESIGN & ANIMATION"),
                    //repository.FindFeatureByName("REAL-TIME COLLABORATION"),
                    //repository.FindFeatureByName("AUTOMATIC VERSION MANAGEMENT"),
                    //repository.FindFeatureByName("LARGE VIDEO FILES"),
                    //repository.FindFeatureByName("OWN BRANDING"),
                    //repository.FindFeatureByName("SHARED/COLLABORATION WORKSPACE"),
                    //repository.FindFeatureByName("EMAIL CLIENT"),
                    //repository.FindFeatureByName("CONTACT MANAGEMENT"),
                    //repository.FindFeatureByName("SHARED CALENDAR"),
                    //repository.FindFeatureByName("WEB MEETINGS"),
                    //repository.FindFeatureByName("PROJECT MANAGEMENT / TASK MANAGER"),
                    //repository.FindFeatureByName("WEB PUBLISHING"),
                    //repository.FindFeatureByName("SOCIAL MEDIA INTEGRATION"),
                    //repository.FindFeatureByName("INTERNAL WEBSITE"),
                    //repository.FindFeatureByName("EXTERNAL CUSTOMER WEBSITE"),
                    //repository.FindFeatureByName("READ & EDIT"),
                    //repository.FindFeatureByName("SAVE WEB CONTENT"),
                    //repository.FindFeatureByName("IMAGE CAPTURE"),
                    //repository.FindFeatureByName("AUTOMATIC SYNC"),
                    //repository.FindFeatureByName("MS OFFICE COMPATIBLE"),
                    //repository.FindFeatureByName("OFFLINE MODE"),
                    //repository.FindFeatureByName("UNLIMITED DOCUMENT STORAGE"),
                    repository.FindFeatureByName("DOCUMENT REVISION HISTORY"),
                    repository.FindFeatureByName("DOCUMENT PASSWORD PROTECTION"),
                    repository.FindFeatureByName("MOBILE/BROWSER EDITING"),
                    //repository.FindFeatureByName("MULTI-USER / GUEST USER"),
                    //repository.FindFeatureByName("3RD PARTY APIS"),
                    //repository.FindFeatureByName("SSL SECURITY/ENCRYPTION"),
                },
                ApplicationCostPerMonth = 0.00M,
                //CallsPackageCostPerMonth = 0M,
                SetupFee = repository.FindSetupFeeByName("£9.21"),
                MinimumContract = repository.FindMinimumContractByName("NOT APPLICABLE"),
                PaymentFrequency = repository.FindPaymentFrequencyByName("ONE-OFF"),
                PaymentOptions = new List<PaymentOption>()
                {
                    repository.FindPaymentOptionByName("CREDIT CARD"),
                    repository.FindPaymentOptionByName("PRE-PAY"),
                },
                FreeTrialPeriod = repository.FindFreeTrialPeriodByName("NO"),
                Category = repository.FindCategoryByName("OFFICE"),
                Vendor = repository.FindVendorByName("Quickoffice"),
                Description = repository.GetDescription(),
                AddDate = DateTime.Now,
                #region Ratings,Reviews,Case Studies,White Papers
                Ratings = new List<CloudApplicationRating>()
                {
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                },
                Reviews = new List<CloudApplicationReview>()
                {
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                },
                ThumbnailDocuments = new List<ThumbnailDocument>()
                {
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("WHITE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_WHITE_PAPER_FILEPATH+PDF_TEST_WHITE_PAPER_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_WHITE_PAPER_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_WHITE_PAPER_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_WHITE_PAPER_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("WHITE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_WHITE_PAPER_FILEPATH+PDF_TEST_WHITE_PAPER_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_WHITE_PAPER_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_WHITE_PAPER_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_WHITE_PAPER_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("WHITE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_WHITE_PAPER_FILEPATH+PDF_TEST_WHITE_PAPER_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_WHITE_PAPER_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_WHITE_PAPER_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_WHITE_PAPER_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("CASE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_CASE_STUDY_FILEPATH+PDF_TEST_CASE_STUDY_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_CASE_STUDY_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_CASE_STUDY_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_CASE_STUDY_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("CASE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_CASE_STUDY_FILEPATH+PDF_TEST_CASE_STUDY_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_CASE_STUDY_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_CASE_STUDY_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_CASE_STUDY_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("CASE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_CASE_STUDY_FILEPATH+PDF_TEST_CASE_STUDY_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_CASE_STUDY_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_CASE_STUDY_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_CASE_STUDY_FILENAME,
                    },
                },
                #endregion
            };

            repository.AddCloudApplication(ca);

            #endregion

            #region LIVE DOCUMENTS
            ca = new CloudApplication()
            {
                Brand = "Live Documents",
                ServiceName = "Live Office",
                CompanyURL = "www.live-documents.com",
                OperatingSystems = new List<Domain.Models.OperatingSystem>()
                {
                    repository.FindOperatingSystemByName("WIN"),
                    repository.FindOperatingSystemByName("MAC"),
                    //repository.FindOperatingSystemByName("LINUX")
                },
                //MobilePlatforms = repository.GetAllMobilePlatforms(),
                MobilePlatforms = new List<MobilePlatform>()
                {
                    repository.FindMobilePlatformByName("ANDROID"),
                    repository.FindMobilePlatformByName("IPHONE"),
                    repository.FindMobilePlatformByName("BB"),
                    repository.FindMobilePlatformByName("IPAD")
                },
                Browsers = new List<Browser>()
                {
                    repository.FindBrowserByName("Internet Explorer 6"),
                    repository.FindBrowserByName("Internet Explorer 7"),
                    repository.FindBrowserByName("Internet Explorer 8"),
                    repository.FindBrowserByName("Internet Explorer 9"),
                    repository.FindBrowserByName("FIREFOX"),
                    repository.FindBrowserByName("CHROME"),
                    repository.FindBrowserByName("SAFARI"),
                },
                LicenceTypeMinimum = repository.FindLicenceTypeMinimumByName(1),
                LicenceTypeMaximum = repository.FindLicenceTypeMaximumByName(99),
                Languages = new List<Language>()
                {
                    repository.FindLanguageByName("ENGLISH")
                },
                SupportTypes = new List<SupportType>()
                {
                    repository.FindSupportTypeByName("FAQ"),
                    repository.FindSupportTypeByName("TROUBLESHOOT")
                },
                SupportHours = repository.FindSupportHoursByName("NOT APPLICABLE"),
                SupportDays = repository.FindSupportDaysByName("NOT APPLICABLE"),
                SupportTerritories = new List<SupportTerritory>()
                {
                    repository.FindSupportTerritoryByName("US"),
                },
                VideoTrainingSupport = false,
                //MaximumMeetingAttendees = 50,
                //MaximumWebinarAttendees = 0,
                CloudApplicationFeatures = new List<CloudApplicationFeature>()
                {
                    repository.FindFeatureByName("ADVANCED PROOFING & EDITING"),
                    repository.FindFeatureByName("ADVANCED REFERENCING & INDEXING"),
                    repository.FindFeatureByName("MAILING FEATURES"),
                    repository.FindFeatureByName("FORMULA MANAGEMENT"),
                    repository.FindFeatureByName("DATA MANAGEMENT"),
                    repository.FindFeatureByName("ADVANCED CHARTING & TABLES"),
                    repository.FindFeatureByName("ADVANCED DESIGN & ANIMATION"),
                    repository.FindFeatureByName("REAL-TIME COLLABORATION"),
                    repository.FindFeatureByName("AUTOMATIC VERSION MANAGEMENT"),
                    repository.FindFeatureByName("LARGE VIDEO FILES"),
                    repository.FindFeatureByName("OWN BRANDING"),
                    //repository.FindFeatureByName("SHARED/COLLABORATION WORKSPACE"),
                    //repository.FindFeatureByName("EMAIL CLIENT"),
                    //repository.FindFeatureByName("CONTACT MANAGEMENT"),
                    //repository.FindFeatureByName("SHARED CALENDAR"),
                    //repository.FindFeatureByName("WEB MEETINGS"),
                    //repository.FindFeatureByName("PROJECT MANAGEMENT / TASK MANAGER"),
                    //repository.FindFeatureByName("WEB PUBLISHING"),
                    //repository.FindFeatureByName("SOCIAL MEDIA INTEGRATION"),
                    //repository.FindFeatureByName("INTERNAL WEBSITE"),
                    //repository.FindFeatureByName("EXTERNAL CUSTOMER WEBSITE"),
                    //repository.FindFeatureByName("READ & EDIT"),
                    //repository.FindFeatureByName("SAVE WEB CONTENT"),
                    //repository.FindFeatureByName("IMAGE CAPTURE"),
                    //repository.FindFeatureByName("AUTOMATIC SYNC"),
                    //repository.FindFeatureByName("MS OFFICE COMPATIBLE"),
                    //repository.FindFeatureByName("OFFLINE MODE"),
                    repository.FindFeatureByName("UNLIMITED DOCUMENT STORAGE"),
                    repository.FindFeatureByName("DOCUMENT REVISION HISTORY"),
                    repository.FindFeatureByName("DOCUMENT PASSWORD PROTECTION"),
                    repository.FindFeatureByName("MOBILE/BROWSER EDITING"),
                    repository.FindFeatureByName("MULTI-USER / GUEST USER"),
                    repository.FindFeatureByName("3RD PARTY APIS"),
                    repository.FindFeatureByName("SSL SECURITY/ENCRYPTION"),
                },
                ApplicationCostPerMonth = 0.00M,
                //CallsPackageCostPerMonth = 0M,
                SetupFee = repository.FindSetupFeeByName("NOT APPLICABLE"),
                MinimumContract = repository.FindMinimumContractByName("NOT APPLICABLE"),
                PaymentFrequency = repository.FindPaymentFrequencyByName("NOT APPLICABLE"),
                PaymentOptions = new List<PaymentOption>()
                {
                    repository.FindPaymentOptionByName("CREDIT CARD"),
                    repository.FindPaymentOptionByName("PRE-PAY"),
                },
                FreeTrialPeriod = repository.FindFreeTrialPeriodByName("YES"),
                Category = repository.FindCategoryByName("OFFICE"),
                Vendor = repository.FindVendorByName("Live Documents"),
                Description = repository.GetDescription(),
                AddDate = DateTime.Now,
                #region Ratings,Reviews,Case Studies,White Papers
                Ratings = new List<CloudApplicationRating>()
                {
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                },
                Reviews = new List<CloudApplicationReview>()
                {
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                },
                ThumbnailDocuments = new List<ThumbnailDocument>()
                {
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("WHITE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_WHITE_PAPER_FILEPATH+PDF_TEST_WHITE_PAPER_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_WHITE_PAPER_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_WHITE_PAPER_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_WHITE_PAPER_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("WHITE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_WHITE_PAPER_FILEPATH+PDF_TEST_WHITE_PAPER_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_WHITE_PAPER_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_WHITE_PAPER_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_WHITE_PAPER_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("WHITE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_WHITE_PAPER_FILEPATH+PDF_TEST_WHITE_PAPER_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_WHITE_PAPER_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_WHITE_PAPER_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_WHITE_PAPER_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("CASE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_CASE_STUDY_FILEPATH+PDF_TEST_CASE_STUDY_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_CASE_STUDY_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_CASE_STUDY_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_CASE_STUDY_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("CASE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_CASE_STUDY_FILEPATH+PDF_TEST_CASE_STUDY_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_CASE_STUDY_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_CASE_STUDY_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_CASE_STUDY_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("CASE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_CASE_STUDY_FILEPATH+PDF_TEST_CASE_STUDY_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_CASE_STUDY_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_CASE_STUDY_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_CASE_STUDY_FILENAME,
                    },
                },
                #endregion
            };

            repository.AddCloudApplication(ca);

            #endregion

            #region EVERNOTE
            ca = new CloudApplication()
            {
                Brand = "EVERNOTE",
                ServiceName = "Evernote Premium",
                CompanyURL = "www.evernote.com",
                OperatingSystems = new List<Domain.Models.OperatingSystem>()
                {
                    repository.FindOperatingSystemByName("WIN"),
                    repository.FindOperatingSystemByName("MAC"),
                    //repository.FindOperatingSystemByName("LINUX")
                },
                //MobilePlatforms = repository.GetAllMobilePlatforms(),
                MobilePlatforms = new List<MobilePlatform>()
                {
                    repository.FindMobilePlatformByName("ANDROID"),
                    repository.FindMobilePlatformByName("IPHONE"),
                    repository.FindMobilePlatformByName("BB"),
                    repository.FindMobilePlatformByName("IPAD")
                },
                Browsers = new List<Browser>()
                {
                    repository.FindBrowserByName("Internet Explorer 6"),
                    repository.FindBrowserByName("Internet Explorer 7"),
                    repository.FindBrowserByName("Internet Explorer 8"),
                    repository.FindBrowserByName("Internet Explorer 9"),
                    repository.FindBrowserByName("FIREFOX"),
                    repository.FindBrowserByName("CHROME"),
                    repository.FindBrowserByName("SAFARI"),
                },
                LicenceTypeMinimum = repository.FindLicenceTypeMinimumByName(1),
                LicenceTypeMaximum = repository.FindLicenceTypeMaximumByName(16384),
                Languages = new List<Language>()
                {
                    repository.FindLanguageByName("ENGLISH")
                },
                SupportTypes = new List<SupportType>()
                {
                    repository.FindSupportTypeByName("FAQ"),
                    repository.FindSupportTypeByName("TROUBLESHOOT")
                },
                SupportHours = repository.FindSupportHoursByName("NOT APPLICABLE"),
                SupportDays = repository.FindSupportDaysByName("NOT APPLICABLE"),
                SupportTerritories = new List<SupportTerritory>()
                {
                    repository.FindSupportTerritoryByName("UK"),
                },
                VideoTrainingSupport = true,
                //MaximumMeetingAttendees = 50,
                //MaximumWebinarAttendees = 0,
                CloudApplicationFeatures = new List<CloudApplicationFeature>()
                {
                    //repository.FindFeatureByName("ADVANCED PROOFING & EDITING"),
                    //repository.FindFeatureByName("ADVANCED REFERENCING & INDEXING"),
                    //repository.FindFeatureByName("MAILING FEATURES"),
                    //repository.FindFeatureByName("FORMULA MANAGEMENT"),
                    //repository.FindFeatureByName("DATA MANAGEMENT"),
                    //repository.FindFeatureByName("ADVANCED CHARTING & TABLES"),
                    //repository.FindFeatureByName("ADVANCED DESIGN & ANIMATION"),
                    //repository.FindFeatureByName("REAL-TIME COLLABORATION"),
                    //repository.FindFeatureByName("AUTOMATIC VERSION MANAGEMENT"),
                    //repository.FindFeatureByName("LARGE VIDEO FILES"),
                    //repository.FindFeatureByName("OWN BRANDING"),
                    //repository.FindFeatureByName("SHARED/COLLABORATION WORKSPACE"),
                    //repository.FindFeatureByName("EMAIL CLIENT"),
                    //repository.FindFeatureByName("CONTACT MANAGEMENT"),
                    //repository.FindFeatureByName("SHARED CALENDAR"),
                    //repository.FindFeatureByName("WEB MEETINGS"),
                    //repository.FindFeatureByName("PROJECT MANAGEMENT / TASK MANAGER"),
                    repository.FindFeatureByName("WEB PUBLISHING"),
                    //repository.FindFeatureByName("SOCIAL MEDIA INTEGRATION"),
                    //repository.FindFeatureByName("INTERNAL WEBSITE"),
                    //repository.FindFeatureByName("EXTERNAL CUSTOMER WEBSITE"),
                    repository.FindFeatureByName("READ & EDIT"),
                    repository.FindFeatureByName("SAVE WEB CONTENT"),
                    repository.FindFeatureByName("IMAGE CAPTURE"),
                    repository.FindFeatureByName("AUTOMATIC SYNC"),
                    repository.FindFeatureByName("MS OFFICE COMPATIBLE"),
                    repository.FindFeatureByName("OFFLINE MODE"),
                    repository.FindFeatureByName("UNLIMITED DOCUMENT STORAGE"),
                    //repository.FindFeatureByName("DOCUMENT REVISION HISTORY"),
                    //repository.FindFeatureByName("DOCUMENT PASSWORD PROTECTION"),
                    repository.FindFeatureByName("MOBILE/BROWSER EDITING"),
                    //repository.FindFeatureByName("MULTI-USER / GUEST USER"),
                    //repository.FindFeatureByName("3RD PARTY APIS"),
                    repository.FindFeatureByName("SSL SECURITY/ENCRYPTION"),
                },
                ApplicationCostPerMonth = 5.00M,
                ApplicationCostPerAnnum = 45.00M,
                //CallsPackageCostPerMonth = 0M,
                SetupFee = repository.FindSetupFeeByName("NOT APPLICABLE"),
                MinimumContract = repository.FindMinimumContractByName("NOT APPLICABLE"),
                PaymentFrequency = repository.FindPaymentFrequencyByName("MONTHLY"),
                PaymentOptions = new List<PaymentOption>()
                {
                    repository.FindPaymentOptionByName("CREDIT CARD"),
                    repository.FindPaymentOptionByName("PRE-PAY"),
                },
                FreeTrialPeriod = repository.FindFreeTrialPeriodByName("YES"),
                Category = repository.FindCategoryByName("OFFICE"),
                Vendor = repository.FindVendorByName("EVERNOTE"),
                Description = repository.GetDescription(),
                AddDate = DateTime.Now,
                #region Ratings,Reviews,Case Studies,White Papers
                Ratings = new List<CloudApplicationRating>()
                {
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                },
                Reviews = new List<CloudApplicationReview>()
                {
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                },
                ThumbnailDocuments = new List<ThumbnailDocument>()
                {
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("WHITE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_WHITE_PAPER_FILEPATH+PDF_TEST_WHITE_PAPER_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_WHITE_PAPER_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_WHITE_PAPER_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_WHITE_PAPER_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("WHITE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_WHITE_PAPER_FILEPATH+PDF_TEST_WHITE_PAPER_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_WHITE_PAPER_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_WHITE_PAPER_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_WHITE_PAPER_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("WHITE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_WHITE_PAPER_FILEPATH+PDF_TEST_WHITE_PAPER_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_WHITE_PAPER_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_WHITE_PAPER_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_WHITE_PAPER_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("CASE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_CASE_STUDY_FILEPATH+PDF_TEST_CASE_STUDY_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_CASE_STUDY_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_CASE_STUDY_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_CASE_STUDY_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("CASE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_CASE_STUDY_FILEPATH+PDF_TEST_CASE_STUDY_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_CASE_STUDY_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_CASE_STUDY_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_CASE_STUDY_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("CASE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_CASE_STUDY_FILEPATH+PDF_TEST_CASE_STUDY_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_CASE_STUDY_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_CASE_STUDY_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_CASE_STUDY_FILENAME,
                    },
                },
                #endregion
            };

            repository.AddCloudApplication(ca);

            #endregion

            #region SLIDEROCKET
            ca = new CloudApplication()
            {
                Brand = "sliderocket",
                ServiceName = "Pro",
                CompanyURL = "www.sliderocket.com",
                OperatingSystems = new List<Domain.Models.OperatingSystem>()
                {
                    repository.FindOperatingSystemByName("WIN"),
                    repository.FindOperatingSystemByName("MAC"),
                    //repository.FindOperatingSystemByName("LINUX")
                },
                //MobilePlatforms = repository.GetAllMobilePlatforms(),
                MobilePlatforms = new List<MobilePlatform>()
                {
                    repository.FindMobilePlatformByName("ANDROID"),
                    repository.FindMobilePlatformByName("IPHONE"),
                    repository.FindMobilePlatformByName("BB"),
                    repository.FindMobilePlatformByName("IPAD")
                },
                Browsers = new List<Browser>()
                {
                    repository.FindBrowserByName("Internet Explorer 6"),
                    repository.FindBrowserByName("Internet Explorer 7"),
                    repository.FindBrowserByName("Internet Explorer 8"),
                    repository.FindBrowserByName("Internet Explorer 9"),
                    repository.FindBrowserByName("FIREFOX"),
                    repository.FindBrowserByName("CHROME"),
                    repository.FindBrowserByName("SAFARI"),
                },
                LicenceTypeMinimum = repository.FindLicenceTypeMinimumByName(1),
                LicenceTypeMaximum = repository.FindLicenceTypeMaximumByName(16384),
                Languages = new List<Language>()
                {
                    repository.FindLanguageByName("ENGLISH")
                },
                SupportTypes = new List<SupportType>()
                {
                    repository.FindSupportTypeByName("FAQ"),
                    repository.FindSupportTypeByName("TROUBLESHOOT")
                },
                SupportHours = repository.FindSupportHoursByName("NOT APPLICABLE"),
                SupportDays = repository.FindSupportDaysByName("NOT APPLICABLE"),
                SupportTerritories = new List<SupportTerritory>()
                {
                    repository.FindSupportTerritoryByName("US"),
                },
                VideoTrainingSupport = true,
                //MaximumMeetingAttendees = 50,
                //MaximumWebinarAttendees = 0,
                CloudApplicationFeatures = new List<CloudApplicationFeature>()
                {
                    //repository.FindFeatureByName("ADVANCED PROOFING & EDITING"),
                    //repository.FindFeatureByName("ADVANCED REFERENCING & INDEXING"),
                    //repository.FindFeatureByName("MAILING FEATURES"),
                    //repository.FindFeatureByName("FORMULA MANAGEMENT"),
                    //repository.FindFeatureByName("DATA MANAGEMENT"),
                    //repository.FindFeatureByName("ADVANCED CHARTING & TABLES"),
                    repository.FindFeatureByName("ADVANCED DESIGN & ANIMATION"),
                    repository.FindFeatureByName("REAL-TIME COLLABORATION"),
                    repository.FindFeatureByName("AUTOMATIC VERSION MANAGEMENT"),
                    repository.FindFeatureByName("LARGE VIDEO FILES"),
                    repository.FindFeatureByName("OWN BRANDING"),
                    repository.FindFeatureByName("SHARED/COLLABORATION WORKSPACE"),
                    //repository.FindFeatureByName("EMAIL CLIENT"),
                    //repository.FindFeatureByName("CONTACT MANAGEMENT"),
                    //repository.FindFeatureByName("SHARED CALENDAR"),
                    repository.FindFeatureByName("WEB MEETINGS"),
                    repository.FindFeatureByName("PROJECT MANAGEMENT / TASK MANAGER"),
                    //repository.FindFeatureByName("WEB PUBLISHING"),
                    repository.FindFeatureByName("SOCIAL MEDIA INTEGRATION"),
                    //repository.FindFeatureByName("INTERNAL WEBSITE"),
                    //repository.FindFeatureByName("EXTERNAL CUSTOMER WEBSITE"),
                    //repository.FindFeatureByName("READ & EDIT"),
                    //repository.FindFeatureByName("SAVE WEB CONTENT"),
                    //repository.FindFeatureByName("IMAGE CAPTURE"),
                    //repository.FindFeatureByName("AUTOMATIC SYNC"),
                    repository.FindFeatureByName("MS OFFICE COMPATIBLE"),
                    repository.FindFeatureByName("OFFLINE MODE"),
                    repository.FindFeatureByName("UNLIMITED DOCUMENT STORAGE"),
                    repository.FindFeatureByName("DOCUMENT REVISION HISTORY"),
                    repository.FindFeatureByName("DOCUMENT PASSWORD PROTECTION"),
                    repository.FindFeatureByName("MOBILE/BROWSER EDITING"),
                    //repository.FindFeatureByName("MULTI-USER / GUEST USER"),
                    //repository.FindFeatureByName("3RD PARTY APIS"),
                    repository.FindFeatureByName("SSL SECURITY/ENCRYPTION"),
                },
                ApplicationCostPerMonth = 24.00M,
                //CallsPackageCostPerMonth = 0M,
                SetupFee = repository.FindSetupFeeByName("NOT APPLICABLE"),
                MinimumContract = repository.FindMinimumContractByName("NOT APPLICABLE"),
                PaymentFrequency = repository.FindPaymentFrequencyByName("NOT APPLICABLE"),
                PaymentOptions = new List<PaymentOption>()
                {
                    repository.FindPaymentOptionByName("CREDIT CARD"),
                    repository.FindPaymentOptionByName("PRE-PAY"),
                },
                FreeTrialPeriod = repository.FindFreeTrialPeriodByName("YES"),
                Category = repository.FindCategoryByName("OFFICE"),
                Vendor = repository.FindVendorByName("sliderocket"),
                Description = repository.GetDescription(),
                AddDate = DateTime.Now,
                #region Ratings,Reviews,Case Studies,White Papers
                Ratings = new List<CloudApplicationRating>()
                {
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                },
                Reviews = new List<CloudApplicationReview>()
                {
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                },
                ThumbnailDocuments = new List<ThumbnailDocument>()
                {
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("WHITE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_WHITE_PAPER_FILEPATH+PDF_TEST_WHITE_PAPER_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_WHITE_PAPER_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_WHITE_PAPER_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_WHITE_PAPER_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("WHITE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_WHITE_PAPER_FILEPATH+PDF_TEST_WHITE_PAPER_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_WHITE_PAPER_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_WHITE_PAPER_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_WHITE_PAPER_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("WHITE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_WHITE_PAPER_FILEPATH+PDF_TEST_WHITE_PAPER_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_WHITE_PAPER_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_WHITE_PAPER_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_WHITE_PAPER_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("CASE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_CASE_STUDY_FILEPATH+PDF_TEST_CASE_STUDY_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_CASE_STUDY_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_CASE_STUDY_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_CASE_STUDY_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("CASE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_CASE_STUDY_FILEPATH+PDF_TEST_CASE_STUDY_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_CASE_STUDY_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_CASE_STUDY_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_CASE_STUDY_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("CASE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_CASE_STUDY_FILEPATH+PDF_TEST_CASE_STUDY_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_CASE_STUDY_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_CASE_STUDY_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_CASE_STUDY_FILENAME,
                    },
                },
                #endregion
            };

            repository.AddCloudApplication(ca);

            #endregion

            #region PREZI
            ca = new CloudApplication()
            {
                Brand = "PREZI",
                ServiceName = "Enjoy",
                CompanyURL = "www.prezi.com",
                OperatingSystems = new List<Domain.Models.OperatingSystem>()
                {
                    repository.FindOperatingSystemByName("WIN"),
                    repository.FindOperatingSystemByName("MAC"),
                    //repository.FindOperatingSystemByName("LINUX")
                },
                //MobilePlatforms = repository.GetAllMobilePlatforms(),
                MobilePlatforms = new List<MobilePlatform>()
                {
                    repository.FindMobilePlatformByName("ANDROID"),
                    repository.FindMobilePlatformByName("IPHONE"),
                    repository.FindMobilePlatformByName("BB"),
                    repository.FindMobilePlatformByName("IPAD")
                },
                Browsers = new List<Browser>()
                {
                    repository.FindBrowserByName("Internet Explorer 6"),
                    repository.FindBrowserByName("Internet Explorer 7"),
                    repository.FindBrowserByName("Internet Explorer 8"),
                    repository.FindBrowserByName("Internet Explorer 9"),
                    repository.FindBrowserByName("FIREFOX"),
                    repository.FindBrowserByName("CHROME"),
                    repository.FindBrowserByName("SAFARI"),
                },
                LicenceTypeMinimum = repository.FindLicenceTypeMinimumByName(1),
                LicenceTypeMaximum = repository.FindLicenceTypeMaximumByName(16384),
                Languages = new List<Language>()
                {
                    repository.FindLanguageByName("ENGLISH")
                },
                SupportTypes = new List<SupportType>()
                {
                    repository.FindSupportTypeByName("FAQ"),
                    repository.FindSupportTypeByName("TROUBLESHOOT")
                },
                SupportHours = repository.FindSupportHoursByName("NOT APPLICABLE"),
                SupportDays = repository.FindSupportDaysByName("NOT APPLICABLE"),
                SupportTerritories = new List<SupportTerritory>()
                {
                    repository.FindSupportTerritoryByName("US"),
                },
                VideoTrainingSupport = true,
                //MaximumMeetingAttendees = 50,
                //MaximumWebinarAttendees = 0,
                CloudApplicationFeatures = new List<CloudApplicationFeature>()
                {
                    //repository.FindFeatureByName("ADVANCED PROOFING & EDITING"),
                    //repository.FindFeatureByName("ADVANCED REFERENCING & INDEXING"),
                    //repository.FindFeatureByName("MAILING FEATURES"),
                    //repository.FindFeatureByName("FORMULA MANAGEMENT"),
                    //repository.FindFeatureByName("DATA MANAGEMENT"),
                    //repository.FindFeatureByName("ADVANCED CHARTING & TABLES"),
                    repository.FindFeatureByName("ADVANCED DESIGN & ANIMATION"),
                    repository.FindFeatureByName("REAL-TIME COLLABORATION"),
                    repository.FindFeatureByName("AUTOMATIC VERSION MANAGEMENT"),
                    repository.FindFeatureByName("LARGE VIDEO FILES"),
                    repository.FindFeatureByName("OWN BRANDING"),
                    repository.FindFeatureByName("SHARED/COLLABORATION WORKSPACE"),
                    //repository.FindFeatureByName("EMAIL CLIENT"),
                    //repository.FindFeatureByName("CONTACT MANAGEMENT"),
                    //repository.FindFeatureByName("SHARED CALENDAR"),
                    repository.FindFeatureByName("WEB MEETINGS"),
                    repository.FindFeatureByName("PROJECT MANAGEMENT / TASK MANAGER"),
                    //repository.FindFeatureByName("WEB PUBLISHING"),
                    repository.FindFeatureByName("SOCIAL MEDIA INTEGRATION"),
                    //repository.FindFeatureByName("INTERNAL WEBSITE"),
                    //repository.FindFeatureByName("EXTERNAL CUSTOMER WEBSITE"),
                    //repository.FindFeatureByName("READ & EDIT"),
                    //repository.FindFeatureByName("SAVE WEB CONTENT"),
                    //repository.FindFeatureByName("IMAGE CAPTURE"),
                    //repository.FindFeatureByName("AUTOMATIC SYNC"),
                    repository.FindFeatureByName("MS OFFICE COMPATIBLE"),
                    repository.FindFeatureByName("OFFLINE MODE"),
                    repository.FindFeatureByName("UNLIMITED DOCUMENT STORAGE"),
                    repository.FindFeatureByName("DOCUMENT REVISION HISTORY"),
                    repository.FindFeatureByName("DOCUMENT PASSWORD PROTECTION"),
                    repository.FindFeatureByName("MOBILE/BROWSER EDITING"),
                    //repository.FindFeatureByName("MULTI-USER / GUEST USER"),
                    //repository.FindFeatureByName("3RD PARTY APIS"),
                    repository.FindFeatureByName("SSL SECURITY/ENCRYPTION"),
                },
                ApplicationCostPerMonth = 0.00M,
                ApplicationCostPerAnnum = 59.00M,
                //CallsPackageCostPerMonth = 0M,
                SetupFee = repository.FindSetupFeeByName("NOT APPLICABLE"),
                MinimumContract = repository.FindMinimumContractByName("NOT APPLICABLE"),
                PaymentFrequency = repository.FindPaymentFrequencyByName("NOT APPLICABLE"),
                PaymentOptions = new List<PaymentOption>()
                {
                    repository.FindPaymentOptionByName("CREDIT CARD"),
                    repository.FindPaymentOptionByName("PRE-PAY"),
                },
                FreeTrialPeriod = repository.FindFreeTrialPeriodByName("YES"),
                Category = repository.FindCategoryByName("OFFICE"),
                Vendor = repository.FindVendorByName("PREZI"),
                Description = repository.GetDescription(),
                AddDate = DateTime.Now,
                #region Ratings,Reviews,Case Studies,White Papers
                Ratings = new List<CloudApplicationRating>()
                {
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                },
                Reviews = new List<CloudApplicationReview>()
                {
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                },
                ThumbnailDocuments = new List<ThumbnailDocument>()
                {
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("WHITE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_WHITE_PAPER_FILEPATH+PDF_TEST_WHITE_PAPER_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_WHITE_PAPER_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_WHITE_PAPER_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_WHITE_PAPER_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("WHITE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_WHITE_PAPER_FILEPATH+PDF_TEST_WHITE_PAPER_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_WHITE_PAPER_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_WHITE_PAPER_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_WHITE_PAPER_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("WHITE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_WHITE_PAPER_FILEPATH+PDF_TEST_WHITE_PAPER_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_WHITE_PAPER_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_WHITE_PAPER_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_WHITE_PAPER_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("CASE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_CASE_STUDY_FILEPATH+PDF_TEST_CASE_STUDY_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_CASE_STUDY_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_CASE_STUDY_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_CASE_STUDY_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("CASE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_CASE_STUDY_FILEPATH+PDF_TEST_CASE_STUDY_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_CASE_STUDY_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_CASE_STUDY_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_CASE_STUDY_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("CASE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_CASE_STUDY_FILEPATH+PDF_TEST_CASE_STUDY_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_CASE_STUDY_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_CASE_STUDY_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_CASE_STUDY_FILENAME,
                    },
                },
                #endregion
            };

            repository.AddCloudApplication(ca);

            #endregion

            #endregion

            #region STORAGE AND BACKUP

            #region CARBONITE
            ca = new CloudApplication()
            {
                Brand = "CARBONITE",
                ServiceName = "1 Year Plan",
                CompanyURL = "www.carbonite.co.uk",
                OperatingSystems = new List<Domain.Models.OperatingSystem>()
                {
                    repository.FindOperatingSystemByName("WIN"),
                    repository.FindOperatingSystemByName("MAC"),
                    //repository.FindOperatingSystemByName("LINUX")
                },
                //MobilePlatforms = repository.GetAllMobilePlatforms(),
                MobilePlatforms = new List<MobilePlatform>()
                {
                    //repository.FindMobilePlatformByName("ANDROID"),
                    repository.FindMobilePlatformByName("IPHONE"),
                    repository.FindMobilePlatformByName("BB"),
                    //repository.FindMobilePlatformByName("IPAD")
                },
                Browsers = new List<Browser>()
                {
                    repository.FindBrowserByName("Internet Explorer 6"),
                    repository.FindBrowserByName("Internet Explorer 7"),
                    repository.FindBrowserByName("Internet Explorer 8"),
                    repository.FindBrowserByName("Internet Explorer 9"),
                    repository.FindBrowserByName("FIREFOX"),
                    repository.FindBrowserByName("CHROME"),
                    repository.FindBrowserByName("SAFARI"),
                },
                LicenceTypeMinimum = repository.FindLicenceTypeMinimumByName(1),
                LicenceTypeMaximum = repository.FindLicenceTypeMaximumByName(99),
                Languages = new List<Language>()
                {
                    repository.FindLanguageByName("ENGLISH")
                },
                SupportTypes = new List<SupportType>()
                {
                    repository.FindSupportTypeByName("PHONE"),
                    repository.FindSupportTypeByName("CHAT"),
                    repository.FindSupportTypeByName("EMAIL")
                },
                SupportHours = repository.FindSupportHoursByName("9AM-5PM"),
                SupportDays = repository.FindSupportDaysByName("5"),
                SupportTerritories = new List<SupportTerritory>()
                {
                    repository.FindSupportTerritoryByName("UK"),
                },
                VideoTrainingSupport = true,
                //MaximumMeetingAttendees = 50,
                //MaximumWebinarAttendees = 0,
                CloudApplicationFeatures = new List<CloudApplicationFeature>()
                {
                    repository.FindFeatureByName("STORAGE LIMIT"),
                    repository.FindFeatureByName("INDIVIDUAL FILE LIMIT"),
                    repository.FindFeatureByName("ADJUST TRANSFER SPEED"),
                    repository.FindFeatureByName("MILITARY GRADE DATA TRANSFER"),
                    repository.FindFeatureByName("MILITARY GRADE STORAGE"),
                    repository.FindFeatureByName("VERSION HISTORY"),
                    repository.FindFeatureByName("UNDELETE FILES"),
                    //repository.FindFeatureByName("NO BANDWIDTH THROTTLING"),
                    //repository.FindFeatureByName("ONE-CLICK SHARING"),
                    //repository.FindFeatureByName("DRAG & DROP MULTIPLE FILES"),
                    //repository.FindFeatureByName("MULTI-USER ACCESS"),
                    //repository.FindFeatureByName("PASSWORD PROTECTED FOLDER SHARING"),
                    //repository.FindFeatureByName("ROLE BASED ACCESS"),
                    //repository.FindFeatureByName("SEARCH WITHIN DOCUMENTS"),
                    repository.FindFeatureByName("LOCAL BACK-UP"),
                    //repository.FindFeatureByName("SERVER BACK-UP"),
                    //repository.FindFeatureByName("AUTOMATIC BACK-UP"),
                    repository.FindFeatureByName("STORE VIDEO"),
                    repository.FindFeatureByName("GUARANTEED RESTORE"),
                    //repository.FindFeatureByName("SOCIAL MEDIA BACK-UP"),
                },
                ApplicationCostPerMonth = 0.00M,
                ApplicationCostPerAnnum = 41.95M,
                //CallsPackageCostPerMonth = 0M,
                SetupFee = repository.FindSetupFeeByName("NOT APPLICABLE"),
                MinimumContract = repository.FindMinimumContractByName("12 MONTHS"),
                PaymentFrequency = repository.FindPaymentFrequencyByName("ANNUAL"),
                PaymentOptions = new List<PaymentOption>()
                {
                    repository.FindPaymentOptionByName("CREDIT CARD"),
                    repository.FindPaymentOptionByName("PRE-PAY"),
                },
                FreeTrialPeriod = repository.FindFreeTrialPeriodByName("YES"),
                Category = repository.FindCategoryByName("STORAGE AND BACKUP"),
                Vendor = repository.FindVendorByName("CARBONITE"),
                Description = repository.GetDescription(),
                AddDate = DateTime.Now,
                #region Ratings,Reviews,Case Studies,White Papers
                Ratings = new List<CloudApplicationRating>()
                {
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                },
                Reviews = new List<CloudApplicationReview>()
                {
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                },
                ThumbnailDocuments = new List<ThumbnailDocument>()
                {
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("WHITE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_WHITE_PAPER_FILEPATH+PDF_TEST_WHITE_PAPER_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_WHITE_PAPER_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_WHITE_PAPER_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_WHITE_PAPER_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("WHITE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_WHITE_PAPER_FILEPATH+PDF_TEST_WHITE_PAPER_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_WHITE_PAPER_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_WHITE_PAPER_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_WHITE_PAPER_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("WHITE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_WHITE_PAPER_FILEPATH+PDF_TEST_WHITE_PAPER_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_WHITE_PAPER_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_WHITE_PAPER_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_WHITE_PAPER_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("CASE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_CASE_STUDY_FILEPATH+PDF_TEST_CASE_STUDY_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_CASE_STUDY_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_CASE_STUDY_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_CASE_STUDY_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("CASE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_CASE_STUDY_FILEPATH+PDF_TEST_CASE_STUDY_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_CASE_STUDY_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_CASE_STUDY_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_CASE_STUDY_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("CASE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_CASE_STUDY_FILEPATH+PDF_TEST_CASE_STUDY_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_CASE_STUDY_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_CASE_STUDY_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_CASE_STUDY_FILENAME,
                    },
                },
                #endregion
            };

            repository.AddCloudApplication(ca);

            #endregion

            #region BOX
            ca = new CloudApplication()
            {
                Brand = "box",
                ServiceName = "Business",
                CompanyURL = "www.box.net",
                OperatingSystems = new List<Domain.Models.OperatingSystem>()
                {
                    repository.FindOperatingSystemByName("WIN"),
                    repository.FindOperatingSystemByName("MAC"),
                    //repository.FindOperatingSystemByName("LINUX")
                },
                //MobilePlatforms = repository.GetAllMobilePlatforms(),
                MobilePlatforms = new List<MobilePlatform>()
                {
                    //repository.FindMobilePlatformByName("ANDROID"),
                    repository.FindMobilePlatformByName("IPHONE"),
                    repository.FindMobilePlatformByName("BB"),
                    //repository.FindMobilePlatformByName("IPAD")
                },
                Browsers = new List<Browser>()
                {
                    repository.FindBrowserByName("Internet Explorer 6"),
                    repository.FindBrowserByName("Internet Explorer 7"),
                    repository.FindBrowserByName("Internet Explorer 8"),
                    repository.FindBrowserByName("Internet Explorer 9"),
                    repository.FindBrowserByName("FIREFOX"),
                    repository.FindBrowserByName("CHROME"),
                    repository.FindBrowserByName("SAFARI"),
                },
                LicenceTypeMinimum = repository.FindLicenceTypeMinimumByName(3),
                LicenceTypeMaximum = repository.FindLicenceTypeMaximumByName(500),
                Languages = new List<Language>()
                {
                    repository.FindLanguageByName("ENGLISH")
                },
                SupportTypes = new List<SupportType>()
                {
                    //repository.FindSupportTypeByName("PHONE"),
                    repository.FindSupportTypeByName("ONLINE"),
                    //repository.FindSupportTypeByName("EMAIL")
                },
                SupportHours = repository.FindSupportHoursByName("24"),
                SupportDays = repository.FindSupportDaysByName("7"),
                SupportTerritories = new List<SupportTerritory>()
                {
                    repository.FindSupportTerritoryByName("US"),
                },
                VideoTrainingSupport = false,
                //MaximumMeetingAttendees = 50,
                //MaximumWebinarAttendees = 0,
                CloudApplicationFeatures = new List<CloudApplicationFeature>()
                {
                    repository.FindFeatureByName("STORAGE LIMIT"),
                    repository.FindFeatureByName("INDIVIDUAL FILE LIMIT"),
                    repository.FindFeatureByName("ADJUST TRANSFER SPEED"),
                    repository.FindFeatureByName("MILITARY GRADE DATA TRANSFER"),
                    repository.FindFeatureByName("MILITARY GRADE STORAGE"),
                    repository.FindFeatureByName("VERSION HISTORY"),
                    repository.FindFeatureByName("UNDELETE FILES"),
                    //repository.FindFeatureByName("NO BANDWIDTH THROTTLING"),
                    //repository.FindFeatureByName("ONE-CLICK SHARING"),
                    //repository.FindFeatureByName("DRAG & DROP MULTIPLE FILES"),
                    //repository.FindFeatureByName("MULTI-USER ACCESS"),
                    repository.FindFeatureByName("PASSWORD PROTECTED FOLDER SHARING"),
                    repository.FindFeatureByName("ROLE BASED ACCESS"),
                    repository.FindFeatureByName("SEARCH WITHIN DOCUMENTS"),
                    repository.FindFeatureByName("LOCAL BACK-UP"),
                    //repository.FindFeatureByName("SERVER BACK-UP"),
                    //repository.FindFeatureByName("AUTOMATIC BACK-UP"),
                    repository.FindFeatureByName("STORE VIDEO"),
                    repository.FindFeatureByName("GUARANTEED RESTORE"),
                    //repository.FindFeatureByName("SOCIAL MEDIA BACK-UP"),
                },
                ApplicationCostPerMonth = 15.00M,
                ApplicationCostPerAnnum = 0.00M,
                //CallsPackageCostPerMonth = 0M,
                SetupFee = repository.FindSetupFeeByName("NOT APPLICABLE"),
                MinimumContract = repository.FindMinimumContractByName("NOT APPLICABLE"),
                PaymentFrequency = repository.FindPaymentFrequencyByName("MONTHLY"),
                PaymentOptions = new List<PaymentOption>()
                {
                    repository.FindPaymentOptionByName("CREDIT CARD"),
                    repository.FindPaymentOptionByName("PRE-PAY"),
                },
                FreeTrialPeriod = repository.FindFreeTrialPeriodByName("YES"),
                Category = repository.FindCategoryByName("STORAGE AND BACKUP"),
                Vendor = repository.FindVendorByName("box"),
                Description = repository.GetDescription(),
                AddDate = DateTime.Now,
                #region Ratings,Reviews,Case Studies,White Papers
                Ratings = new List<CloudApplicationRating>()
                {
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                },
                Reviews = new List<CloudApplicationReview>()
                {
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                },
                ThumbnailDocuments = new List<ThumbnailDocument>()
                {
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("WHITE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_WHITE_PAPER_FILEPATH+PDF_TEST_WHITE_PAPER_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_WHITE_PAPER_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_WHITE_PAPER_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_WHITE_PAPER_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("WHITE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_WHITE_PAPER_FILEPATH+PDF_TEST_WHITE_PAPER_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_WHITE_PAPER_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_WHITE_PAPER_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_WHITE_PAPER_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("WHITE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_WHITE_PAPER_FILEPATH+PDF_TEST_WHITE_PAPER_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_WHITE_PAPER_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_WHITE_PAPER_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_WHITE_PAPER_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("CASE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_CASE_STUDY_FILEPATH+PDF_TEST_CASE_STUDY_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_CASE_STUDY_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_CASE_STUDY_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_CASE_STUDY_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("CASE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_CASE_STUDY_FILEPATH+PDF_TEST_CASE_STUDY_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_CASE_STUDY_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_CASE_STUDY_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_CASE_STUDY_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("CASE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_CASE_STUDY_FILEPATH+PDF_TEST_CASE_STUDY_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_CASE_STUDY_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_CASE_STUDY_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_CASE_STUDY_FILENAME,
                    },
                },
                #endregion
            };

            repository.AddCloudApplication(ca);

            #endregion

            #region OPENDRIVE
            ca = new CloudApplication()
            {
                Brand = "OpenDrive",
                ServiceName = "Office",
                CompanyURL = "www.opendrive.com",
                OperatingSystems = new List<Domain.Models.OperatingSystem>()
                {
                    repository.FindOperatingSystemByName("WIN"),
                    repository.FindOperatingSystemByName("MAC"),
                    //repository.FindOperatingSystemByName("LINUX")
                },
                //MobilePlatforms = repository.GetAllMobilePlatforms(),
                MobilePlatforms = new List<MobilePlatform>()
                {
                    //repository.FindMobilePlatformByName("ANDROID"),
                    repository.FindMobilePlatformByName("IPHONE"),
                    repository.FindMobilePlatformByName("BB"),
                    //repository.FindMobilePlatformByName("IPAD")
                },
                Browsers = new List<Browser>()
                {
                    repository.FindBrowserByName("Internet Explorer 6"),
                    repository.FindBrowserByName("Internet Explorer 7"),
                    repository.FindBrowserByName("Internet Explorer 8"),
                    repository.FindBrowserByName("Internet Explorer 9"),
                    repository.FindBrowserByName("FIREFOX"),
                    repository.FindBrowserByName("CHROME"),
                    repository.FindBrowserByName("SAFARI"),
                },
                LicenceTypeMinimum = repository.FindLicenceTypeMinimumByName(1),
                LicenceTypeMaximum = repository.FindLicenceTypeMaximumByName(99),
                Languages = new List<Language>()
                {
                    repository.FindLanguageByName("ENGLISH")
                },
                SupportTypes = new List<SupportType>()
                {
                    //repository.FindSupportTypeByName("PHONE"),
                    repository.FindSupportTypeByName("ONLINE"),
                    //repository.FindSupportTypeByName("EMAIL")
                },
                SupportHours = repository.FindSupportHoursByName("24"),
                SupportDays = repository.FindSupportDaysByName("7"),
                SupportTerritories = new List<SupportTerritory>()
                {
                    repository.FindSupportTerritoryByName("US"),
                },
                VideoTrainingSupport = false,
                //MaximumMeetingAttendees = 50,
                //MaximumWebinarAttendees = 0,
                CloudApplicationFeatures = new List<CloudApplicationFeature>()
                {
                    repository.FindFeatureByName("STORAGE LIMIT"),
                    repository.FindFeatureByName("INDIVIDUAL FILE LIMIT"),
                    repository.FindFeatureByName("ADJUST TRANSFER SPEED"),
                    repository.FindFeatureByName("MILITARY GRADE DATA TRANSFER"),
                    repository.FindFeatureByName("MILITARY GRADE STORAGE"),
                    repository.FindFeatureByName("VERSION HISTORY"),
                    repository.FindFeatureByName("UNDELETE FILES"),
                    //repository.FindFeatureByName("NO BANDWIDTH THROTTLING"),
                    //repository.FindFeatureByName("ONE-CLICK SHARING"),
                    //repository.FindFeatureByName("DRAG & DROP MULTIPLE FILES"),
                    repository.FindFeatureByName("MULTI-USER ACCESS"),
                    repository.FindFeatureByName("PASSWORD PROTECTED FOLDER SHARING"),
                    repository.FindFeatureByName("ROLE BASED ACCESS"),
                    repository.FindFeatureByName("SEARCH WITHIN DOCUMENTS"),
                    repository.FindFeatureByName("LOCAL BACK-UP"),
                    //repository.FindFeatureByName("SERVER BACK-UP"),
                    //repository.FindFeatureByName("AUTOMATIC BACK-UP"),
                    repository.FindFeatureByName("STORE VIDEO"),
                    repository.FindFeatureByName("GUARANTEED RESTORE"),
                    repository.FindFeatureByName("SOCIAL MEDIA BACK-UP"),
                },
                ApplicationCostPerMonth = 15.00M,
                ApplicationCostPerAnnum = 0.00M,
                //CallsPackageCostPerMonth = 0M,
                SetupFee = repository.FindSetupFeeByName("NOT APPLICABLE"),
                MinimumContract = repository.FindMinimumContractByName("NOT APPLICABLE"),
                PaymentFrequency = repository.FindPaymentFrequencyByName("MONTHLY"),
                PaymentOptions = new List<PaymentOption>()
                {
                    repository.FindPaymentOptionByName("CREDIT CARD"),
                    repository.FindPaymentOptionByName("PRE-PAY"),
                },
                FreeTrialPeriod = repository.FindFreeTrialPeriodByName("NO"),
                Category = repository.FindCategoryByName("STORAGE AND BACKUP"),
                Vendor = repository.FindVendorByName("OpenDrive"),
                Description = repository.GetDescription(),
                AddDate = DateTime.Now,
                #region Ratings,Reviews,Case Studies,White Papers
                Ratings = new List<CloudApplicationRating>()
                {
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                },
                Reviews = new List<CloudApplicationReview>()
                {
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                },
                ThumbnailDocuments = new List<ThumbnailDocument>()
                {
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("WHITE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_WHITE_PAPER_FILEPATH+PDF_TEST_WHITE_PAPER_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_WHITE_PAPER_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_WHITE_PAPER_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_WHITE_PAPER_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("WHITE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_WHITE_PAPER_FILEPATH+PDF_TEST_WHITE_PAPER_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_WHITE_PAPER_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_WHITE_PAPER_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_WHITE_PAPER_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("WHITE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_WHITE_PAPER_FILEPATH+PDF_TEST_WHITE_PAPER_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_WHITE_PAPER_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_WHITE_PAPER_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_WHITE_PAPER_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("CASE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_CASE_STUDY_FILEPATH+PDF_TEST_CASE_STUDY_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_CASE_STUDY_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_CASE_STUDY_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_CASE_STUDY_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("CASE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_CASE_STUDY_FILEPATH+PDF_TEST_CASE_STUDY_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_CASE_STUDY_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_CASE_STUDY_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_CASE_STUDY_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("CASE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_CASE_STUDY_FILEPATH+PDF_TEST_CASE_STUDY_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_CASE_STUDY_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_CASE_STUDY_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_CASE_STUDY_FILENAME,
                    },
                },
                #endregion
            };

            repository.AddCloudApplication(ca);

            #endregion

            #region ADRIVE
            ca = new CloudApplication()
            {
                Brand = "ADrive",
                ServiceName = "Signature",
                CompanyURL = "www.adrive.com",
                OperatingSystems = new List<Domain.Models.OperatingSystem>()
                {
                    repository.FindOperatingSystemByName("WIN"),
                    repository.FindOperatingSystemByName("MAC"),
                    //repository.FindOperatingSystemByName("LINUX")
                },
                //MobilePlatforms = repository.GetAllMobilePlatforms(),
                MobilePlatforms = new List<MobilePlatform>()
                {
                    //repository.FindMobilePlatformByName("ANDROID"),
                    repository.FindMobilePlatformByName("IPHONE"),
                    repository.FindMobilePlatformByName("BB"),
                    //repository.FindMobilePlatformByName("IPAD")
                },
                Browsers = new List<Browser>()
                {
                    repository.FindBrowserByName("Internet Explorer 6"),
                    repository.FindBrowserByName("Internet Explorer 7"),
                    repository.FindBrowserByName("Internet Explorer 8"),
                    repository.FindBrowserByName("Internet Explorer 9"),
                    repository.FindBrowserByName("FIREFOX"),
                    repository.FindBrowserByName("CHROME"),
                    repository.FindBrowserByName("SAFARI"),
                },
                LicenceTypeMinimum = repository.FindLicenceTypeMinimumByName(1),
                LicenceTypeMaximum = repository.FindLicenceTypeMaximumByName(99),
                Languages = new List<Language>()
                {
                    repository.FindLanguageByName("ENGLISH")
                },
                SupportTypes = new List<SupportType>()
                {
                    //repository.FindSupportTypeByName("PHONE"),
                    repository.FindSupportTypeByName("ONLINE"),
                    //repository.FindSupportTypeByName("EMAIL")
                },
                SupportHours = repository.FindSupportHoursByName("24"),
                SupportDays = repository.FindSupportDaysByName("7"),
                SupportTerritories = new List<SupportTerritory>()
                {
                    repository.FindSupportTerritoryByName("US"),
                },
                VideoTrainingSupport = false,
                //MaximumMeetingAttendees = 50,
                //MaximumWebinarAttendees = 0,
                CloudApplicationFeatures = new List<CloudApplicationFeature>()
                {
                    repository.FindFeatureByName("STORAGE LIMIT"),
                    repository.FindFeatureByName("INDIVIDUAL FILE LIMIT"),
                    repository.FindFeatureByName("ADJUST TRANSFER SPEED"),
                    repository.FindFeatureByName("MILITARY GRADE DATA TRANSFER"),
                    repository.FindFeatureByName("MILITARY GRADE STORAGE"),
                    repository.FindFeatureByName("VERSION HISTORY"),
                    repository.FindFeatureByName("UNDELETE FILES"),
                    //repository.FindFeatureByName("NO BANDWIDTH THROTTLING"),
                    //repository.FindFeatureByName("ONE-CLICK SHARING"),
                    //repository.FindFeatureByName("DRAG & DROP MULTIPLE FILES"),
                    repository.FindFeatureByName("MULTI-USER ACCESS"),
                    repository.FindFeatureByName("PASSWORD PROTECTED FOLDER SHARING"),
                    //repository.FindFeatureByName("ROLE BASED ACCESS"),
                    repository.FindFeatureByName("SEARCH WITHIN DOCUMENTS"),
                    repository.FindFeatureByName("LOCAL BACK-UP"),
                    //repository.FindFeatureByName("SERVER BACK-UP"),
                    //repository.FindFeatureByName("AUTOMATIC BACK-UP"),
                    repository.FindFeatureByName("STORE VIDEO"),
                    repository.FindFeatureByName("GUARANTEED RESTORE"),
                    //repository.FindFeatureByName("SOCIAL MEDIA BACK-UP"),
                },
                ApplicationCostPerMonth = 6.95M,
                ApplicationCostPerAnnum = 0.00M,
                //CallsPackageCostPerMonth = 0M,
                SetupFee = repository.FindSetupFeeByName("NOT APPLICABLE"),
                MinimumContract = repository.FindMinimumContractByName("NOT APPLICABLE"),
                PaymentFrequency = repository.FindPaymentFrequencyByName("MONTHLY"),
                PaymentOptions = new List<PaymentOption>()
                {
                    repository.FindPaymentOptionByName("CREDIT CARD"),
                    repository.FindPaymentOptionByName("PRE-PAY"),
                },
                FreeTrialPeriod = repository.FindFreeTrialPeriodByName("YES"),
                Category = repository.FindCategoryByName("STORAGE AND BACKUP"),
                Vendor = repository.FindVendorByName("ADrive"),
                Description = repository.GetDescription(),
                AddDate = DateTime.Now,
                #region Ratings,Reviews,Case Studies,White Papers
                Ratings = new List<CloudApplicationRating>()
                {
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                },
                Reviews = new List<CloudApplicationReview>()
                {
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                },
                ThumbnailDocuments = new List<ThumbnailDocument>()
                {
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("WHITE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_WHITE_PAPER_FILEPATH+PDF_TEST_WHITE_PAPER_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_WHITE_PAPER_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_WHITE_PAPER_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_WHITE_PAPER_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("WHITE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_WHITE_PAPER_FILEPATH+PDF_TEST_WHITE_PAPER_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_WHITE_PAPER_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_WHITE_PAPER_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_WHITE_PAPER_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("WHITE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_WHITE_PAPER_FILEPATH+PDF_TEST_WHITE_PAPER_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_WHITE_PAPER_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_WHITE_PAPER_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_WHITE_PAPER_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("CASE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_CASE_STUDY_FILEPATH+PDF_TEST_CASE_STUDY_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_CASE_STUDY_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_CASE_STUDY_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_CASE_STUDY_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("CASE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_CASE_STUDY_FILEPATH+PDF_TEST_CASE_STUDY_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_CASE_STUDY_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_CASE_STUDY_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_CASE_STUDY_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("CASE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_CASE_STUDY_FILEPATH+PDF_TEST_CASE_STUDY_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_CASE_STUDY_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_CASE_STUDY_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_CASE_STUDY_FILENAME,
                    },
                },
                #endregion
            };

            repository.AddCloudApplication(ca);

            #endregion

            #region STOREGATE
            ca = new CloudApplication()
            {
                Brand = "storegate",
                ServiceName = "Online Backup",
                CompanyURL = "www.storegate.co.uk",
                OperatingSystems = new List<Domain.Models.OperatingSystem>()
                {
                    repository.FindOperatingSystemByName("WIN"),
                    repository.FindOperatingSystemByName("MAC"),
                    //repository.FindOperatingSystemByName("LINUX")
                },
                //MobilePlatforms = repository.GetAllMobilePlatforms(),
                MobilePlatforms = new List<MobilePlatform>()
                {
                    repository.FindMobilePlatformByName("ANDROID"),
                    repository.FindMobilePlatformByName("IPHONE"),
                    repository.FindMobilePlatformByName("BB"),
                    //repository.FindMobilePlatformByName("IPAD")
                },
                Browsers = new List<Browser>()
                {
                    repository.FindBrowserByName("Internet Explorer 6"),
                    repository.FindBrowserByName("Internet Explorer 7"),
                    repository.FindBrowserByName("Internet Explorer 8"),
                    repository.FindBrowserByName("Internet Explorer 9"),
                    repository.FindBrowserByName("FIREFOX"),
                    repository.FindBrowserByName("CHROME"),
                    repository.FindBrowserByName("SAFARI"),
                },
                LicenceTypeMinimum = repository.FindLicenceTypeMinimumByName(1),
                LicenceTypeMaximum = repository.FindLicenceTypeMaximumByName(1),
                Languages = new List<Language>()
                {
                    repository.FindLanguageByName("ENGLISH")
                },
                SupportTypes = new List<SupportType>()
                {
                    //repository.FindSupportTypeByName("PHONE"),
                    repository.FindSupportTypeByName("ONLINE"),
                    //repository.FindSupportTypeByName("EMAIL")
                },
                SupportHours = repository.FindSupportHoursByName("24"),
                SupportDays = repository.FindSupportDaysByName("7"),
                SupportTerritories = new List<SupportTerritory>()
                {
                    repository.FindSupportTerritoryByName("UK"),
                },
                VideoTrainingSupport = false,
                //MaximumMeetingAttendees = 50,
                //MaximumWebinarAttendees = 0,
                CloudApplicationFeatures = new List<CloudApplicationFeature>()
                {
                    repository.FindFeatureByName("STORAGE LIMIT"),
                    repository.FindFeatureByName("INDIVIDUAL FILE LIMIT"),
                    //repository.FindFeatureByName("ADJUST TRANSFER SPEED"),
                    repository.FindFeatureByName("MILITARY GRADE DATA TRANSFER"),
                    repository.FindFeatureByName("MILITARY GRADE STORAGE"),
                    repository.FindFeatureByName("VERSION HISTORY"),
                    repository.FindFeatureByName("UNDELETE FILES"),
                    //repository.FindFeatureByName("NO BANDWIDTH THROTTLING"),
                    //repository.FindFeatureByName("ONE-CLICK SHARING"),
                    //repository.FindFeatureByName("DRAG & DROP MULTIPLE FILES"),
                    //repository.FindFeatureByName("MULTI-USER ACCESS"),
                    //repository.FindFeatureByName("PASSWORD PROTECTED FOLDER SHARING"),
                    //repository.FindFeatureByName("ROLE BASED ACCESS"),
                    //repository.FindFeatureByName("SEARCH WITHIN DOCUMENTS"),
                    //repository.FindFeatureByName("LOCAL BACK-UP"),
                    //repository.FindFeatureByName("SERVER BACK-UP"),
                    //repository.FindFeatureByName("AUTOMATIC BACK-UP"),
                    //repository.FindFeatureByName("STORE VIDEO"),
                    repository.FindFeatureByName("GUARANTEED RESTORE"),
                    //repository.FindFeatureByName("SOCIAL MEDIA BACK-UP"),
                },
                ApplicationCostPerMonth = 9.99M,
                ApplicationCostPerAnnum = 0.00M,
                //CallsPackageCostPerMonth = 0M,
                SetupFee = repository.FindSetupFeeByName("£19.99"),
                MinimumContract = repository.FindMinimumContractByName("NOT APPLICABLE"),
                PaymentFrequency = repository.FindPaymentFrequencyByName("MONTHLY"),
                PaymentOptions = new List<PaymentOption>()
                {
                    repository.FindPaymentOptionByName("CREDIT CARD"),
                    repository.FindPaymentOptionByName("PRE-PAY"),
                },
                FreeTrialPeriod = repository.FindFreeTrialPeriodByName("NO"),
                Category = repository.FindCategoryByName("STORAGE AND BACKUP"),
                Vendor = repository.FindVendorByName("storegate"),
                Description = repository.GetDescription(),
                AddDate = DateTime.Now,
                #region Ratings,Reviews,Case Studies,White Papers
                Ratings = new List<CloudApplicationRating>()
                {
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                },
                Reviews = new List<CloudApplicationReview>()
                {
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                },
                ThumbnailDocuments = new List<ThumbnailDocument>()
                {
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("WHITE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_WHITE_PAPER_FILEPATH+PDF_TEST_WHITE_PAPER_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_WHITE_PAPER_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_WHITE_PAPER_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_WHITE_PAPER_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("WHITE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_WHITE_PAPER_FILEPATH+PDF_TEST_WHITE_PAPER_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_WHITE_PAPER_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_WHITE_PAPER_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_WHITE_PAPER_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("WHITE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_WHITE_PAPER_FILEPATH+PDF_TEST_WHITE_PAPER_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_WHITE_PAPER_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_WHITE_PAPER_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_WHITE_PAPER_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("CASE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_CASE_STUDY_FILEPATH+PDF_TEST_CASE_STUDY_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_CASE_STUDY_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_CASE_STUDY_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_CASE_STUDY_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("CASE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_CASE_STUDY_FILEPATH+PDF_TEST_CASE_STUDY_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_CASE_STUDY_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_CASE_STUDY_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_CASE_STUDY_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("CASE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_CASE_STUDY_FILEPATH+PDF_TEST_CASE_STUDY_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_CASE_STUDY_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_CASE_STUDY_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_CASE_STUDY_FILENAME,
                    },
                },
                #endregion
            };

            repository.AddCloudApplication(ca);

            #endregion

            #region SUGARSYNC
            ca = new CloudApplication()
            {
                Brand = "SugarSync",
                ServiceName = "100 Gig Plan",
                CompanyURL = "www.sugarsync.com",
                OperatingSystems = new List<Domain.Models.OperatingSystem>()
                {
                    repository.FindOperatingSystemByName("WIN"),
                    repository.FindOperatingSystemByName("MAC"),
                    //repository.FindOperatingSystemByName("LINUX")
                },
                //MobilePlatforms = repository.GetAllMobilePlatforms(),
                MobilePlatforms = new List<MobilePlatform>()
                {
                    repository.FindMobilePlatformByName("ANDROID"),
                    repository.FindMobilePlatformByName("IPHONE"),
                    repository.FindMobilePlatformByName("BB"),
                    //repository.FindMobilePlatformByName("IPAD")
                },
                Browsers = new List<Browser>()
                {
                    repository.FindBrowserByName("Internet Explorer 6"),
                    repository.FindBrowserByName("Internet Explorer 7"),
                    repository.FindBrowserByName("Internet Explorer 8"),
                    repository.FindBrowserByName("Internet Explorer 9"),
                    repository.FindBrowserByName("FIREFOX"),
                    repository.FindBrowserByName("CHROME"),
                    repository.FindBrowserByName("SAFARI"),
                },
                LicenceTypeMinimum = repository.FindLicenceTypeMinimumByName(1),
                LicenceTypeMaximum = repository.FindLicenceTypeMaximumByName(1),
                Languages = new List<Language>()
                {
                    repository.FindLanguageByName("ENGLISH")
                },
                SupportTypes = new List<SupportType>()
                {
                    //repository.FindSupportTypeByName("PHONE"),
                    repository.FindSupportTypeByName("ONLINE"),
                    //repository.FindSupportTypeByName("EMAIL")
                },
                SupportHours = repository.FindSupportHoursByName("24"),
                SupportDays = repository.FindSupportDaysByName("7"),
                SupportTerritories = new List<SupportTerritory>()
                {
                    repository.FindSupportTerritoryByName("US"),
                },
                VideoTrainingSupport = true,
                //MaximumMeetingAttendees = 50,
                //MaximumWebinarAttendees = 0,
                CloudApplicationFeatures = new List<CloudApplicationFeature>()
                {
                    repository.FindFeatureByName("STORAGE LIMIT"),
                    repository.FindFeatureByName("INDIVIDUAL FILE LIMIT"),
                    //repository.FindFeatureByName("ADJUST TRANSFER SPEED"),
                    repository.FindFeatureByName("MILITARY GRADE DATA TRANSFER"),
                    repository.FindFeatureByName("MILITARY GRADE STORAGE"),
                    repository.FindFeatureByName("VERSION HISTORY"),
                    repository.FindFeatureByName("UNDELETE FILES"),
                    //repository.FindFeatureByName("NO BANDWIDTH THROTTLING"),
                    //repository.FindFeatureByName("ONE-CLICK SHARING"),
                    //repository.FindFeatureByName("DRAG & DROP MULTIPLE FILES"),
                    //repository.FindFeatureByName("MULTI-USER ACCESS"),
                    //repository.FindFeatureByName("PASSWORD PROTECTED FOLDER SHARING"),
                    //repository.FindFeatureByName("ROLE BASED ACCESS"),
                    //repository.FindFeatureByName("SEARCH WITHIN DOCUMENTS"),
                    //repository.FindFeatureByName("LOCAL BACK-UP"),
                    //repository.FindFeatureByName("SERVER BACK-UP"),
                    //repository.FindFeatureByName("AUTOMATIC BACK-UP"),
                    //repository.FindFeatureByName("STORE VIDEO"),
                    repository.FindFeatureByName("GUARANTEED RESTORE"),
                    //repository.FindFeatureByName("SOCIAL MEDIA BACK-UP"),
                },
                ApplicationCostPerMonth = 14.99M,
                ApplicationCostPerAnnum = 149.99M,
                //CallsPackageCostPerMonth = 0M,
                SetupFee = repository.FindSetupFeeByName("NOT APPLICABLE"),
                MinimumContract = repository.FindMinimumContractByName("NOT APPLICABLE"),
                PaymentFrequency = repository.FindPaymentFrequencyByName("MONTHLY"),
                PaymentOptions = new List<PaymentOption>()
                {
                    repository.FindPaymentOptionByName("CREDIT CARD"),
                    repository.FindPaymentOptionByName("PRE-PAY"),
                },
                FreeTrialPeriod = repository.FindFreeTrialPeriodByName("YES"),
                Category = repository.FindCategoryByName("STORAGE AND BACKUP"),
                Vendor = repository.FindVendorByName("SugarSync"),
                Description = repository.GetDescription(),
                AddDate = DateTime.Now,
                #region Ratings,Reviews,Case Studies,White Papers
                Ratings = new List<CloudApplicationRating>()
                {
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                },
                Reviews = new List<CloudApplicationReview>()
                {
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                },
                ThumbnailDocuments = new List<ThumbnailDocument>()
                {
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("WHITE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_WHITE_PAPER_FILEPATH+PDF_TEST_WHITE_PAPER_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_WHITE_PAPER_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_WHITE_PAPER_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_WHITE_PAPER_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("WHITE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_WHITE_PAPER_FILEPATH+PDF_TEST_WHITE_PAPER_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_WHITE_PAPER_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_WHITE_PAPER_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_WHITE_PAPER_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("WHITE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_WHITE_PAPER_FILEPATH+PDF_TEST_WHITE_PAPER_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_WHITE_PAPER_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_WHITE_PAPER_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_WHITE_PAPER_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("CASE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_CASE_STUDY_FILEPATH+PDF_TEST_CASE_STUDY_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_CASE_STUDY_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_CASE_STUDY_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_CASE_STUDY_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("CASE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_CASE_STUDY_FILEPATH+PDF_TEST_CASE_STUDY_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_CASE_STUDY_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_CASE_STUDY_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_CASE_STUDY_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("CASE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_CASE_STUDY_FILEPATH+PDF_TEST_CASE_STUDY_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_CASE_STUDY_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_CASE_STUDY_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_CASE_STUDY_FILENAME,
                    },
                },
                #endregion
            };

            repository.AddCloudApplication(ca);

            #endregion

            #region FLIPDRIVE
            ca = new CloudApplication()
            {
                Brand = "FLIPDRIVE",
                ServiceName = "Professional 50 Gig",
                CompanyURL = "www.opendrive.com",
                OperatingSystems = new List<Domain.Models.OperatingSystem>()
                {
                    repository.FindOperatingSystemByName("WIN"),
                    repository.FindOperatingSystemByName("MAC"),
                    //repository.FindOperatingSystemByName("LINUX")
                },
                //MobilePlatforms = repository.GetAllMobilePlatforms(),
                MobilePlatforms = new List<MobilePlatform>()
                {
                    repository.FindMobilePlatformByName("ANDROID"),
                    repository.FindMobilePlatformByName("IPHONE"),
                    repository.FindMobilePlatformByName("BB"),
                    //repository.FindMobilePlatformByName("IPAD")
                },
                Browsers = new List<Browser>()
                {
                    repository.FindBrowserByName("Internet Explorer 6"),
                    repository.FindBrowserByName("Internet Explorer 7"),
                    repository.FindBrowserByName("Internet Explorer 8"),
                    repository.FindBrowserByName("Internet Explorer 9"),
                    repository.FindBrowserByName("FIREFOX"),
                    repository.FindBrowserByName("CHROME"),
                    repository.FindBrowserByName("SAFARI"),
                },
                LicenceTypeMinimum = repository.FindLicenceTypeMinimumByName(1),
                LicenceTypeMaximum = repository.FindLicenceTypeMaximumByName(1),
                Languages = new List<Language>()
                {
                    repository.FindLanguageByName("ENGLISH")
                },
                SupportTypes = new List<SupportType>()
                {
                    //repository.FindSupportTypeByName("PHONE"),
                    repository.FindSupportTypeByName("ONLINE"),
                    //repository.FindSupportTypeByName("EMAIL")
                },
                SupportHours = repository.FindSupportHoursByName("24"),
                SupportDays = repository.FindSupportDaysByName("7"),
                SupportTerritories = new List<SupportTerritory>()
                {
                    repository.FindSupportTerritoryByName("US"),
                },
                VideoTrainingSupport = true,
                //MaximumMeetingAttendees = 50,
                //MaximumWebinarAttendees = 0,
                CloudApplicationFeatures = new List<CloudApplicationFeature>()
                {
                    repository.FindFeatureByName("STORAGE LIMIT"),
                    repository.FindFeatureByName("INDIVIDUAL FILE LIMIT"),
                    //repository.FindFeatureByName("ADJUST TRANSFER SPEED"),
                    repository.FindFeatureByName("MILITARY GRADE DATA TRANSFER"),
                    repository.FindFeatureByName("MILITARY GRADE STORAGE"),
                    repository.FindFeatureByName("VERSION HISTORY"),
                    //repository.FindFeatureByName("UNDELETE FILES"),
                    //repository.FindFeatureByName("NO BANDWIDTH THROTTLING"),
                    //repository.FindFeatureByName("ONE-CLICK SHARING"),
                    //repository.FindFeatureByName("DRAG & DROP MULTIPLE FILES"),
                    repository.FindFeatureByName("MULTI-USER ACCESS"),
                    //repository.FindFeatureByName("PASSWORD PROTECTED FOLDER SHARING"),
                    //repository.FindFeatureByName("ROLE BASED ACCESS"),
                    //repository.FindFeatureByName("SEARCH WITHIN DOCUMENTS"),
                    //repository.FindFeatureByName("LOCAL BACK-UP"),
                    //repository.FindFeatureByName("SERVER BACK-UP"),
                    //repository.FindFeatureByName("AUTOMATIC BACK-UP"),
                    //repository.FindFeatureByName("STORE VIDEO"),
                    repository.FindFeatureByName("GUARANTEED RESTORE"),
                    //repository.FindFeatureByName("SOCIAL MEDIA BACK-UP"),
                },
                ApplicationCostPerMonth = 9.95M,
                ApplicationCostPerAnnum = 0.00M,
                //CallsPackageCostPerMonth = 0M,
                SetupFee = repository.FindSetupFeeByName("NOT APPLICABLE"),
                MinimumContract = repository.FindMinimumContractByName("NOT APPLICABLE"),
                PaymentFrequency = repository.FindPaymentFrequencyByName("MONTHLY"),
                PaymentOptions = new List<PaymentOption>()
                {
                    repository.FindPaymentOptionByName("CREDIT CARD"),
                    repository.FindPaymentOptionByName("PRE-PAY"),
                },
                FreeTrialPeriod = repository.FindFreeTrialPeriodByName("YES"),
                Category = repository.FindCategoryByName("STORAGE AND BACKUP"),
                Vendor = repository.FindVendorByName("FLIPDRIVE"),
                Description = repository.GetDescription(),
                AddDate = DateTime.Now,
                #region Ratings,Reviews,Case Studies,White Papers
                Ratings = new List<CloudApplicationRating>()
                {
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                },
                Reviews = new List<CloudApplicationReview>()
                {
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                },
                ThumbnailDocuments = new List<ThumbnailDocument>()
                {
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("WHITE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_WHITE_PAPER_FILEPATH+PDF_TEST_WHITE_PAPER_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_WHITE_PAPER_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_WHITE_PAPER_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_WHITE_PAPER_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("WHITE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_WHITE_PAPER_FILEPATH+PDF_TEST_WHITE_PAPER_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_WHITE_PAPER_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_WHITE_PAPER_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_WHITE_PAPER_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("WHITE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_WHITE_PAPER_FILEPATH+PDF_TEST_WHITE_PAPER_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_WHITE_PAPER_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_WHITE_PAPER_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_WHITE_PAPER_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("CASE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_CASE_STUDY_FILEPATH+PDF_TEST_CASE_STUDY_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_CASE_STUDY_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_CASE_STUDY_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_CASE_STUDY_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("CASE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_CASE_STUDY_FILEPATH+PDF_TEST_CASE_STUDY_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_CASE_STUDY_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_CASE_STUDY_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_CASE_STUDY_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("CASE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_CASE_STUDY_FILEPATH+PDF_TEST_CASE_STUDY_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_CASE_STUDY_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_CASE_STUDY_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_CASE_STUDY_FILENAME,
                    },
                },
                #endregion
            };

            repository.AddCloudApplication(ca);

            #endregion

            #region MOZY
            ca = new CloudApplication()
            {
                Brand = "mozy",
                ServiceName = "Mozy Pro",
                CompanyURL = "www.mozy.co.uk",
                OperatingSystems = new List<Domain.Models.OperatingSystem>()
                {
                    repository.FindOperatingSystemByName("WIN"),
                    repository.FindOperatingSystemByName("MAC"),
                    //repository.FindOperatingSystemByName("LINUX")
                },
                //MobilePlatforms = repository.GetAllMobilePlatforms(),
                MobilePlatforms = new List<MobilePlatform>()
                {
                    repository.FindMobilePlatformByName("ANDROID"),
                    repository.FindMobilePlatformByName("IPHONE"),
                    repository.FindMobilePlatformByName("BB"),
                    //repository.FindMobilePlatformByName("IPAD")
                },
                Browsers = new List<Browser>()
                {
                    repository.FindBrowserByName("Internet Explorer 6"),
                    repository.FindBrowserByName("Internet Explorer 7"),
                    repository.FindBrowserByName("Internet Explorer 8"),
                    repository.FindBrowserByName("Internet Explorer 9"),
                    repository.FindBrowserByName("FIREFOX"),
                    repository.FindBrowserByName("CHROME"),
                    repository.FindBrowserByName("SAFARI"),
                },
                LicenceTypeMinimum = repository.FindLicenceTypeMinimumByName(1),
                LicenceTypeMaximum = repository.FindLicenceTypeMaximumByName(1),
                Languages = new List<Language>()
                {
                    repository.FindLanguageByName("ENGLISH")
                },
                SupportTypes = new List<SupportType>()
                {
                    repository.FindSupportTypeByName("PHONE"),
                    repository.FindSupportTypeByName("ONLINE"),
                    //repository.FindSupportTypeByName("EMAIL")
                },
                SupportHours = repository.FindSupportHoursByName("24"),
                SupportDays = repository.FindSupportDaysByName("7"),
                SupportTerritories = new List<SupportTerritory>()
                {
                    repository.FindSupportTerritoryByName("US"),
                },
                VideoTrainingSupport = true,
                //MaximumMeetingAttendees = 50,
                //MaximumWebinarAttendees = 0,
                CloudApplicationFeatures = new List<CloudApplicationFeature>()
                {
                    repository.FindFeatureByName("STORAGE LIMIT"),
                    repository.FindFeatureByName("INDIVIDUAL FILE LIMIT"),
                    repository.FindFeatureByName("ADJUST TRANSFER SPEED"),
                    repository.FindFeatureByName("MILITARY GRADE DATA TRANSFER"),
                    repository.FindFeatureByName("MILITARY GRADE STORAGE"),
                    repository.FindFeatureByName("VERSION HISTORY"),
                    repository.FindFeatureByName("UNDELETE FILES"),
                    //repository.FindFeatureByName("NO BANDWIDTH THROTTLING"),
                    //repository.FindFeatureByName("ONE-CLICK SHARING"),
                    //repository.FindFeatureByName("DRAG & DROP MULTIPLE FILES"),
                    repository.FindFeatureByName("MULTI-USER ACCESS"),
                    repository.FindFeatureByName("PASSWORD PROTECTED FOLDER SHARING"),
                    //repository.FindFeatureByName("ROLE BASED ACCESS"),
                    repository.FindFeatureByName("SEARCH WITHIN DOCUMENTS"),
                    repository.FindFeatureByName("LOCAL BACK-UP"),
                    repository.FindFeatureByName("SERVER BACK-UP"),
                    repository.FindFeatureByName("AUTOMATIC BACK-UP"),
                    repository.FindFeatureByName("STORE VIDEO"),
                    repository.FindFeatureByName("GUARANTEED RESTORE"),
                    //repository.FindFeatureByName("SOCIAL MEDIA BACK-UP"),
                },
                ApplicationCostPerMonth = 6.99M,
                ApplicationCostPerAnnum = 0.00M,
                //CallsPackageCostPerMonth = 0M,
                SetupFee = repository.FindSetupFeeByName("NOT APPLICABLE"),
                MinimumContract = repository.FindMinimumContractByName("NOT APPLICABLE"),
                PaymentFrequency = repository.FindPaymentFrequencyByName("MONTHLY"),
                PaymentOptions = new List<PaymentOption>()
                {
                    repository.FindPaymentOptionByName("CREDIT CARD"),
                    repository.FindPaymentOptionByName("PRE-PAY"),
                },
                FreeTrialPeriod = repository.FindFreeTrialPeriodByName("YES"),
                Category = repository.FindCategoryByName("STORAGE AND BACKUP"),
                Vendor = repository.FindVendorByName("mozy"),
                Description = repository.GetDescription(),
                AddDate = DateTime.Now,
                #region Ratings,Reviews,Case Studies,White Papers
                Ratings = new List<CloudApplicationRating>()
                {
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                },
                Reviews = new List<CloudApplicationReview>()
                {
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                },
                ThumbnailDocuments = new List<ThumbnailDocument>()
                {
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("WHITE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_WHITE_PAPER_FILEPATH+PDF_TEST_WHITE_PAPER_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_WHITE_PAPER_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_WHITE_PAPER_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_WHITE_PAPER_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("WHITE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_WHITE_PAPER_FILEPATH+PDF_TEST_WHITE_PAPER_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_WHITE_PAPER_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_WHITE_PAPER_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_WHITE_PAPER_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("WHITE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_WHITE_PAPER_FILEPATH+PDF_TEST_WHITE_PAPER_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_WHITE_PAPER_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_WHITE_PAPER_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_WHITE_PAPER_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("CASE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_CASE_STUDY_FILEPATH+PDF_TEST_CASE_STUDY_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_CASE_STUDY_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_CASE_STUDY_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_CASE_STUDY_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("CASE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_CASE_STUDY_FILEPATH+PDF_TEST_CASE_STUDY_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_CASE_STUDY_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_CASE_STUDY_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_CASE_STUDY_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("CASE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_CASE_STUDY_FILEPATH+PDF_TEST_CASE_STUDY_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_CASE_STUDY_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_CASE_STUDY_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_CASE_STUDY_FILENAME,
                    },
                },
                #endregion
            };

            repository.AddCloudApplication(ca);

            #endregion

            #region DROPBOX
            ca = new CloudApplication()
            {
                Brand = "Dropbox",
                ServiceName = "Pro 50",
                CompanyURL = "www.dropbox.com",
                OperatingSystems = new List<Domain.Models.OperatingSystem>()
                {
                    repository.FindOperatingSystemByName("WIN"),
                    repository.FindOperatingSystemByName("MAC"),
                    //repository.FindOperatingSystemByName("LINUX")
                },
                //MobilePlatforms = repository.GetAllMobilePlatforms(),
                MobilePlatforms = new List<MobilePlatform>()
                {
                    repository.FindMobilePlatformByName("ANDROID"),
                    repository.FindMobilePlatformByName("IPHONE"),
                    repository.FindMobilePlatformByName("BB"),
                    //repository.FindMobilePlatformByName("IPAD")
                },
                Browsers = new List<Browser>()
                {
                    repository.FindBrowserByName("Internet Explorer 6"),
                    repository.FindBrowserByName("Internet Explorer 7"),
                    repository.FindBrowserByName("Internet Explorer 8"),
                    repository.FindBrowserByName("Internet Explorer 9"),
                    repository.FindBrowserByName("FIREFOX"),
                    repository.FindBrowserByName("CHROME"),
                    repository.FindBrowserByName("SAFARI"),
                },
                LicenceTypeMinimum = repository.FindLicenceTypeMinimumByName(1),
                LicenceTypeMaximum = repository.FindLicenceTypeMaximumByName(1),
                Languages = new List<Language>()
                {
                    repository.FindLanguageByName("ENGLISH")
                },
                SupportTypes = new List<SupportType>()
                {
                    //repository.FindSupportTypeByName("PHONE"),
                    repository.FindSupportTypeByName("ONLINE"),
                    //repository.FindSupportTypeByName("EMAIL")
                },
                SupportHours = repository.FindSupportHoursByName("24"),
                SupportDays = repository.FindSupportDaysByName("7"),
                SupportTerritories = new List<SupportTerritory>()
                {
                    repository.FindSupportTerritoryByName("US"),
                },
                VideoTrainingSupport = true,
                //MaximumMeetingAttendees = 50,
                //MaximumWebinarAttendees = 0,
                CloudApplicationFeatures = new List<CloudApplicationFeature>()
                {
                    repository.FindFeatureByName("STORAGE LIMIT"),
                    repository.FindFeatureByName("INDIVIDUAL FILE LIMIT"),
                    //repository.FindFeatureByName("ADJUST TRANSFER SPEED"),
                    repository.FindFeatureByName("MILITARY GRADE DATA TRANSFER"),
                    repository.FindFeatureByName("MILITARY GRADE STORAGE"),
                    repository.FindFeatureByName("VERSION HISTORY"),
                    repository.FindFeatureByName("UNDELETE FILES"),
                    repository.FindFeatureByName("NO BANDWIDTH THROTTLING"),
                    //repository.FindFeatureByName("ONE-CLICK SHARING"),
                    //repository.FindFeatureByName("DRAG & DROP MULTIPLE FILES"),
                    //repository.FindFeatureByName("MULTI-USER ACCESS"),
                    //repository.FindFeatureByName("PASSWORD PROTECTED FOLDER SHARING"),
                    //repository.FindFeatureByName("ROLE BASED ACCESS"),
                    //repository.FindFeatureByName("SEARCH WITHIN DOCUMENTS"),
                    //repository.FindFeatureByName("LOCAL BACK-UP"),
                    //repository.FindFeatureByName("SERVER BACK-UP"),
                    //repository.FindFeatureByName("AUTOMATIC BACK-UP"),
                    //repository.FindFeatureByName("STORE VIDEO"),
                    repository.FindFeatureByName("GUARANTEED RESTORE"),
                    //repository.FindFeatureByName("SOCIAL MEDIA BACK-UP"),
                },
                ApplicationCostPerMonth = 9.99M,
                ApplicationCostPerAnnum = 0.00M,
                //CallsPackageCostPerMonth = 0M,
                SetupFee = repository.FindSetupFeeByName("NOT APPLICABLE"),
                MinimumContract = repository.FindMinimumContractByName("NOT APPLICABLE"),
                PaymentFrequency = repository.FindPaymentFrequencyByName("MONTHLY"),
                PaymentOptions = new List<PaymentOption>()
                {
                    repository.FindPaymentOptionByName("CREDIT CARD"),
                    repository.FindPaymentOptionByName("PRE-PAY"),
                },
                FreeTrialPeriod = repository.FindFreeTrialPeriodByName("YES"),
                Category = repository.FindCategoryByName("STORAGE AND BACKUP"),
                Vendor = repository.FindVendorByName("Dropbox"),
                Description = repository.GetDescription(),
                AddDate = DateTime.Now,
                #region Ratings,Reviews,Case Studies,White Papers
                Ratings = new List<CloudApplicationRating>()
                {
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                },
                Reviews = new List<CloudApplicationReview>()
                {
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                },
                ThumbnailDocuments = new List<ThumbnailDocument>()
                {
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("WHITE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_WHITE_PAPER_FILEPATH+PDF_TEST_WHITE_PAPER_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_WHITE_PAPER_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_WHITE_PAPER_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_WHITE_PAPER_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("WHITE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_WHITE_PAPER_FILEPATH+PDF_TEST_WHITE_PAPER_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_WHITE_PAPER_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_WHITE_PAPER_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_WHITE_PAPER_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("WHITE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_WHITE_PAPER_FILEPATH+PDF_TEST_WHITE_PAPER_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_WHITE_PAPER_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_WHITE_PAPER_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_WHITE_PAPER_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("CASE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_CASE_STUDY_FILEPATH+PDF_TEST_CASE_STUDY_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_CASE_STUDY_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_CASE_STUDY_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_CASE_STUDY_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("CASE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_CASE_STUDY_FILEPATH+PDF_TEST_CASE_STUDY_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_CASE_STUDY_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_CASE_STUDY_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_CASE_STUDY_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("CASE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_CASE_STUDY_FILEPATH+PDF_TEST_CASE_STUDY_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_CASE_STUDY_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_CASE_STUDY_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_CASE_STUDY_FILENAME,
                    },
                },
                #endregion
            };

            repository.AddCloudApplication(ca);

            #endregion

            #region CRASHPLAN
            ca = new CloudApplication()
            {
                Brand = "CRASHPLAN",
                ServiceName = "CrashPlan Pro",
                CompanyURL = "www.crashplan.com",
                OperatingSystems = new List<Domain.Models.OperatingSystem>()
                {
                    repository.FindOperatingSystemByName("WIN"),
                    repository.FindOperatingSystemByName("MAC"),
                    repository.FindOperatingSystemByName("LINUX")
                },
                //MobilePlatforms = repository.GetAllMobilePlatforms(),
                MobilePlatforms = new List<MobilePlatform>()
                {
                    repository.FindMobilePlatformByName("ANDROID"),
                    repository.FindMobilePlatformByName("IPHONE"),
                    repository.FindMobilePlatformByName("BB"),
                    //repository.FindMobilePlatformByName("IPAD")
                },
                Browsers = new List<Browser>()
                {
                    repository.FindBrowserByName("Internet Explorer 6"),
                    repository.FindBrowserByName("Internet Explorer 7"),
                    repository.FindBrowserByName("Internet Explorer 8"),
                    repository.FindBrowserByName("Internet Explorer 9"),
                    repository.FindBrowserByName("FIREFOX"),
                    repository.FindBrowserByName("CHROME"),
                    repository.FindBrowserByName("SAFARI"),
                },
                LicenceTypeMinimum = repository.FindLicenceTypeMinimumByName(1),
                LicenceTypeMaximum = repository.FindLicenceTypeMaximumByName(1),
                Languages = new List<Language>()
                {
                    repository.FindLanguageByName("ENGLISH")
                },
                SupportTypes = new List<SupportType>()
                {
                    //repository.FindSupportTypeByName("PHONE"),
                    repository.FindSupportTypeByName("ONLINE"),
                    //repository.FindSupportTypeByName("EMAIL")
                },
                SupportHours = repository.FindSupportHoursByName("24"),
                SupportDays = repository.FindSupportDaysByName("7"),
                SupportTerritories = new List<SupportTerritory>()
                {
                    repository.FindSupportTerritoryByName("US"),
                },
                VideoTrainingSupport = true,
                //MaximumMeetingAttendees = 50,
                //MaximumWebinarAttendees = 0,
                CloudApplicationFeatures = new List<CloudApplicationFeature>()
                {
                    repository.FindFeatureByName("STORAGE LIMIT"),
                    repository.FindFeatureByName("INDIVIDUAL FILE LIMIT"),
                    repository.FindFeatureByName("ADJUST TRANSFER SPEED"),
                    repository.FindFeatureByName("MILITARY GRADE DATA TRANSFER"),
                    repository.FindFeatureByName("MILITARY GRADE STORAGE"),
                    repository.FindFeatureByName("VERSION HISTORY"),
                    repository.FindFeatureByName("UNDELETE FILES"),
                    //repository.FindFeatureByName("NO BANDWIDTH THROTTLING"),
                    //repository.FindFeatureByName("ONE-CLICK SHARING"),
                    //repository.FindFeatureByName("DRAG & DROP MULTIPLE FILES"),
                    repository.FindFeatureByName("MULTI-USER ACCESS"),
                    repository.FindFeatureByName("PASSWORD PROTECTED FOLDER SHARING"),
                    //repository.FindFeatureByName("ROLE BASED ACCESS"),
                    repository.FindFeatureByName("SEARCH WITHIN DOCUMENTS"),
                    repository.FindFeatureByName("LOCAL BACK-UP"),
                    repository.FindFeatureByName("SERVER BACK-UP"),
                    repository.FindFeatureByName("AUTOMATIC BACK-UP"),
                    repository.FindFeatureByName("STORE VIDEO"),
                    repository.FindFeatureByName("GUARANTEED RESTORE"),
                    //repository.FindFeatureByName("SOCIAL MEDIA BACK-UP"),
                },
                ApplicationCostPerMonth = 7.49M,
                ApplicationCostPerAnnum = 0.00M,
                //CallsPackageCostPerMonth = 0M,
                SetupFee = repository.FindSetupFeeByName("NOT APPLICABLE"),
                MinimumContract = repository.FindMinimumContractByName("NOT APPLICABLE"),
                PaymentFrequency = repository.FindPaymentFrequencyByName("MONTHLY"),
                PaymentOptions = new List<PaymentOption>()
                {
                    repository.FindPaymentOptionByName("CREDIT CARD"),
                    repository.FindPaymentOptionByName("PRE-PAY"),
                },
                FreeTrialPeriod = repository.FindFreeTrialPeriodByName("YES"),
                Category = repository.FindCategoryByName("STORAGE AND BACKUP"),
                Vendor = repository.FindVendorByName("CRASHPLAN"),
                Description = repository.GetDescription(),
                AddDate = DateTime.Now,
                #region Ratings,Reviews,Case Studies,White Papers
                Ratings = new List<CloudApplicationRating>()
                {
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                },
                Reviews = new List<CloudApplicationReview>()
                {
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                },
                ThumbnailDocuments = new List<ThumbnailDocument>()
                {
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("WHITE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_WHITE_PAPER_FILEPATH+PDF_TEST_WHITE_PAPER_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_WHITE_PAPER_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_WHITE_PAPER_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_WHITE_PAPER_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("WHITE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_WHITE_PAPER_FILEPATH+PDF_TEST_WHITE_PAPER_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_WHITE_PAPER_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_WHITE_PAPER_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_WHITE_PAPER_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("WHITE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_WHITE_PAPER_FILEPATH+PDF_TEST_WHITE_PAPER_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_WHITE_PAPER_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_WHITE_PAPER_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_WHITE_PAPER_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("CASE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_CASE_STUDY_FILEPATH+PDF_TEST_CASE_STUDY_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_CASE_STUDY_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_CASE_STUDY_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_CASE_STUDY_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("CASE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_CASE_STUDY_FILEPATH+PDF_TEST_CASE_STUDY_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_CASE_STUDY_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_CASE_STUDY_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_CASE_STUDY_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("CASE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_CASE_STUDY_FILEPATH+PDF_TEST_CASE_STUDY_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_CASE_STUDY_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_CASE_STUDY_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_CASE_STUDY_FILENAME,
                    },
                },
                #endregion
            };

            repository.AddCloudApplication(ca);

            #endregion

            #region ELEPHANTDRIVE
            ca = new CloudApplication()
            {
                Brand = "elephantdrive",
                ServiceName = "Professional Edition",
                CompanyURL = "www.elephantdrive.com",
                OperatingSystems = new List<Domain.Models.OperatingSystem>()
                {
                    repository.FindOperatingSystemByName("WIN"),
                    repository.FindOperatingSystemByName("MAC"),
                    //repository.FindOperatingSystemByName("LINUX")
                },
                //MobilePlatforms = repository.GetAllMobilePlatforms(),
                MobilePlatforms = new List<MobilePlatform>()
                {
                    repository.FindMobilePlatformByName("ANDROID"),
                    repository.FindMobilePlatformByName("IPHONE"),
                    repository.FindMobilePlatformByName("BB"),
                    //repository.FindMobilePlatformByName("IPAD")
                },
                Browsers = new List<Browser>()
                {
                    repository.FindBrowserByName("Internet Explorer 6"),
                    repository.FindBrowserByName("Internet Explorer 7"),
                    repository.FindBrowserByName("Internet Explorer 8"),
                    repository.FindBrowserByName("Internet Explorer 9"),
                    repository.FindBrowserByName("FIREFOX"),
                    repository.FindBrowserByName("CHROME"),
                    repository.FindBrowserByName("SAFARI"),
                },
                LicenceTypeMinimum = repository.FindLicenceTypeMinimumByName(1),
                LicenceTypeMaximum = repository.FindLicenceTypeMaximumByName(1),
                Languages = new List<Language>()
                {
                    repository.FindLanguageByName("ENGLISH")
                },
                SupportTypes = new List<SupportType>()
                {
                    //repository.FindSupportTypeByName("PHONE"),
                    repository.FindSupportTypeByName("ONLINE"),
                    //repository.FindSupportTypeByName("EMAIL")
                },
                SupportHours = repository.FindSupportHoursByName("24"),
                SupportDays = repository.FindSupportDaysByName("7"),
                SupportTerritories = new List<SupportTerritory>()
                {
                    repository.FindSupportTerritoryByName("US"),
                },
                VideoTrainingSupport = true,
                //MaximumMeetingAttendees = 50,
                //MaximumWebinarAttendees = 0,
                CloudApplicationFeatures = new List<CloudApplicationFeature>()
                {
                    repository.FindFeatureByName("STORAGE LIMIT"),
                    repository.FindFeatureByName("INDIVIDUAL FILE LIMIT"),
                    //repository.FindFeatureByName("ADJUST TRANSFER SPEED"),
                    repository.FindFeatureByName("MILITARY GRADE DATA TRANSFER"),
                    repository.FindFeatureByName("MILITARY GRADE STORAGE"),
                    repository.FindFeatureByName("VERSION HISTORY"),
                    repository.FindFeatureByName("UNDELETE FILES"),
                    repository.FindFeatureByName("NO BANDWIDTH THROTTLING"),
                    //repository.FindFeatureByName("ONE-CLICK SHARING"),
                    //repository.FindFeatureByName("DRAG & DROP MULTIPLE FILES"),
                    repository.FindFeatureByName("MULTI-USER ACCESS"),
                    //repository.FindFeatureByName("PASSWORD PROTECTED FOLDER SHARING"),
                    //repository.FindFeatureByName("ROLE BASED ACCESS"),
                    //repository.FindFeatureByName("SEARCH WITHIN DOCUMENTS"),
                    repository.FindFeatureByName("LOCAL BACK-UP"),
                    //repository.FindFeatureByName("SERVER BACK-UP"),
                    repository.FindFeatureByName("AUTOMATIC BACK-UP"),
                    repository.FindFeatureByName("STORE VIDEO"),
                    repository.FindFeatureByName("GUARANTEED RESTORE"),
                    //repository.FindFeatureByName("SOCIAL MEDIA BACK-UP"),
                },
                ApplicationCostPerMonth = 9.95M,
                ApplicationCostPerAnnum = 99.50M,
                //CallsPackageCostPerMonth = 0M,
                SetupFee = repository.FindSetupFeeByName("NOT APPLICABLE"),
                MinimumContract = repository.FindMinimumContractByName("NOT APPLICABLE"),
                PaymentFrequency = repository.FindPaymentFrequencyByName("MONTHLY"),
                PaymentOptions = new List<PaymentOption>()
                {
                    repository.FindPaymentOptionByName("CREDIT CARD"),
                    repository.FindPaymentOptionByName("PRE-PAY"),
                },
                FreeTrialPeriod = repository.FindFreeTrialPeriodByName("YES"),
                Category = repository.FindCategoryByName("STORAGE AND BACKUP"),
                Vendor = repository.FindVendorByName("elephantdrive"),
                Description = repository.GetDescription(),
                AddDate = DateTime.Now,
                #region Ratings,Reviews,Case Studies,White Papers
                Ratings = new List<CloudApplicationRating>()
                {
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                },
                Reviews = new List<CloudApplicationReview>()
                {
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                },
                ThumbnailDocuments = new List<ThumbnailDocument>()
                {
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("WHITE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_WHITE_PAPER_FILEPATH+PDF_TEST_WHITE_PAPER_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_WHITE_PAPER_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_WHITE_PAPER_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_WHITE_PAPER_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("WHITE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_WHITE_PAPER_FILEPATH+PDF_TEST_WHITE_PAPER_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_WHITE_PAPER_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_WHITE_PAPER_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_WHITE_PAPER_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("WHITE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_WHITE_PAPER_FILEPATH+PDF_TEST_WHITE_PAPER_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_WHITE_PAPER_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_WHITE_PAPER_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_WHITE_PAPER_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("CASE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_CASE_STUDY_FILEPATH+PDF_TEST_CASE_STUDY_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_CASE_STUDY_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_CASE_STUDY_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_CASE_STUDY_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("CASE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_CASE_STUDY_FILEPATH+PDF_TEST_CASE_STUDY_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_CASE_STUDY_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_CASE_STUDY_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_CASE_STUDY_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("CASE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_CASE_STUDY_FILEPATH+PDF_TEST_CASE_STUDY_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_CASE_STUDY_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_CASE_STUDY_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_CASE_STUDY_FILENAME,
                    },
                },
                #endregion
            };

            repository.AddCloudApplication(ca);

            #endregion

            #region IDRIVE
            ca = new CloudApplication()
            {
                Brand = "iDrive",
                ServiceName = "iDrivePro 50",
                CompanyURL = "www.idrive.com",
                OperatingSystems = new List<Domain.Models.OperatingSystem>()
                {
                    repository.FindOperatingSystemByName("WIN"),
                    repository.FindOperatingSystemByName("MAC"),
                    //repository.FindOperatingSystemByName("LINUX")
                },
                //MobilePlatforms = repository.GetAllMobilePlatforms(),
                MobilePlatforms = new List<MobilePlatform>()
                {
                    repository.FindMobilePlatformByName("ANDROID"),
                    repository.FindMobilePlatformByName("IPHONE"),
                    repository.FindMobilePlatformByName("BB"),
                    //repository.FindMobilePlatformByName("IPAD")
                },
                Browsers = new List<Browser>()
                {
                    repository.FindBrowserByName("Internet Explorer 6"),
                    repository.FindBrowserByName("Internet Explorer 7"),
                    repository.FindBrowserByName("Internet Explorer 8"),
                    repository.FindBrowserByName("Internet Explorer 9"),
                    repository.FindBrowserByName("FIREFOX"),
                    repository.FindBrowserByName("CHROME"),
                    repository.FindBrowserByName("SAFARI"),
                },
                LicenceTypeMinimum = repository.FindLicenceTypeMinimumByName(1),
                LicenceTypeMaximum = repository.FindLicenceTypeMaximumByName(1),
                Languages = new List<Language>()
                {
                    repository.FindLanguageByName("ENGLISH")
                },
                SupportTypes = new List<SupportType>()
                {
                    //repository.FindSupportTypeByName("PHONE"),
                    repository.FindSupportTypeByName("ONLINE"),
                    //repository.FindSupportTypeByName("EMAIL")
                },
                SupportHours = repository.FindSupportHoursByName("24"),
                SupportDays = repository.FindSupportDaysByName("7"),
                SupportTerritories = new List<SupportTerritory>()
                {
                    repository.FindSupportTerritoryByName("US"),
                },
                VideoTrainingSupport = false,
                //MaximumMeetingAttendees = 50,
                //MaximumWebinarAttendees = 0,
                CloudApplicationFeatures = new List<CloudApplicationFeature>()
                {
                    repository.FindFeatureByName("STORAGE LIMIT"),
                    repository.FindFeatureByName("INDIVIDUAL FILE LIMIT"),
                    repository.FindFeatureByName("ADJUST TRANSFER SPEED"),
                    repository.FindFeatureByName("MILITARY GRADE DATA TRANSFER"),
                    repository.FindFeatureByName("MILITARY GRADE STORAGE"),
                    repository.FindFeatureByName("VERSION HISTORY"),
                    repository.FindFeatureByName("UNDELETE FILES"),
                    repository.FindFeatureByName("NO BANDWIDTH THROTTLING"),
                    repository.FindFeatureByName("ONE-CLICK SHARING"),
                    repository.FindFeatureByName("DRAG & DROP MULTIPLE FILES"),
                    repository.FindFeatureByName("MULTI-USER ACCESS"),
                    repository.FindFeatureByName("PASSWORD PROTECTED FOLDER SHARING"),
                    repository.FindFeatureByName("ROLE BASED ACCESS"),
                    repository.FindFeatureByName("SEARCH WITHIN DOCUMENTS"),
                    repository.FindFeatureByName("LOCAL BACK-UP"),
                    //repository.FindFeatureByName("SERVER BACK-UP"),
                    repository.FindFeatureByName("AUTOMATIC BACK-UP"),
                    repository.FindFeatureByName("STORE VIDEO"),
                    repository.FindFeatureByName("GUARANTEED RESTORE"),
                    //repository.FindFeatureByName("SOCIAL MEDIA BACK-UP"),
                },
                ApplicationCostPerMonth = 9.95M,
                ApplicationCostPerAnnum = 0.00M,
                //CallsPackageCostPerMonth = 0M,
                SetupFee = repository.FindSetupFeeByName("NOT APPLICABLE"),
                MinimumContract = repository.FindMinimumContractByName("NOT APPLICABLE"),
                PaymentFrequency = repository.FindPaymentFrequencyByName("MONTHLY"),
                PaymentOptions = new List<PaymentOption>()
                {
                    repository.FindPaymentOptionByName("CREDIT CARD"),
                    repository.FindPaymentOptionByName("PRE-PAY"),
                },
                FreeTrialPeriod = repository.FindFreeTrialPeriodByName("YES"),
                Category = repository.FindCategoryByName("STORAGE AND BACKUP"),
                Vendor = repository.FindVendorByName("iDrive"),
                Description = repository.GetDescription(),
                AddDate = DateTime.Now,
                #region Ratings,Reviews,Case Studies,White Papers
                Ratings = new List<CloudApplicationRating>()
                {
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                },
                Reviews = new List<CloudApplicationReview>()
                {
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                },
                ThumbnailDocuments = new List<ThumbnailDocument>()
                {
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("WHITE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_WHITE_PAPER_FILEPATH+PDF_TEST_WHITE_PAPER_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_WHITE_PAPER_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_WHITE_PAPER_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_WHITE_PAPER_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("WHITE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_WHITE_PAPER_FILEPATH+PDF_TEST_WHITE_PAPER_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_WHITE_PAPER_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_WHITE_PAPER_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_WHITE_PAPER_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("WHITE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_WHITE_PAPER_FILEPATH+PDF_TEST_WHITE_PAPER_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_WHITE_PAPER_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_WHITE_PAPER_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_WHITE_PAPER_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("CASE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_CASE_STUDY_FILEPATH+PDF_TEST_CASE_STUDY_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_CASE_STUDY_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_CASE_STUDY_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_CASE_STUDY_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("CASE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_CASE_STUDY_FILEPATH+PDF_TEST_CASE_STUDY_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_CASE_STUDY_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_CASE_STUDY_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_CASE_STUDY_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("CASE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_CASE_STUDY_FILEPATH+PDF_TEST_CASE_STUDY_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_CASE_STUDY_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_CASE_STUDY_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_CASE_STUDY_FILENAME,
                    },
                },
                #endregion
            };

            repository.AddCloudApplication(ca);

            #endregion

            #region LIVEDRIVE
            ca = new CloudApplication()
            {
                Brand = "livedrive",
                ServiceName = "Business Express",
                CompanyURL = "www.livedrive.com",
                OperatingSystems = new List<Domain.Models.OperatingSystem>()
                {
                    repository.FindOperatingSystemByName("WIN"),
                    repository.FindOperatingSystemByName("MAC"),
                    //repository.FindOperatingSystemByName("LINUX")
                },
                //MobilePlatforms = repository.GetAllMobilePlatforms(),
                MobilePlatforms = new List<MobilePlatform>()
                {
                    repository.FindMobilePlatformByName("ANDROID"),
                    repository.FindMobilePlatformByName("IPHONE"),
                    repository.FindMobilePlatformByName("BB"),
                    //repository.FindMobilePlatformByName("IPAD")
                },
                Browsers = new List<Browser>()
                {
                    repository.FindBrowserByName("Internet Explorer 6"),
                    repository.FindBrowserByName("Internet Explorer 7"),
                    repository.FindBrowserByName("Internet Explorer 8"),
                    repository.FindBrowserByName("Internet Explorer 9"),
                    repository.FindBrowserByName("FIREFOX"),
                    repository.FindBrowserByName("CHROME"),
                    repository.FindBrowserByName("SAFARI"),
                },
                LicenceTypeMinimum = repository.FindLicenceTypeMinimumByName(1),
                LicenceTypeMaximum = repository.FindLicenceTypeMaximumByName(1),
                Languages = new List<Language>()
                {
                    repository.FindLanguageByName("ENGLISH")
                },
                SupportTypes = new List<SupportType>()
                {
                    //repository.FindSupportTypeByName("PHONE"),
                    repository.FindSupportTypeByName("ONLINE"),
                    repository.FindSupportTypeByName("EMAIL")
                },
                SupportHours = repository.FindSupportHoursByName("24"),
                SupportDays = repository.FindSupportDaysByName("7"),
                SupportTerritories = new List<SupportTerritory>()
                {
                    repository.FindSupportTerritoryByName("US"),
                },
                VideoTrainingSupport = false,
                //MaximumMeetingAttendees = 50,
                //MaximumWebinarAttendees = 0,
                CloudApplicationFeatures = new List<CloudApplicationFeature>()
                {
                    repository.FindFeatureByName("STORAGE LIMIT"),
                    repository.FindFeatureByName("INDIVIDUAL FILE LIMIT"),
                    repository.FindFeatureByName("ADJUST TRANSFER SPEED"),
                    repository.FindFeatureByName("MILITARY GRADE DATA TRANSFER"),
                    repository.FindFeatureByName("MILITARY GRADE STORAGE"),
                    repository.FindFeatureByName("VERSION HISTORY"),
                    repository.FindFeatureByName("UNDELETE FILES"),
                    repository.FindFeatureByName("NO BANDWIDTH THROTTLING"),
                    repository.FindFeatureByName("ONE-CLICK SHARING"),
                    repository.FindFeatureByName("DRAG & DROP MULTIPLE FILES"),
                    repository.FindFeatureByName("MULTI-USER ACCESS"),
                    repository.FindFeatureByName("PASSWORD PROTECTED FOLDER SHARING"),
                    repository.FindFeatureByName("ROLE BASED ACCESS"),
                    repository.FindFeatureByName("SEARCH WITHIN DOCUMENTS"),
                    //repository.FindFeatureByName("LOCAL BACK-UP"),
                    //repository.FindFeatureByName("SERVER BACK-UP"),
                    repository.FindFeatureByName("AUTOMATIC BACK-UP"),
                    repository.FindFeatureByName("STORE VIDEO"),
                    repository.FindFeatureByName("GUARANTEED RESTORE"),
                    //repository.FindFeatureByName("SOCIAL MEDIA BACK-UP"),
                },
                ApplicationCostPerMonth = 14.95M,
                ApplicationCostPerAnnum = 129.95M,
                //CallsPackageCostPerMonth = 0M,
                SetupFee = repository.FindSetupFeeByName("NOT APPLICABLE"),
                MinimumContract = repository.FindMinimumContractByName("NOT APPLICABLE"),
                PaymentFrequency = repository.FindPaymentFrequencyByName("MONTHLY"),
                PaymentOptions = new List<PaymentOption>()
                {
                    repository.FindPaymentOptionByName("CREDIT CARD"),
                    repository.FindPaymentOptionByName("PRE-PAY"),
                },
                FreeTrialPeriod = repository.FindFreeTrialPeriodByName("YES"),
                Category = repository.FindCategoryByName("STORAGE AND BACKUP"),
                Vendor = repository.FindVendorByName("livedrive"),
                Description = repository.GetDescription(),
                AddDate = DateTime.Now,
                #region Ratings,Reviews,Case Studies,White Papers
                Ratings = new List<CloudApplicationRating>()
                {
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                },
                Reviews = new List<CloudApplicationReview>()
                {
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                },
                ThumbnailDocuments = new List<ThumbnailDocument>()
                {
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("WHITE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_WHITE_PAPER_FILEPATH+PDF_TEST_WHITE_PAPER_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_WHITE_PAPER_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_WHITE_PAPER_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_WHITE_PAPER_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("WHITE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_WHITE_PAPER_FILEPATH+PDF_TEST_WHITE_PAPER_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_WHITE_PAPER_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_WHITE_PAPER_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_WHITE_PAPER_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("WHITE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_WHITE_PAPER_FILEPATH+PDF_TEST_WHITE_PAPER_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_WHITE_PAPER_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_WHITE_PAPER_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_WHITE_PAPER_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("CASE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_CASE_STUDY_FILEPATH+PDF_TEST_CASE_STUDY_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_CASE_STUDY_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_CASE_STUDY_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_CASE_STUDY_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("CASE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_CASE_STUDY_FILEPATH+PDF_TEST_CASE_STUDY_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_CASE_STUDY_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_CASE_STUDY_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_CASE_STUDY_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("CASE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_CASE_STUDY_FILEPATH+PDF_TEST_CASE_STUDY_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_CASE_STUDY_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_CASE_STUDY_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_CASE_STUDY_FILENAME,
                    },
                },
                #endregion
            };

            repository.AddCloudApplication(ca);

            #endregion

            #region IBACKUP
            ca = new CloudApplication()
            {
                Brand = "iBackup",
                ServiceName = "iBackup 50",
                CompanyURL = "www.ibackup.com",
                OperatingSystems = new List<Domain.Models.OperatingSystem>()
                {
                    repository.FindOperatingSystemByName("WIN"),
                    repository.FindOperatingSystemByName("MAC"),
                    //repository.FindOperatingSystemByName("LINUX")
                },
                //MobilePlatforms = repository.GetAllMobilePlatforms(),
                MobilePlatforms = new List<MobilePlatform>()
                {
                    repository.FindMobilePlatformByName("ANDROID"),
                    repository.FindMobilePlatformByName("IPHONE"),
                    repository.FindMobilePlatformByName("BB"),
                    //repository.FindMobilePlatformByName("IPAD")
                },
                Browsers = new List<Browser>()
                {
                    repository.FindBrowserByName("Internet Explorer 6"),
                    repository.FindBrowserByName("Internet Explorer 7"),
                    repository.FindBrowserByName("Internet Explorer 8"),
                    repository.FindBrowserByName("Internet Explorer 9"),
                    repository.FindBrowserByName("FIREFOX"),
                    repository.FindBrowserByName("CHROME"),
                    repository.FindBrowserByName("SAFARI"),
                },
                LicenceTypeMinimum = repository.FindLicenceTypeMinimumByName(1),
                LicenceTypeMaximum = repository.FindLicenceTypeMaximumByName(1),
                Languages = new List<Language>()
                {
                    repository.FindLanguageByName("ENGLISH")
                },
                SupportTypes = new List<SupportType>()
                {
                    repository.FindSupportTypeByName("PHONE"),
                    repository.FindSupportTypeByName("TROUBLETICKET"),
                    //repository.FindSupportTypeByName("EMAIL")
                },
                SupportHours = repository.FindSupportHoursByName("24"),
                SupportDays = repository.FindSupportDaysByName("7"),
                SupportTerritories = new List<SupportTerritory>()
                {
                    repository.FindSupportTerritoryByName("US"),
                },
                VideoTrainingSupport = true,
                //MaximumMeetingAttendees = 50,
                //MaximumWebinarAttendees = 0,
                CloudApplicationFeatures = new List<CloudApplicationFeature>()
                {
                    repository.FindFeatureByName("STORAGE LIMIT"),
                    repository.FindFeatureByName("INDIVIDUAL FILE LIMIT"),
                    repository.FindFeatureByName("ADJUST TRANSFER SPEED"),
                    repository.FindFeatureByName("MILITARY GRADE DATA TRANSFER"),
                    repository.FindFeatureByName("MILITARY GRADE STORAGE"),
                    repository.FindFeatureByName("VERSION HISTORY"),
                    repository.FindFeatureByName("UNDELETE FILES"),
                    repository.FindFeatureByName("NO BANDWIDTH THROTTLING"),
                    repository.FindFeatureByName("ONE-CLICK SHARING"),
                    repository.FindFeatureByName("DRAG & DROP MULTIPLE FILES"),
                    repository.FindFeatureByName("MULTI-USER ACCESS"),
                    repository.FindFeatureByName("PASSWORD PROTECTED FOLDER SHARING"),
                    //repository.FindFeatureByName("ROLE BASED ACCESS"),
                    repository.FindFeatureByName("SEARCH WITHIN DOCUMENTS"),
                    //repository.FindFeatureByName("LOCAL BACK-UP"),
                    //repository.FindFeatureByName("SERVER BACK-UP"),
                    repository.FindFeatureByName("AUTOMATIC BACK-UP"),
                    repository.FindFeatureByName("STORE VIDEO"),
                    repository.FindFeatureByName("GUARANTEED RESTORE"),
                    //repository.FindFeatureByName("SOCIAL MEDIA BACK-UP"),
                },
                ApplicationCostPerMonth = 9.95M,
                ApplicationCostPerAnnum = 99.50M,
                //CallsPackageCostPerMonth = 0M,
                SetupFee = repository.FindSetupFeeByName("NOT APPLICABLE"),
                MinimumContract = repository.FindMinimumContractByName("NOT APPLICABLE"),
                PaymentFrequency = repository.FindPaymentFrequencyByName("MONTHLY"),
                PaymentOptions = new List<PaymentOption>()
                {
                    repository.FindPaymentOptionByName("CREDIT CARD"),
                    repository.FindPaymentOptionByName("PRE-PAY"),
                },
                FreeTrialPeriod = repository.FindFreeTrialPeriodByName("YES"),
                Category = repository.FindCategoryByName("STORAGE AND BACKUP"),
                Vendor = repository.FindVendorByName("iBackup"),
                Description = repository.GetDescription(),
                AddDate = DateTime.Now,
                #region Ratings,Reviews,Case Studies,White Papers
                Ratings = new List<CloudApplicationRating>()
                {
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                },
                Reviews = new List<CloudApplicationReview>()
                {
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                },
                ThumbnailDocuments = new List<ThumbnailDocument>()
                {
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("WHITE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_WHITE_PAPER_FILEPATH+PDF_TEST_WHITE_PAPER_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_WHITE_PAPER_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_WHITE_PAPER_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_WHITE_PAPER_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("WHITE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_WHITE_PAPER_FILEPATH+PDF_TEST_WHITE_PAPER_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_WHITE_PAPER_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_WHITE_PAPER_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_WHITE_PAPER_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("WHITE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_WHITE_PAPER_FILEPATH+PDF_TEST_WHITE_PAPER_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_WHITE_PAPER_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_WHITE_PAPER_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_WHITE_PAPER_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("CASE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_CASE_STUDY_FILEPATH+PDF_TEST_CASE_STUDY_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_CASE_STUDY_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_CASE_STUDY_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_CASE_STUDY_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("CASE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_CASE_STUDY_FILEPATH+PDF_TEST_CASE_STUDY_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_CASE_STUDY_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_CASE_STUDY_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_CASE_STUDY_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("CASE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_CASE_STUDY_FILEPATH+PDF_TEST_CASE_STUDY_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_CASE_STUDY_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_CASE_STUDY_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_CASE_STUDY_FILENAME,
                    },
                },
                #endregion
            };

            repository.AddCloudApplication(ca);

            #endregion

            #region BACKUPIFY
            ca = new CloudApplication()
            {
                Brand = "backupify",
                ServiceName = "MyCloud100",
                CompanyURL = "www.backupify.com",
                OperatingSystems = new List<Domain.Models.OperatingSystem>()
                {
                    repository.FindOperatingSystemByName("WIN"),
                    repository.FindOperatingSystemByName("MAC"),
                    //repository.FindOperatingSystemByName("LINUX")
                },
                //MobilePlatforms = repository.GetAllMobilePlatforms(),
                MobilePlatforms = new List<MobilePlatform>()
                {
                    repository.FindMobilePlatformByName("ANDROID"),
                    repository.FindMobilePlatformByName("IPHONE"),
                    repository.FindMobilePlatformByName("BB"),
                    //repository.FindMobilePlatformByName("IPAD")
                },
                Browsers = new List<Browser>()
                {
                    repository.FindBrowserByName("Internet Explorer 6"),
                    repository.FindBrowserByName("Internet Explorer 7"),
                    repository.FindBrowserByName("Internet Explorer 8"),
                    repository.FindBrowserByName("Internet Explorer 9"),
                    repository.FindBrowserByName("FIREFOX"),
                    repository.FindBrowserByName("CHROME"),
                    repository.FindBrowserByName("SAFARI"),
                },
                LicenceTypeMinimum = repository.FindLicenceTypeMinimumByName(1),
                LicenceTypeMaximum = repository.FindLicenceTypeMaximumByName(1),
                Languages = new List<Language>()
                {
                    repository.FindLanguageByName("ENGLISH")
                },
                SupportTypes = new List<SupportType>()
                {
                    repository.FindSupportTypeByName("PHONE"),
                    repository.FindSupportTypeByName("ONLINE"),
                    repository.FindSupportTypeByName("EMAIL")
                },
                SupportHours = repository.FindSupportHoursByName("24"),
                SupportDays = repository.FindSupportDaysByName("7"),
                SupportTerritories = new List<SupportTerritory>()
                {
                    repository.FindSupportTerritoryByName("US"),
                },
                VideoTrainingSupport = true,
                //MaximumMeetingAttendees = 50,
                //MaximumWebinarAttendees = 0,
                CloudApplicationFeatures = new List<CloudApplicationFeature>()
                {
                    repository.FindFeatureByName("STORAGE LIMIT"),
                    repository.FindFeatureByName("INDIVIDUAL FILE LIMIT"),
                    repository.FindFeatureByName("ADJUST TRANSFER SPEED"),
                    repository.FindFeatureByName("MILITARY GRADE DATA TRANSFER"),
                    repository.FindFeatureByName("MILITARY GRADE STORAGE"),
                    repository.FindFeatureByName("VERSION HISTORY"),
                    repository.FindFeatureByName("UNDELETE FILES"),
                    repository.FindFeatureByName("NO BANDWIDTH THROTTLING"),
                    //repository.FindFeatureByName("ONE-CLICK SHARING"),
                    //repository.FindFeatureByName("DRAG & DROP MULTIPLE FILES"),
                    //repository.FindFeatureByName("MULTI-USER ACCESS"),
                    //repository.FindFeatureByName("PASSWORD PROTECTED FOLDER SHARING"),
                    //repository.FindFeatureByName("ROLE BASED ACCESS"),
                    //repository.FindFeatureByName("SEARCH WITHIN DOCUMENTS"),
                    //repository.FindFeatureByName("LOCAL BACK-UP"),
                    //repository.FindFeatureByName("SERVER BACK-UP"),
                    repository.FindFeatureByName("AUTOMATIC BACK-UP"),
                    repository.FindFeatureByName("STORE VIDEO"),
                    repository.FindFeatureByName("GUARANTEED RESTORE"),
                    repository.FindFeatureByName("SOCIAL MEDIA BACK-UP"),
                },
                ApplicationCostPerMonth = 4.99M,
                ApplicationCostPerAnnum = 0.00M,
                //CallsPackageCostPerMonth = 0M,
                SetupFee = repository.FindSetupFeeByName("NOT APPLICABLE"),
                MinimumContract = repository.FindMinimumContractByName("NOT APPLICABLE"),
                PaymentFrequency = repository.FindPaymentFrequencyByName("MONTHLY"),
                PaymentOptions = new List<PaymentOption>()
                {
                    repository.FindPaymentOptionByName("CREDIT CARD"),
                    repository.FindPaymentOptionByName("PRE-PAY"),
                },
                FreeTrialPeriod = repository.FindFreeTrialPeriodByName("YES"),
                Category = repository.FindCategoryByName("STORAGE AND BACKUP"),
                Vendor = repository.FindVendorByName("backupify"),
                Description = repository.GetDescription(),
                AddDate = DateTime.Now,
                #region Ratings,Reviews,Case Studies,White Papers
                Ratings = new List<CloudApplicationRating>()
                {
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                },
                Reviews = new List<CloudApplicationReview>()
                {
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                },
                ThumbnailDocuments = new List<ThumbnailDocument>()
                {
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("WHITE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_WHITE_PAPER_FILEPATH+PDF_TEST_WHITE_PAPER_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_WHITE_PAPER_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_WHITE_PAPER_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_WHITE_PAPER_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("WHITE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_WHITE_PAPER_FILEPATH+PDF_TEST_WHITE_PAPER_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_WHITE_PAPER_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_WHITE_PAPER_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_WHITE_PAPER_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("WHITE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_WHITE_PAPER_FILEPATH+PDF_TEST_WHITE_PAPER_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_WHITE_PAPER_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_WHITE_PAPER_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_WHITE_PAPER_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("CASE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_CASE_STUDY_FILEPATH+PDF_TEST_CASE_STUDY_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_CASE_STUDY_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_CASE_STUDY_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_CASE_STUDY_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("CASE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_CASE_STUDY_FILEPATH+PDF_TEST_CASE_STUDY_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_CASE_STUDY_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_CASE_STUDY_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_CASE_STUDY_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("CASE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_CASE_STUDY_FILEPATH+PDF_TEST_CASE_STUDY_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_CASE_STUDY_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_CASE_STUDY_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_CASE_STUDY_FILENAME,
                    },
                },
                #endregion
            };

            repository.AddCloudApplication(ca);

            #endregion

            #endregion

            #region PROJECT MANAGEMENT

            #region ZOHO PROJECTS
            ca = new CloudApplication()
            {
                Brand = "ZOHO Projects",
                ServiceName = "Premium",
                CompanyURL = "www.zoho.com/projects",
                OperatingSystems = new List<Domain.Models.OperatingSystem>()
                {
                    repository.FindOperatingSystemByName("WIN"),
                    repository.FindOperatingSystemByName("MAC"),
                    //repository.FindOperatingSystemByName("LINUX")
                },
                //MobilePlatforms = repository.GetAllMobilePlatforms(),
                MobilePlatforms = new List<MobilePlatform>()
                {
                    repository.FindMobilePlatformByName("ANDROID"),
                    repository.FindMobilePlatformByName("IPHONE"),
                    repository.FindMobilePlatformByName("BB"),
                    //repository.FindMobilePlatformByName("IPAD")
                },
                Browsers = new List<Browser>()
                {
                    repository.FindBrowserByName("Internet Explorer 6"),
                    repository.FindBrowserByName("Internet Explorer 7"),
                    repository.FindBrowserByName("Internet Explorer 8"),
                    repository.FindBrowserByName("Internet Explorer 9"),
                    repository.FindBrowserByName("FIREFOX"),
                    repository.FindBrowserByName("CHROME"),
                    repository.FindBrowserByName("SAFARI"),
                },
                LicenceTypeMinimum = repository.FindLicenceTypeMinimumByName(1),
                LicenceTypeMaximum = repository.FindLicenceTypeMaximumByName(99),
                Languages = new List<Language>()
                {
                    repository.FindLanguageByName("ENGLISH")
                },
                SupportTypes = new List<SupportType>()
                {
                    repository.FindSupportTypeByName("PHONE"),
                    //repository.FindSupportTypeByName("ONLINE"),
                    repository.FindSupportTypeByName("EMAIL")
                },
                SupportHours = repository.FindSupportHoursByName("24"),
                SupportDays = repository.FindSupportDaysByName("7"),
                SupportTerritories = new List<SupportTerritory>()
                {
                    repository.FindSupportTerritoryByName("US"),
                },
                VideoTrainingSupport = true,
                //MaximumMeetingAttendees = 50,
                //MaximumWebinarAttendees = 0,
                CloudApplicationFeatures = new List<CloudApplicationFeature>()
                {
                    repository.FindFeatureByName("NUMBER OF PROJECTS"),
                    repository.FindFeatureByName("FILE STORAGE"),
                    repository.FindFeatureByName("MULTI-USERS PER ACCOUNT"),
                    repository.FindFeatureByName("DOCUMENT SHARING"),
                    repository.FindFeatureByName("SHARED WORKSPACE"),
                    repository.FindFeatureByName("EDITED DOCUMENT TRACKING"),
                    repository.FindFeatureByName("LOCKFILES"),
                    //repository.FindFeatureByName("UPDATE & DEADLINE ALERTS"),
                    repository.FindFeatureByName("INTERACTIVE GANTT CHARTS"),
                    repository.FindFeatureByName("BUDGET TRACKING"),
                    repository.FindFeatureByName("CLIENT INVOICING"),
                    repository.FindFeatureByName("PROJECT WIKI"),
                    repository.FindFeatureByName("CUSTOMISED REPORTS"),
                    repository.FindFeatureByName("MS PROJECT COMPATIBLE"),
                    repository.FindFeatureByName("SSL SECURITY"),
                    repository.FindFeatureByName("MILITARY GRADE DOCUMENT SECURITY"),
                    //repository.FindFeatureByName("GUARANTEED RESTORE"),
                    //repository.FindFeatureByName("OFFLINE MODE"),
                    repository.FindFeatureByName("3RD PARTY APIS"),
                    repository.FindFeatureByName("BUG TRACKER"),
                },
                ApplicationCostPerMonth = 35.00M,
                ApplicationCostPerAnnum = 0.00M,
                //CallsPackageCostPerMonth = 0M,
                SetupFee = repository.FindSetupFeeByName("NOT APPLICABLE"),
                MinimumContract = repository.FindMinimumContractByName("NOT APPLICABLE"),
                PaymentFrequency = repository.FindPaymentFrequencyByName("MONTHLY"),
                PaymentOptions = new List<PaymentOption>()
                {
                    repository.FindPaymentOptionByName("CREDIT CARD"),
                    repository.FindPaymentOptionByName("PRE-PAY"),
                },
                FreeTrialPeriod = repository.FindFreeTrialPeriodByName("NO"),
                Category = repository.FindCategoryByName("PROJECT MANAGEMENT"),
                Vendor = repository.FindVendorByName("ZOHO Projects"),
                Description = repository.GetDescription(),
                AddDate = DateTime.Now,
                #region Ratings,Reviews,Case Studies,White Papers
                Ratings = new List<CloudApplicationRating>()
                {
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                },
                Reviews = new List<CloudApplicationReview>()
                {
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                },
                ThumbnailDocuments = new List<ThumbnailDocument>()
                {
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("WHITE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_WHITE_PAPER_FILEPATH+PDF_TEST_WHITE_PAPER_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_WHITE_PAPER_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_WHITE_PAPER_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_WHITE_PAPER_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("WHITE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_WHITE_PAPER_FILEPATH+PDF_TEST_WHITE_PAPER_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_WHITE_PAPER_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_WHITE_PAPER_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_WHITE_PAPER_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("WHITE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_WHITE_PAPER_FILEPATH+PDF_TEST_WHITE_PAPER_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_WHITE_PAPER_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_WHITE_PAPER_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_WHITE_PAPER_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("CASE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_CASE_STUDY_FILEPATH+PDF_TEST_CASE_STUDY_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_CASE_STUDY_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_CASE_STUDY_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_CASE_STUDY_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("CASE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_CASE_STUDY_FILEPATH+PDF_TEST_CASE_STUDY_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_CASE_STUDY_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_CASE_STUDY_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_CASE_STUDY_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("CASE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_CASE_STUDY_FILEPATH+PDF_TEST_CASE_STUDY_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_CASE_STUDY_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_CASE_STUDY_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_CASE_STUDY_FILENAME,
                    },
                },
                #endregion
            };

            repository.AddCloudApplication(ca);

            #endregion

            #region ATTASK
            ca = new CloudApplication()
            {
                Brand = "@task",
                ServiceName = "Full User",
                CompanyURL = "www.attask.com",
                OperatingSystems = new List<Domain.Models.OperatingSystem>()
                {
                    repository.FindOperatingSystemByName("WIN"),
                    repository.FindOperatingSystemByName("MAC"),
                    //repository.FindOperatingSystemByName("LINUX")
                },
                //MobilePlatforms = repository.GetAllMobilePlatforms(),
                MobilePlatforms = new List<MobilePlatform>()
                {
                    repository.FindMobilePlatformByName("ANDROID"),
                    repository.FindMobilePlatformByName("IPHONE"),
                    repository.FindMobilePlatformByName("BB"),
                    //repository.FindMobilePlatformByName("IPAD")
                },
                Browsers = new List<Browser>()
                {
                    repository.FindBrowserByName("Internet Explorer 6"),
                    repository.FindBrowserByName("Internet Explorer 7"),
                    repository.FindBrowserByName("Internet Explorer 8"),
                    repository.FindBrowserByName("Internet Explorer 9"),
                    repository.FindBrowserByName("FIREFOX"),
                    repository.FindBrowserByName("CHROME"),
                    repository.FindBrowserByName("SAFARI"),
                },
                LicenceTypeMinimum = repository.FindLicenceTypeMinimumByName(1),
                LicenceTypeMaximum = repository.FindLicenceTypeMaximumByName(99),
                Languages = new List<Language>()
                {
                    repository.FindLanguageByName("ENGLISH")
                },
                SupportTypes = new List<SupportType>()
                {
                    //repository.FindSupportTypeByName("PHONE"),
                    repository.FindSupportTypeByName("ONLINE"),
                    //repository.FindSupportTypeByName("EMAIL")
                },
                SupportHours = repository.FindSupportHoursByName("24"),
                SupportDays = repository.FindSupportDaysByName("7"),
                SupportTerritories = new List<SupportTerritory>()
                {
                    repository.FindSupportTerritoryByName("US"),
                },
                VideoTrainingSupport = false,
                //MaximumMeetingAttendees = 50,
                //MaximumWebinarAttendees = 0,
                CloudApplicationFeatures = new List<CloudApplicationFeature>()
                {
                    repository.FindFeatureByName("NUMBER OF PROJECTS"),
                    repository.FindFeatureByName("FILE STORAGE"),
                    repository.FindFeatureByName("MULTI-USERS PER ACCOUNT"),
                    repository.FindFeatureByName("DOCUMENT SHARING"),
                    repository.FindFeatureByName("SHARED WORKSPACE"),
                    repository.FindFeatureByName("EDITED DOCUMENT TRACKING"),
                    repository.FindFeatureByName("LOCKFILES"),
                    //repository.FindFeatureByName("UPDATE & DEADLINE ALERTS"),
                    repository.FindFeatureByName("INTERACTIVE GANTT CHARTS"),
                    repository.FindFeatureByName("BUDGET TRACKING"),
                    //repository.FindFeatureByName("CLIENT INVOICING"),
                    //repository.FindFeatureByName("PROJECT WIKI"),
                    repository.FindFeatureByName("CUSTOMISED REPORTS"),
                    repository.FindFeatureByName("MS PROJECT COMPATIBLE"),
                    repository.FindFeatureByName("SSL SECURITY"),
                    repository.FindFeatureByName("MILITARY GRADE DOCUMENT SECURITY"),
                    //repository.FindFeatureByName("GUARANTEED RESTORE"),
                    //repository.FindFeatureByName("OFFLINE MODE"),
                    //repository.FindFeatureByName("3RD PARTY APIS"),
                    repository.FindFeatureByName("BUG TRACKER"),
                },
                ApplicationCostPerMonth = 39.95M,
                ApplicationCostPerAnnum = 0.00M,
                //CallsPackageCostPerMonth = 0M,
                SetupFee = repository.FindSetupFeeByName("NOT APPLICABLE"),
                MinimumContract = repository.FindMinimumContractByName("NOT APPLICABLE"),
                PaymentFrequency = repository.FindPaymentFrequencyByName("MONTHLY"),
                PaymentOptions = new List<PaymentOption>()
                {
                    repository.FindPaymentOptionByName("CREDIT CARD"),
                    repository.FindPaymentOptionByName("PRE-PAY"),
                },
                FreeTrialPeriod = repository.FindFreeTrialPeriodByName("YES"),
                Category = repository.FindCategoryByName("PROJECT MANAGEMENT"),
                Vendor = repository.FindVendorByName("@task"),
                Description = repository.GetDescription(),
                AddDate = DateTime.Now,
                #region Ratings,Reviews,Case Studies,White Papers
                Ratings = new List<CloudApplicationRating>()
                {
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                },
                Reviews = new List<CloudApplicationReview>()
                {
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                },
                ThumbnailDocuments = new List<ThumbnailDocument>()
                {
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("WHITE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_WHITE_PAPER_FILEPATH+PDF_TEST_WHITE_PAPER_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_WHITE_PAPER_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_WHITE_PAPER_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_WHITE_PAPER_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("WHITE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_WHITE_PAPER_FILEPATH+PDF_TEST_WHITE_PAPER_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_WHITE_PAPER_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_WHITE_PAPER_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_WHITE_PAPER_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("WHITE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_WHITE_PAPER_FILEPATH+PDF_TEST_WHITE_PAPER_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_WHITE_PAPER_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_WHITE_PAPER_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_WHITE_PAPER_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("CASE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_CASE_STUDY_FILEPATH+PDF_TEST_CASE_STUDY_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_CASE_STUDY_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_CASE_STUDY_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_CASE_STUDY_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("CASE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_CASE_STUDY_FILEPATH+PDF_TEST_CASE_STUDY_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_CASE_STUDY_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_CASE_STUDY_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_CASE_STUDY_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("CASE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_CASE_STUDY_FILEPATH+PDF_TEST_CASE_STUDY_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_CASE_STUDY_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_CASE_STUDY_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_CASE_STUDY_FILENAME,
                    },
                },
                #endregion
            };

            repository.AddCloudApplication(ca);

            #endregion

            #region MAVENLINK
            ca = new CloudApplication()
            {
                Brand = "mavenlink",
                ServiceName = "Expert",
                CompanyURL = "www.mavenlink.com",
                OperatingSystems = new List<Domain.Models.OperatingSystem>()
                {
                    repository.FindOperatingSystemByName("WIN"),
                    repository.FindOperatingSystemByName("MAC"),
                    //repository.FindOperatingSystemByName("LINUX")
                },
                //MobilePlatforms = repository.GetAllMobilePlatforms(),
                MobilePlatforms = new List<MobilePlatform>()
                {
                    repository.FindMobilePlatformByName("ANDROID"),
                    repository.FindMobilePlatformByName("IPHONE"),
                    repository.FindMobilePlatformByName("BB"),
                    //repository.FindMobilePlatformByName("IPAD")
                },
                Browsers = new List<Browser>()
                {
                    repository.FindBrowserByName("Internet Explorer 6"),
                    repository.FindBrowserByName("Internet Explorer 7"),
                    repository.FindBrowserByName("Internet Explorer 8"),
                    repository.FindBrowserByName("Internet Explorer 9"),
                    repository.FindBrowserByName("FIREFOX"),
                    repository.FindBrowserByName("CHROME"),
                    repository.FindBrowserByName("SAFARI"),
                },
                LicenceTypeMinimum = repository.FindLicenceTypeMinimumByName(1),
                LicenceTypeMaximum = repository.FindLicenceTypeMaximumByName(99),
                Languages = new List<Language>()
                {
                    repository.FindLanguageByName("ENGLISH")
                },
                SupportTypes = new List<SupportType>()
                {
                    //repository.FindSupportTypeByName("PHONE"),
                    repository.FindSupportTypeByName("ONLINE"),
                    //repository.FindSupportTypeByName("EMAIL")
                },
                SupportHours = repository.FindSupportHoursByName("24"),
                SupportDays = repository.FindSupportDaysByName("7"),
                SupportTerritories = new List<SupportTerritory>()
                {
                    repository.FindSupportTerritoryByName("US"),
                },
                VideoTrainingSupport = false,
                //MaximumMeetingAttendees = 50,
                //MaximumWebinarAttendees = 0,
                CloudApplicationFeatures = new List<CloudApplicationFeature>()
                {
                    repository.FindFeatureByName("NUMBER OF PROJECTS"),
                    repository.FindFeatureByName("FILE STORAGE"),
                    repository.FindFeatureByName("MULTI-USERS PER ACCOUNT"),
                    repository.FindFeatureByName("DOCUMENT SHARING"),
                    repository.FindFeatureByName("SHARED WORKSPACE"),
                    repository.FindFeatureByName("EDITED DOCUMENT TRACKING"),
                    repository.FindFeatureByName("LOCKFILES"),
                    repository.FindFeatureByName("UPDATE & DEADLINE ALERTS"),
                    repository.FindFeatureByName("INTERACTIVE GANTT CHARTS"),
                    repository.FindFeatureByName("BUDGET TRACKING"),
                    repository.FindFeatureByName("CLIENT INVOICING"),
                    //repository.FindFeatureByName("PROJECT WIKI"),
                    repository.FindFeatureByName("CUSTOMISED REPORTS"),
                    repository.FindFeatureByName("MS PROJECT COMPATIBLE"),
                    repository.FindFeatureByName("SSL SECURITY"),
                    repository.FindFeatureByName("MILITARY GRADE DOCUMENT SECURITY"),
                    //repository.FindFeatureByName("GUARANTEED RESTORE"),
                    //repository.FindFeatureByName("OFFLINE MODE"),
                    //repository.FindFeatureByName("3RD PARTY APIS"),
                    repository.FindFeatureByName("BUG TRACKER"),
                },
                ApplicationCostPerMonth = 39.00M,
                ApplicationCostPerAnnum = 0.00M,
                //CallsPackageCostPerMonth = 0M,
                SetupFee = repository.FindSetupFeeByName("NOT APPLICABLE"),
                MinimumContract = repository.FindMinimumContractByName("NOT APPLICABLE"),
                PaymentFrequency = repository.FindPaymentFrequencyByName("MONTHLY"),
                PaymentOptions = new List<PaymentOption>()
                {
                    repository.FindPaymentOptionByName("CREDIT CARD"),
                    repository.FindPaymentOptionByName("PRE-PAY"),
                },
                FreeTrialPeriod = repository.FindFreeTrialPeriodByName("YES"),
                Category = repository.FindCategoryByName("PROJECT MANAGEMENT"),
                Vendor = repository.FindVendorByName("mavenlink"),
                Description = repository.GetDescription(),
                AddDate = DateTime.Now,
                #region Ratings,Reviews,Case Studies,White Papers
                Ratings = new List<CloudApplicationRating>()
                {
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                },
                Reviews = new List<CloudApplicationReview>()
                {
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                },
                ThumbnailDocuments = new List<ThumbnailDocument>()
                {
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("WHITE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_WHITE_PAPER_FILEPATH+PDF_TEST_WHITE_PAPER_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_WHITE_PAPER_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_WHITE_PAPER_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_WHITE_PAPER_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("WHITE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_WHITE_PAPER_FILEPATH+PDF_TEST_WHITE_PAPER_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_WHITE_PAPER_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_WHITE_PAPER_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_WHITE_PAPER_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("WHITE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_WHITE_PAPER_FILEPATH+PDF_TEST_WHITE_PAPER_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_WHITE_PAPER_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_WHITE_PAPER_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_WHITE_PAPER_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("CASE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_CASE_STUDY_FILEPATH+PDF_TEST_CASE_STUDY_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_CASE_STUDY_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_CASE_STUDY_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_CASE_STUDY_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("CASE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_CASE_STUDY_FILEPATH+PDF_TEST_CASE_STUDY_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_CASE_STUDY_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_CASE_STUDY_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_CASE_STUDY_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("CASE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_CASE_STUDY_FILEPATH+PDF_TEST_CASE_STUDY_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_CASE_STUDY_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_CASE_STUDY_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_CASE_STUDY_FILENAME,
                    },
                },
                #endregion
            };

            repository.AddCloudApplication(ca);

            #endregion

            #region CLARIZEN
            ca = new CloudApplication()
            {
                Brand = "clarizen",
                ServiceName = "Professional",
                CompanyURL = "www.clarizen.com",
                OperatingSystems = new List<Domain.Models.OperatingSystem>()
                {
                    repository.FindOperatingSystemByName("WIN"),
                    repository.FindOperatingSystemByName("MAC"),
                    //repository.FindOperatingSystemByName("LINUX")
                },
                //MobilePlatforms = repository.GetAllMobilePlatforms(),
                MobilePlatforms = new List<MobilePlatform>()
                {
                    repository.FindMobilePlatformByName("ANDROID"),
                    repository.FindMobilePlatformByName("IPHONE"),
                    repository.FindMobilePlatformByName("BB"),
                    //repository.FindMobilePlatformByName("IPAD")
                },
                Browsers = new List<Browser>()
                {
                    repository.FindBrowserByName("Internet Explorer 6"),
                    repository.FindBrowserByName("Internet Explorer 7"),
                    repository.FindBrowserByName("Internet Explorer 8"),
                    repository.FindBrowserByName("Internet Explorer 9"),
                    repository.FindBrowserByName("FIREFOX"),
                    repository.FindBrowserByName("CHROME"),
                    repository.FindBrowserByName("SAFARI"),
                },
                LicenceTypeMinimum = repository.FindLicenceTypeMinimumByName(1),
                LicenceTypeMaximum = repository.FindLicenceTypeMaximumByName(99),
                Languages = new List<Language>()
                {
                    repository.FindLanguageByName("ENGLISH")
                },
                SupportTypes = new List<SupportType>()
                {
                    //repository.FindSupportTypeByName("PHONE"),
                    repository.FindSupportTypeByName("ONLINE"),
                    //repository.FindSupportTypeByName("EMAIL")
                },
                SupportHours = repository.FindSupportHoursByName("24"),
                SupportDays = repository.FindSupportDaysByName("7"),
                SupportTerritories = new List<SupportTerritory>()
                {
                    repository.FindSupportTerritoryByName("US"),
                },
                VideoTrainingSupport = false,
                //MaximumMeetingAttendees = 50,
                //MaximumWebinarAttendees = 0,
                CloudApplicationFeatures = new List<CloudApplicationFeature>()
                {
                    repository.FindFeatureByName("NUMBER OF PROJECTS"),
                    repository.FindFeatureByName("FILE STORAGE"),
                    repository.FindFeatureByName("MULTI-USERS PER ACCOUNT"),
                    repository.FindFeatureByName("DOCUMENT SHARING"),
                    repository.FindFeatureByName("SHARED WORKSPACE"),
                    repository.FindFeatureByName("EDITED DOCUMENT TRACKING"),
                    repository.FindFeatureByName("LOCKFILES"),
                    repository.FindFeatureByName("UPDATE & DEADLINE ALERTS"),
                    repository.FindFeatureByName("INTERACTIVE GANTT CHARTS"),
                    repository.FindFeatureByName("BUDGET TRACKING"),
                    //repository.FindFeatureByName("CLIENT INVOICING"),
                    //repository.FindFeatureByName("PROJECT WIKI"),
                    repository.FindFeatureByName("CUSTOMISED REPORTS"),
                    repository.FindFeatureByName("MS PROJECT COMPATIBLE"),
                    repository.FindFeatureByName("SSL SECURITY"),
                    repository.FindFeatureByName("MILITARY GRADE DOCUMENT SECURITY"),
                    repository.FindFeatureByName("GUARANTEED RESTORE"),
                    //repository.FindFeatureByName("OFFLINE MODE"),
                    //repository.FindFeatureByName("3RD PARTY APIS"),
                    repository.FindFeatureByName("BUG TRACKER"),
                },
                ApplicationCostPerMonth = 24.95M,
                ApplicationCostPerAnnum = 0.00M,
                //CallsPackageCostPerMonth = 0M,
                SetupFee = repository.FindSetupFeeByName("NOT APPLICABLE"),
                MinimumContract = repository.FindMinimumContractByName("36 MONTHS"),
                PaymentFrequency = repository.FindPaymentFrequencyByName("MONTHLY"),
                PaymentOptions = new List<PaymentOption>()
                {
                    repository.FindPaymentOptionByName("CREDIT CARD"),
                    repository.FindPaymentOptionByName("PRE-PAY"),
                },
                FreeTrialPeriod = repository.FindFreeTrialPeriodByName("YES"),
                Category = repository.FindCategoryByName("PROJECT MANAGEMENT"),
                Vendor = repository.FindVendorByName("clarizen"),
                Description = repository.GetDescription(),
                AddDate = DateTime.Now,
                #region Ratings,Reviews,Case Studies,White Papers
                Ratings = new List<CloudApplicationRating>()
                {
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                },
                Reviews = new List<CloudApplicationReview>()
                {
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                },
                ThumbnailDocuments = new List<ThumbnailDocument>()
                {
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("WHITE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_WHITE_PAPER_FILEPATH+PDF_TEST_WHITE_PAPER_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_WHITE_PAPER_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_WHITE_PAPER_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_WHITE_PAPER_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("WHITE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_WHITE_PAPER_FILEPATH+PDF_TEST_WHITE_PAPER_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_WHITE_PAPER_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_WHITE_PAPER_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_WHITE_PAPER_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("WHITE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_WHITE_PAPER_FILEPATH+PDF_TEST_WHITE_PAPER_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_WHITE_PAPER_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_WHITE_PAPER_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_WHITE_PAPER_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("CASE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_CASE_STUDY_FILEPATH+PDF_TEST_CASE_STUDY_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_CASE_STUDY_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_CASE_STUDY_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_CASE_STUDY_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("CASE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_CASE_STUDY_FILEPATH+PDF_TEST_CASE_STUDY_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_CASE_STUDY_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_CASE_STUDY_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_CASE_STUDY_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("CASE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_CASE_STUDY_FILEPATH+PDF_TEST_CASE_STUDY_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_CASE_STUDY_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_CASE_STUDY_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_CASE_STUDY_FILENAME,
                    },
                },
                #endregion
            };

            repository.AddCloudApplication(ca);

            #endregion

            #region PROWORKFLOW
            ca = new CloudApplication()
            {
                Brand = "ProWorkflow",
                ServiceName = "Professional",
                CompanyURL = "www.proworkflow.com",
                OperatingSystems = new List<Domain.Models.OperatingSystem>()
                {
                    repository.FindOperatingSystemByName("WIN"),
                    repository.FindOperatingSystemByName("MAC"),
                    //repository.FindOperatingSystemByName("LINUX")
                },
                //MobilePlatforms = repository.GetAllMobilePlatforms(),
                MobilePlatforms = new List<MobilePlatform>()
                {
                    repository.FindMobilePlatformByName("ANDROID"),
                    repository.FindMobilePlatformByName("IPHONE"),
                    repository.FindMobilePlatformByName("BB"),
                    //repository.FindMobilePlatformByName("IPAD")
                },
                Browsers = new List<Browser>()
                {
                    repository.FindBrowserByName("Internet Explorer 6"),
                    repository.FindBrowserByName("Internet Explorer 7"),
                    repository.FindBrowserByName("Internet Explorer 8"),
                    repository.FindBrowserByName("Internet Explorer 9"),
                    repository.FindBrowserByName("FIREFOX"),
                    repository.FindBrowserByName("CHROME"),
                    repository.FindBrowserByName("SAFARI"),
                },
                LicenceTypeMinimum = repository.FindLicenceTypeMinimumByName(1),
                LicenceTypeMaximum = repository.FindLicenceTypeMaximumByName(99),
                Languages = new List<Language>()
                {
                    repository.FindLanguageByName("ENGLISH")
                },
                SupportTypes = new List<SupportType>()
                {
                    //repository.FindSupportTypeByName("PHONE"),
                    repository.FindSupportTypeByName("ONLINE"),
                    //repository.FindSupportTypeByName("EMAIL")
                },
                SupportHours = repository.FindSupportHoursByName("24"),
                SupportDays = repository.FindSupportDaysByName("7"),
                SupportTerritories = new List<SupportTerritory>()
                {
                    repository.FindSupportTerritoryByName("UK"),
                },
                VideoTrainingSupport = false,
                //MaximumMeetingAttendees = 50,
                //MaximumWebinarAttendees = 0,
                CloudApplicationFeatures = new List<CloudApplicationFeature>()
                {
                    repository.FindFeatureByName("NUMBER OF PROJECTS"),
                    repository.FindFeatureByName("FILE STORAGE"),
                    repository.FindFeatureByName("MULTI-USERS PER ACCOUNT"),
                    repository.FindFeatureByName("DOCUMENT SHARING"),
                    repository.FindFeatureByName("SHARED WORKSPACE"),
                    repository.FindFeatureByName("EDITED DOCUMENT TRACKING"),
                    repository.FindFeatureByName("LOCKFILES"),
                    repository.FindFeatureByName("UPDATE & DEADLINE ALERTS"),
                    repository.FindFeatureByName("INTERACTIVE GANTT CHARTS"),
                    repository.FindFeatureByName("BUDGET TRACKING"),
                    //repository.FindFeatureByName("CLIENT INVOICING"),
                    //repository.FindFeatureByName("PROJECT WIKI"),
                    repository.FindFeatureByName("CUSTOMISED REPORTS"),
                    repository.FindFeatureByName("MS PROJECT COMPATIBLE"),
                    repository.FindFeatureByName("SSL SECURITY"),
                    repository.FindFeatureByName("MILITARY GRADE DOCUMENT SECURITY"),
                    repository.FindFeatureByName("GUARANTEED RESTORE"),
                    repository.FindFeatureByName("OFFLINE MODE"),
                    //repository.FindFeatureByName("3RD PARTY APIS"),
                    //repository.FindFeatureByName("BUG TRACKER"),
                },
                ApplicationCostPerMonth = 20.00M,
                ApplicationCostPerAnnum = 0.00M,
                //CallsPackageCostPerMonth = 0M,
                SetupFee = repository.FindSetupFeeByName("NOT APPLICABLE"),
                MinimumContract = repository.FindMinimumContractByName("12 MONTHS"),
                PaymentFrequency = repository.FindPaymentFrequencyByName("MONTHLY"),
                PaymentOptions = new List<PaymentOption>()
                {
                    repository.FindPaymentOptionByName("CREDIT CARD"),
                    repository.FindPaymentOptionByName("PRE-PAY"),
                },
                FreeTrialPeriod = repository.FindFreeTrialPeriodByName("YES"),
                Category = repository.FindCategoryByName("PROJECT MANAGEMENT"),
                Vendor = repository.FindVendorByName("ProWorkflow"),
                Description = repository.GetDescription(),
                AddDate = DateTime.Now,
                #region Ratings,Reviews,Case Studies,White Papers
                Ratings = new List<CloudApplicationRating>()
                {
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                },
                Reviews = new List<CloudApplicationReview>()
                {
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                },
                ThumbnailDocuments = new List<ThumbnailDocument>()
                {
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("WHITE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_WHITE_PAPER_FILEPATH+PDF_TEST_WHITE_PAPER_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_WHITE_PAPER_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_WHITE_PAPER_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_WHITE_PAPER_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("WHITE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_WHITE_PAPER_FILEPATH+PDF_TEST_WHITE_PAPER_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_WHITE_PAPER_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_WHITE_PAPER_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_WHITE_PAPER_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("WHITE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_WHITE_PAPER_FILEPATH+PDF_TEST_WHITE_PAPER_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_WHITE_PAPER_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_WHITE_PAPER_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_WHITE_PAPER_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("CASE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_CASE_STUDY_FILEPATH+PDF_TEST_CASE_STUDY_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_CASE_STUDY_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_CASE_STUDY_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_CASE_STUDY_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("CASE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_CASE_STUDY_FILEPATH+PDF_TEST_CASE_STUDY_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_CASE_STUDY_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_CASE_STUDY_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_CASE_STUDY_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("CASE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_CASE_STUDY_FILEPATH+PDF_TEST_CASE_STUDY_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_CASE_STUDY_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_CASE_STUDY_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_CASE_STUDY_FILENAME,
                    },
                },
                #endregion
            };

            repository.AddCloudApplication(ca);

            #endregion

            #region HYPEROFFICE
            ca = new CloudApplication()
            {
                Brand = "HyperOffice",
                ServiceName = "Online Project",
                CompanyURL = "www.hyperoffice.com",
                OperatingSystems = new List<Domain.Models.OperatingSystem>()
                {
                    repository.FindOperatingSystemByName("WIN"),
                    repository.FindOperatingSystemByName("MAC"),
                    //repository.FindOperatingSystemByName("LINUX")
                },
                //MobilePlatforms = repository.GetAllMobilePlatforms(),
                MobilePlatforms = new List<MobilePlatform>()
                {
                    repository.FindMobilePlatformByName("ANDROID"),
                    repository.FindMobilePlatformByName("IPHONE"),
                    repository.FindMobilePlatformByName("BB"),
                    //repository.FindMobilePlatformByName("IPAD")
                },
                Browsers = new List<Browser>()
                {
                    repository.FindBrowserByName("Internet Explorer 6"),
                    repository.FindBrowserByName("Internet Explorer 7"),
                    repository.FindBrowserByName("Internet Explorer 8"),
                    repository.FindBrowserByName("Internet Explorer 9"),
                    repository.FindBrowserByName("FIREFOX"),
                    repository.FindBrowserByName("CHROME"),
                    repository.FindBrowserByName("SAFARI"),
                },
                LicenceTypeMinimum = repository.FindLicenceTypeMinimumByName(1),
                LicenceTypeMaximum = repository.FindLicenceTypeMaximumByName(99),
                Languages = new List<Language>()
                {
                    repository.FindLanguageByName("ENGLISH")
                },
                SupportTypes = new List<SupportType>()
                {
                    //repository.FindSupportTypeByName("PHONE"),
                    repository.FindSupportTypeByName("ONLINE"),
                    //repository.FindSupportTypeByName("EMAIL")
                },
                SupportHours = repository.FindSupportHoursByName("24"),
                SupportDays = repository.FindSupportDaysByName("7"),
                SupportTerritories = new List<SupportTerritory>()
                {
                    repository.FindSupportTerritoryByName("US"),
                },
                VideoTrainingSupport = false,
                //MaximumMeetingAttendees = 50,
                //MaximumWebinarAttendees = 0,
                CloudApplicationFeatures = new List<CloudApplicationFeature>()
                {
                    repository.FindFeatureByName("NUMBER OF PROJECTS"),
                    repository.FindFeatureByName("FILE STORAGE"),
                    repository.FindFeatureByName("MULTI-USERS PER ACCOUNT"),
                    repository.FindFeatureByName("DOCUMENT SHARING"),
                    repository.FindFeatureByName("SHARED WORKSPACE"),
                    repository.FindFeatureByName("EDITED DOCUMENT TRACKING"),
                    repository.FindFeatureByName("LOCKFILES"),
                    repository.FindFeatureByName("UPDATE & DEADLINE ALERTS"),
                    repository.FindFeatureByName("INTERACTIVE GANTT CHARTS"),
                    repository.FindFeatureByName("BUDGET TRACKING"),
                    //repository.FindFeatureByName("CLIENT INVOICING"),
                    //repository.FindFeatureByName("PROJECT WIKI"),
                    repository.FindFeatureByName("CUSTOMISED REPORTS"),
                    repository.FindFeatureByName("MS PROJECT COMPATIBLE"),
                    repository.FindFeatureByName("SSL SECURITY"),
                    repository.FindFeatureByName("MILITARY GRADE DOCUMENT SECURITY"),
                    repository.FindFeatureByName("GUARANTEED RESTORE"),
                    repository.FindFeatureByName("OFFLINE MODE"),
                    repository.FindFeatureByName("3RD PARTY APIS"),
                    repository.FindFeatureByName("BUG TRACKER"),
                },
                ApplicationCostPerMonth = 44.99M,
                ApplicationCostPerAnnum = 431.90M,
                //CallsPackageCostPerMonth = 0M,
                SetupFee = repository.FindSetupFeeByName("NOT APPLICABLE"),
                MinimumContract = repository.FindMinimumContractByName("12 MONTHS"),
                PaymentFrequency = repository.FindPaymentFrequencyByName("MONTHLY"),
                PaymentOptions = new List<PaymentOption>()
                {
                    repository.FindPaymentOptionByName("CREDIT CARD"),
                    repository.FindPaymentOptionByName("PRE-PAY"),
                },
                FreeTrialPeriod = repository.FindFreeTrialPeriodByName("YES"),
                Category = repository.FindCategoryByName("PROJECT MANAGEMENT"),
                Vendor = repository.FindVendorByName("HyperOffice"),
                Description = repository.GetDescription(),
                AddDate = DateTime.Now,
                #region Ratings,Reviews,Case Studies,White Papers
                Ratings = new List<CloudApplicationRating>()
                {
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                },
                Reviews = new List<CloudApplicationReview>()
                {
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                },
                ThumbnailDocuments = new List<ThumbnailDocument>()
                {
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("WHITE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_WHITE_PAPER_FILEPATH+PDF_TEST_WHITE_PAPER_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_WHITE_PAPER_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_WHITE_PAPER_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_WHITE_PAPER_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("WHITE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_WHITE_PAPER_FILEPATH+PDF_TEST_WHITE_PAPER_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_WHITE_PAPER_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_WHITE_PAPER_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_WHITE_PAPER_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("WHITE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_WHITE_PAPER_FILEPATH+PDF_TEST_WHITE_PAPER_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_WHITE_PAPER_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_WHITE_PAPER_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_WHITE_PAPER_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("CASE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_CASE_STUDY_FILEPATH+PDF_TEST_CASE_STUDY_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_CASE_STUDY_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_CASE_STUDY_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_CASE_STUDY_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("CASE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_CASE_STUDY_FILEPATH+PDF_TEST_CASE_STUDY_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_CASE_STUDY_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_CASE_STUDY_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_CASE_STUDY_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("CASE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_CASE_STUDY_FILEPATH+PDF_TEST_CASE_STUDY_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_CASE_STUDY_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_CASE_STUDY_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_CASE_STUDY_FILENAME,
                    },
                },
                #endregion
            };

            repository.AddCloudApplication(ca);

            #endregion

            #region WORKETC
            ca = new CloudApplication()
            {
                Brand = "WORKetc",
                ServiceName = "Project Management",
                CompanyURL = "www.attask.com",
                OperatingSystems = new List<Domain.Models.OperatingSystem>()
                {
                    repository.FindOperatingSystemByName("WIN"),
                    repository.FindOperatingSystemByName("MAC"),
                    //repository.FindOperatingSystemByName("LINUX")
                },
                //MobilePlatforms = repository.GetAllMobilePlatforms(),
                MobilePlatforms = new List<MobilePlatform>()
                {
                    repository.FindMobilePlatformByName("ANDROID"),
                    repository.FindMobilePlatformByName("IPHONE"),
                    repository.FindMobilePlatformByName("BB"),
                    //repository.FindMobilePlatformByName("IPAD")
                },
                Browsers = new List<Browser>()
                {
                    repository.FindBrowserByName("Internet Explorer 6"),
                    repository.FindBrowserByName("Internet Explorer 7"),
                    repository.FindBrowserByName("Internet Explorer 8"),
                    repository.FindBrowserByName("Internet Explorer 9"),
                    repository.FindBrowserByName("FIREFOX"),
                    repository.FindBrowserByName("CHROME"),
                    repository.FindBrowserByName("SAFARI"),
                },
                LicenceTypeMinimum = repository.FindLicenceTypeMinimumByName(1),
                LicenceTypeMaximum = repository.FindLicenceTypeMaximumByName(99),
                Languages = new List<Language>()
                {
                    repository.FindLanguageByName("ENGLISH")
                },
                SupportTypes = new List<SupportType>()
                {
                    //repository.FindSupportTypeByName("PHONE"),
                    repository.FindSupportTypeByName("ONLINE"),
                    //repository.FindSupportTypeByName("EMAIL")
                },
                SupportHours = repository.FindSupportHoursByName("24"),
                SupportDays = repository.FindSupportDaysByName("7"),
                SupportTerritories = new List<SupportTerritory>()
                {
                    repository.FindSupportTerritoryByName("US"),
                },
                VideoTrainingSupport = false,
                //MaximumMeetingAttendees = 50,
                //MaximumWebinarAttendees = 0,
                CloudApplicationFeatures = new List<CloudApplicationFeature>()
                {
                    repository.FindFeatureByName("NUMBER OF PROJECTS"),
                    repository.FindFeatureByName("FILE STORAGE"),
                    repository.FindFeatureByName("MULTI-USERS PER ACCOUNT"),
                    repository.FindFeatureByName("DOCUMENT SHARING"),
                    repository.FindFeatureByName("SHARED WORKSPACE"),
                    repository.FindFeatureByName("EDITED DOCUMENT TRACKING"),
                    repository.FindFeatureByName("LOCKFILES"),
                    repository.FindFeatureByName("UPDATE & DEADLINE ALERTS"),
                    repository.FindFeatureByName("INTERACTIVE GANTT CHARTS"),
                    repository.FindFeatureByName("BUDGET TRACKING"),
                    repository.FindFeatureByName("CLIENT INVOICING"),
                    repository.FindFeatureByName("PROJECT WIKI"),
                    repository.FindFeatureByName("CUSTOMISED REPORTS"),
                    repository.FindFeatureByName("MS PROJECT COMPATIBLE"),
                    repository.FindFeatureByName("SSL SECURITY"),
                    repository.FindFeatureByName("MILITARY GRADE DOCUMENT SECURITY"),
                    repository.FindFeatureByName("GUARANTEED RESTORE"),
                    repository.FindFeatureByName("OFFLINE MODE"),
                    repository.FindFeatureByName("3RD PARTY APIS"),
                    repository.FindFeatureByName("BUG TRACKER"),
                },
                ApplicationCostPerMonth = 39.00M,
                ApplicationCostPerAnnum = 0.00M,
                //CallsPackageCostPerMonth = 0M,
                SetupFee = repository.FindSetupFeeByName("NOT APPLICABLE"),
                MinimumContract = repository.FindMinimumContractByName("12 MONTHS"),
                PaymentFrequency = repository.FindPaymentFrequencyByName("MONTHLY"),
                PaymentOptions = new List<PaymentOption>()
                {
                    repository.FindPaymentOptionByName("CREDIT CARD"),
                    repository.FindPaymentOptionByName("PRE-PAY"),
                },
                FreeTrialPeriod = repository.FindFreeTrialPeriodByName("YES"),
                Category = repository.FindCategoryByName("PROJECT MANAGEMENT"),
                Vendor = repository.FindVendorByName("WORKetc"),
                Description = repository.GetDescription(),
                AddDate = DateTime.Now,
                #region Ratings,Reviews,Case Studies,White Papers
                Ratings = new List<CloudApplicationRating>()
                {
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                },
                Reviews = new List<CloudApplicationReview>()
                {
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                },
                ThumbnailDocuments = new List<ThumbnailDocument>()
                {
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("WHITE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_WHITE_PAPER_FILEPATH+PDF_TEST_WHITE_PAPER_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_WHITE_PAPER_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_WHITE_PAPER_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_WHITE_PAPER_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("WHITE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_WHITE_PAPER_FILEPATH+PDF_TEST_WHITE_PAPER_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_WHITE_PAPER_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_WHITE_PAPER_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_WHITE_PAPER_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("WHITE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_WHITE_PAPER_FILEPATH+PDF_TEST_WHITE_PAPER_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_WHITE_PAPER_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_WHITE_PAPER_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_WHITE_PAPER_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("CASE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_CASE_STUDY_FILEPATH+PDF_TEST_CASE_STUDY_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_CASE_STUDY_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_CASE_STUDY_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_CASE_STUDY_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("CASE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_CASE_STUDY_FILEPATH+PDF_TEST_CASE_STUDY_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_CASE_STUDY_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_CASE_STUDY_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_CASE_STUDY_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("CASE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_CASE_STUDY_FILEPATH+PDF_TEST_CASE_STUDY_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_CASE_STUDY_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_CASE_STUDY_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_CASE_STUDY_FILENAME,
                    },
                },
                #endregion
            };

            repository.AddCloudApplication(ca);

            #endregion

            #region LIQUIDPLANNER
            ca = new CloudApplication()
            {
                Brand = "LiquidPlanner",
                ServiceName = "Monthly Plan",
                CompanyURL = "www.liquidplanner.com",
                OperatingSystems = new List<Domain.Models.OperatingSystem>()
                {
                    repository.FindOperatingSystemByName("WIN"),
                    repository.FindOperatingSystemByName("MAC"),
                    //repository.FindOperatingSystemByName("LINUX")
                },
                //MobilePlatforms = repository.GetAllMobilePlatforms(),
                MobilePlatforms = new List<MobilePlatform>()
                {
                    repository.FindMobilePlatformByName("ANDROID"),
                    repository.FindMobilePlatformByName("IPHONE"),
                    repository.FindMobilePlatformByName("BB"),
                    //repository.FindMobilePlatformByName("IPAD")
                },
                Browsers = new List<Browser>()
                {
                    repository.FindBrowserByName("Internet Explorer 6"),
                    repository.FindBrowserByName("Internet Explorer 7"),
                    repository.FindBrowserByName("Internet Explorer 8"),
                    repository.FindBrowserByName("Internet Explorer 9"),
                    repository.FindBrowserByName("FIREFOX"),
                    repository.FindBrowserByName("CHROME"),
                    repository.FindBrowserByName("SAFARI"),
                },
                LicenceTypeMinimum = repository.FindLicenceTypeMinimumByName(1),
                LicenceTypeMaximum = repository.FindLicenceTypeMaximumByName(99),
                Languages = new List<Language>()
                {
                    repository.FindLanguageByName("ENGLISH")
                },
                SupportTypes = new List<SupportType>()
                {
                    repository.FindSupportTypeByName("PHONE"),
                    repository.FindSupportTypeByName("ONLINE"),
                    //repository.FindSupportTypeByName("EMAIL")
                },
                SupportHours = repository.FindSupportHoursByName("24"),
                SupportDays = repository.FindSupportDaysByName("7"),
                SupportTerritories = new List<SupportTerritory>()
                {
                    repository.FindSupportTerritoryByName("US"),
                },
                VideoTrainingSupport = false,
                //MaximumMeetingAttendees = 50,
                //MaximumWebinarAttendees = 0,
                CloudApplicationFeatures = new List<CloudApplicationFeature>()
                {
                    repository.FindFeatureByName("NUMBER OF PROJECTS"),
                    repository.FindFeatureByName("FILE STORAGE"),
                    repository.FindFeatureByName("MULTI-USERS PER ACCOUNT"),
                    repository.FindFeatureByName("DOCUMENT SHARING"),
                    repository.FindFeatureByName("SHARED WORKSPACE"),
                    repository.FindFeatureByName("EDITED DOCUMENT TRACKING"),
                    repository.FindFeatureByName("LOCKFILES"),
                    repository.FindFeatureByName("UPDATE & DEADLINE ALERTS"),
                    repository.FindFeatureByName("INTERACTIVE GANTT CHARTS"),
                    repository.FindFeatureByName("BUDGET TRACKING"),
                    //repository.FindFeatureByName("CLIENT INVOICING"),
                    //repository.FindFeatureByName("PROJECT WIKI"),
                    repository.FindFeatureByName("CUSTOMISED REPORTS"),
                    repository.FindFeatureByName("MS PROJECT COMPATIBLE"),
                    repository.FindFeatureByName("SSL SECURITY"),
                    repository.FindFeatureByName("MILITARY GRADE DOCUMENT SECURITY"),
                    repository.FindFeatureByName("GUARANTEED RESTORE"),
                    repository.FindFeatureByName("OFFLINE MODE"),
                    //repository.FindFeatureByName("3RD PARTY APIS"),
                    //repository.FindFeatureByName("BUG TRACKER"),
                },
                ApplicationCostPerMonth = 29.00M,
                ApplicationCostPerAnnum = 0.00M,
                //CallsPackageCostPerMonth = 0M,
                SetupFee = repository.FindSetupFeeByName("NOT APPLICABLE"),
                MinimumContract = repository.FindMinimumContractByName("12 MONTHS"),
                PaymentFrequency = repository.FindPaymentFrequencyByName("MONTHLY"),
                PaymentOptions = new List<PaymentOption>()
                {
                    repository.FindPaymentOptionByName("CREDIT CARD"),
                    repository.FindPaymentOptionByName("PRE-PAY"),
                },
                FreeTrialPeriod = repository.FindFreeTrialPeriodByName("YES"),
                Category = repository.FindCategoryByName("PROJECT MANAGEMENT"),
                Vendor = repository.FindVendorByName("LiquidPlanner"),
                Description = repository.GetDescription(),
                AddDate = DateTime.Now,
                #region Ratings,Reviews,Case Studies,White Papers
                Ratings = new List<CloudApplicationRating>()
                {
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                },
                Reviews = new List<CloudApplicationReview>()
                {
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                },
                ThumbnailDocuments = new List<ThumbnailDocument>()
                {
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("WHITE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_WHITE_PAPER_FILEPATH+PDF_TEST_WHITE_PAPER_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_WHITE_PAPER_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_WHITE_PAPER_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_WHITE_PAPER_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("WHITE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_WHITE_PAPER_FILEPATH+PDF_TEST_WHITE_PAPER_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_WHITE_PAPER_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_WHITE_PAPER_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_WHITE_PAPER_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("WHITE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_WHITE_PAPER_FILEPATH+PDF_TEST_WHITE_PAPER_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_WHITE_PAPER_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_WHITE_PAPER_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_WHITE_PAPER_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("CASE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_CASE_STUDY_FILEPATH+PDF_TEST_CASE_STUDY_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_CASE_STUDY_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_CASE_STUDY_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_CASE_STUDY_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("CASE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_CASE_STUDY_FILEPATH+PDF_TEST_CASE_STUDY_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_CASE_STUDY_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_CASE_STUDY_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_CASE_STUDY_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("CASE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_CASE_STUDY_FILEPATH+PDF_TEST_CASE_STUDY_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_CASE_STUDY_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_CASE_STUDY_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_CASE_STUDY_FILENAME,
                    },
                },
                #endregion
            };

            repository.AddCloudApplication(ca);

            #endregion

            #region CELOXIS
            ca = new CloudApplication()
            {
                Brand = "CELOXIS",
                ServiceName = "Hosted Version",
                CompanyURL = "www.celoxis.com",
                OperatingSystems = new List<Domain.Models.OperatingSystem>()
                {
                    repository.FindOperatingSystemByName("WIN"),
                    repository.FindOperatingSystemByName("MAC"),
                    //repository.FindOperatingSystemByName("LINUX")
                },
                //MobilePlatforms = repository.GetAllMobilePlatforms(),
                MobilePlatforms = new List<MobilePlatform>()
                {
                    repository.FindMobilePlatformByName("ANDROID"),
                    repository.FindMobilePlatformByName("IPHONE"),
                    repository.FindMobilePlatformByName("BB"),
                    //repository.FindMobilePlatformByName("IPAD")
                },
                Browsers = new List<Browser>()
                {
                    repository.FindBrowserByName("Internet Explorer 6"),
                    repository.FindBrowserByName("Internet Explorer 7"),
                    repository.FindBrowserByName("Internet Explorer 8"),
                    repository.FindBrowserByName("Internet Explorer 9"),
                    repository.FindBrowserByName("FIREFOX"),
                    repository.FindBrowserByName("CHROME"),
                    repository.FindBrowserByName("SAFARI"),
                },
                LicenceTypeMinimum = repository.FindLicenceTypeMinimumByName(1),
                LicenceTypeMaximum = repository.FindLicenceTypeMaximumByName(99),
                Languages = new List<Language>()
                {
                    repository.FindLanguageByName("ENGLISH")
                },
                SupportTypes = new List<SupportType>()
                {
                    repository.FindSupportTypeByName("PHONE"),
                    repository.FindSupportTypeByName("ONLINE"),
                    //repository.FindSupportTypeByName("EMAIL")
                },
                SupportHours = repository.FindSupportHoursByName("24"),
                SupportDays = repository.FindSupportDaysByName("7"),
                SupportTerritories = new List<SupportTerritory>()
                {
                    repository.FindSupportTerritoryByName("US"),
                },
                VideoTrainingSupport = false,
                //MaximumMeetingAttendees = 50,
                //MaximumWebinarAttendees = 0,
                CloudApplicationFeatures = new List<CloudApplicationFeature>()
                {
                    repository.FindFeatureByName("NUMBER OF PROJECTS"),
                    repository.FindFeatureByName("FILE STORAGE"),
                    repository.FindFeatureByName("MULTI-USERS PER ACCOUNT"),
                    repository.FindFeatureByName("DOCUMENT SHARING"),
                    repository.FindFeatureByName("SHARED WORKSPACE"),
                    repository.FindFeatureByName("EDITED DOCUMENT TRACKING"),
                    repository.FindFeatureByName("LOCKFILES"),
                    repository.FindFeatureByName("UPDATE & DEADLINE ALERTS"),
                    repository.FindFeatureByName("INTERACTIVE GANTT CHARTS"),
                    repository.FindFeatureByName("BUDGET TRACKING"),
                    //repository.FindFeatureByName("CLIENT INVOICING"),
                    //repository.FindFeatureByName("PROJECT WIKI"),
                    repository.FindFeatureByName("CUSTOMISED REPORTS"),
                    repository.FindFeatureByName("MS PROJECT COMPATIBLE"),
                    repository.FindFeatureByName("SSL SECURITY"),
                    repository.FindFeatureByName("MILITARY GRADE DOCUMENT SECURITY"),
                    repository.FindFeatureByName("GUARANTEED RESTORE"),
                    repository.FindFeatureByName("OFFLINE MODE"),
                    repository.FindFeatureByName("3RD PARTY APIS"),
                    repository.FindFeatureByName("BUG TRACKER"),
                },
                ApplicationCostPerMonth = 14.95M,
                ApplicationCostPerAnnum = 0.00M,
                //CallsPackageCostPerMonth = 0M,
                SetupFee = repository.FindSetupFeeByName("NOT APPLICABLE"),
                MinimumContract = repository.FindMinimumContractByName("12 MONTHS"),
                PaymentFrequency = repository.FindPaymentFrequencyByName("MONTHLY"),
                PaymentOptions = new List<PaymentOption>()
                {
                    repository.FindPaymentOptionByName("CREDIT CARD"),
                    repository.FindPaymentOptionByName("PRE-PAY"),
                },
                FreeTrialPeriod = repository.FindFreeTrialPeriodByName("YES"),
                Category = repository.FindCategoryByName("PROJECT MANAGEMENT"),
                Vendor = repository.FindVendorByName("CELOXIS"),
                Description = repository.GetDescription(),
                AddDate = DateTime.Now,
                #region Ratings,Reviews,Case Studies,White Papers
                Ratings = new List<CloudApplicationRating>()
                {
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                },
                Reviews = new List<CloudApplicationReview>()
                {
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                        CloudApplicationReviewDate = DateTime.Now,
                    },
                },
                ThumbnailDocuments = new List<ThumbnailDocument>()
                {
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("WHITE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_WHITE_PAPER_FILEPATH+PDF_TEST_WHITE_PAPER_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_WHITE_PAPER_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_WHITE_PAPER_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_WHITE_PAPER_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("WHITE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_WHITE_PAPER_FILEPATH+PDF_TEST_WHITE_PAPER_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_WHITE_PAPER_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_WHITE_PAPER_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_WHITE_PAPER_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("WHITE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_WHITE_PAPER_FILEPATH+PDF_TEST_WHITE_PAPER_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_WHITE_PAPER_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_WHITE_PAPER_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_WHITE_PAPER_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("CASE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_CASE_STUDY_FILEPATH+PDF_TEST_CASE_STUDY_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_CASE_STUDY_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_CASE_STUDY_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_CASE_STUDY_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("CASE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_CASE_STUDY_FILEPATH+PDF_TEST_CASE_STUDY_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_CASE_STUDY_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_CASE_STUDY_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_CASE_STUDY_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("CASE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_CASE_STUDY_FILEPATH+PDF_TEST_CASE_STUDY_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_CASE_STUDY_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_CASE_STUDY_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_CASE_STUDY_FILENAME,
                    },
                },
                #endregion
            };

            repository.AddCloudApplication(ca);

            #endregion

            #region BLUECAMROO
            ca = new CloudApplication()
            {
                Brand = "blue camroo",
                ServiceName = "Single User",
                CompanyURL = "www.bluecamroo.com",
                OperatingSystems = new List<Domain.Models.OperatingSystem>()
                {
                    repository.FindOperatingSystemByName("WIN"),
                    repository.FindOperatingSystemByName("MAC"),
                    //repository.FindOperatingSystemByName("LINUX")
                },
                //MobilePlatforms = repository.GetAllMobilePlatforms(),
                MobilePlatforms = new List<MobilePlatform>()
                {
                    repository.FindMobilePlatformByName("ANDROID"),
                    repository.FindMobilePlatformByName("IPHONE"),
                    repository.FindMobilePlatformByName("BB"),
                    //repository.FindMobilePlatformByName("IPAD")
                },
                Browsers = new List<Browser>()
                {
                    repository.FindBrowserByName("Internet Explorer 6"),
                    repository.FindBrowserByName("Internet Explorer 7"),
                    repository.FindBrowserByName("Internet Explorer 8"),
                    repository.FindBrowserByName("Internet Explorer 9"),
                    repository.FindBrowserByName("FIREFOX"),
                    repository.FindBrowserByName("CHROME"),
                    repository.FindBrowserByName("SAFARI"),
                },
                LicenceTypeMinimum = repository.FindLicenceTypeMinimumByName(1),
                LicenceTypeMaximum = repository.FindLicenceTypeMaximumByName(99),
                Languages = new List<Language>()
                {
                    repository.FindLanguageByName("ENGLISH")
                },
                SupportTypes = new List<SupportType>()
                {
                    //repository.FindSupportTypeByName("PHONE"),
                    repository.FindSupportTypeByName("ONLINE"),
                    //repository.FindSupportTypeByName("EMAIL")
                },
                SupportHours = repository.FindSupportHoursByName("24"),
                SupportDays = repository.FindSupportDaysByName("7"),
                SupportTerritories = new List<SupportTerritory>()
                {
                    repository.FindSupportTerritoryByName("AUSTRALIA"),
                },
                VideoTrainingSupport = false,
                //MaximumMeetingAttendees = 50,
                //MaximumWebinarAttendees = 0,
                CloudApplicationFeatures = new List<CloudApplicationFeature>()
                {
                    repository.FindFeatureByName("NUMBER OF PROJECTS"),
                    repository.FindFeatureByName("FILE STORAGE"),
                    repository.FindFeatureByName("MULTI-USERS PER ACCOUNT"),
                    repository.FindFeatureByName("DOCUMENT SHARING"),
                    repository.FindFeatureByName("SHARED WORKSPACE"),
                    repository.FindFeatureByName("EDITED DOCUMENT TRACKING"),
                    repository.FindFeatureByName("LOCKFILES"),
                    repository.FindFeatureByName("UPDATE & DEADLINE ALERTS"),
                    repository.FindFeatureByName("INTERACTIVE GANTT CHARTS"),
                    repository.FindFeatureByName("BUDGET TRACKING"),
                    //repository.FindFeatureByName("CLIENT INVOICING"),
                    //repository.FindFeatureByName("PROJECT WIKI"),
                    repository.FindFeatureByName("CUSTOMISED REPORTS"),
                    repository.FindFeatureByName("MS PROJECT COMPATIBLE"),
                    repository.FindFeatureByName("SSL SECURITY"),
                    repository.FindFeatureByName("MILITARY GRADE DOCUMENT SECURITY"),
                    repository.FindFeatureByName("GUARANTEED RESTORE"),
                    //repository.FindFeatureByName("OFFLINE MODE"),
                    //repository.FindFeatureByName("3RD PARTY APIS"),
                    //repository.FindFeatureByName("BUG TRACKER"),
                },
                ApplicationCostPerMonth = 24.99M,
                ApplicationCostPerAnnum = 0.00M,
                //CallsPackageCostPerMonth = 0M,
                SetupFee = repository.FindSetupFeeByName("NOT APPLICABLE"),
                MinimumContract = repository.FindMinimumContractByName("12 MONTHS"),
                PaymentFrequency = repository.FindPaymentFrequencyByName("MONTHLY"),
                PaymentOptions = new List<PaymentOption>()
                {
                    repository.FindPaymentOptionByName("CREDIT CARD"),
                    repository.FindPaymentOptionByName("PRE-PAY"),
                },
                FreeTrialPeriod = repository.FindFreeTrialPeriodByName("YES"),
                Category = repository.FindCategoryByName("PROJECT MANAGEMENT"),
                Vendor = repository.FindVendorByName("blue camroo"),
                Description = repository.GetDescription(),
                AddDate = DateTime.Now,
                #region Ratings,Reviews,Case Studies,White Papers
                Ratings = new List<CloudApplicationRating>()
                {
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                },
                Reviews = new List<CloudApplicationReview>()
                {
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                },
                ThumbnailDocuments = new List<ThumbnailDocument>()
                {
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("WHITE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_WHITE_PAPER_FILEPATH+PDF_TEST_WHITE_PAPER_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_WHITE_PAPER_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_WHITE_PAPER_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_WHITE_PAPER_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("WHITE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_WHITE_PAPER_FILEPATH+PDF_TEST_WHITE_PAPER_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_WHITE_PAPER_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_WHITE_PAPER_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_WHITE_PAPER_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("WHITE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_WHITE_PAPER_FILEPATH+PDF_TEST_WHITE_PAPER_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_WHITE_PAPER_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_WHITE_PAPER_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_WHITE_PAPER_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("CASE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_CASE_STUDY_FILEPATH+PDF_TEST_CASE_STUDY_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_CASE_STUDY_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_CASE_STUDY_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_CASE_STUDY_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("CASE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_CASE_STUDY_FILEPATH+PDF_TEST_CASE_STUDY_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_CASE_STUDY_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_CASE_STUDY_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_CASE_STUDY_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("CASE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_CASE_STUDY_FILEPATH+PDF_TEST_CASE_STUDY_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_CASE_STUDY_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_CASE_STUDY_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_CASE_STUDY_FILENAME,
                    },
                },
                #endregion
            };

            repository.AddCloudApplication(ca);

            #endregion

            #region PROJECTMANAGER.COM
            ca = new CloudApplication()
            {
                Brand = "PROJECTMANAGER.com",
                ServiceName = "Starter",
                CompanyURL = "www.projectmanager.com",
                OperatingSystems = new List<Domain.Models.OperatingSystem>()
                {
                    repository.FindOperatingSystemByName("WIN"),
                    repository.FindOperatingSystemByName("MAC"),
                    //repository.FindOperatingSystemByName("LINUX")
                },
                //MobilePlatforms = repository.GetAllMobilePlatforms(),
                MobilePlatforms = new List<MobilePlatform>()
                {
                    repository.FindMobilePlatformByName("ANDROID"),
                    repository.FindMobilePlatformByName("IPHONE"),
                    repository.FindMobilePlatformByName("BB"),
                    //repository.FindMobilePlatformByName("IPAD")
                },
                Browsers = new List<Browser>()
                {
                    repository.FindBrowserByName("Internet Explorer 6"),
                    repository.FindBrowserByName("Internet Explorer 7"),
                    repository.FindBrowserByName("Internet Explorer 8"),
                    repository.FindBrowserByName("Internet Explorer 9"),
                    repository.FindBrowserByName("FIREFOX"),
                    repository.FindBrowserByName("CHROME"),
                    repository.FindBrowserByName("SAFARI"),
                },
                LicenceTypeMinimum = repository.FindLicenceTypeMinimumByName(1),
                LicenceTypeMaximum = repository.FindLicenceTypeMaximumByName(99),
                Languages = new List<Language>()
                {
                    repository.FindLanguageByName("ENGLISH")
                },
                SupportTypes = new List<SupportType>()
                {
                    repository.FindSupportTypeByName("PHONE"),
                    repository.FindSupportTypeByName("ONLINE"),
                    //repository.FindSupportTypeByName("EMAIL")
                },
                SupportHours = repository.FindSupportHoursByName("24"),
                SupportDays = repository.FindSupportDaysByName("7"),
                SupportTerritories = new List<SupportTerritory>()
                {
                    repository.FindSupportTerritoryByName("US"),
                },
                VideoTrainingSupport = false,
                //MaximumMeetingAttendees = 50,
                //MaximumWebinarAttendees = 0,
                CloudApplicationFeatures = new List<CloudApplicationFeature>()
                {
                    repository.FindFeatureByName("NUMBER OF PROJECTS"),
                    repository.FindFeatureByName("FILE STORAGE"),
                    repository.FindFeatureByName("MULTI-USERS PER ACCOUNT"),
                    repository.FindFeatureByName("DOCUMENT SHARING"),
                    repository.FindFeatureByName("SHARED WORKSPACE"),
                    repository.FindFeatureByName("EDITED DOCUMENT TRACKING"),
                    repository.FindFeatureByName("LOCKFILES"),
                    repository.FindFeatureByName("UPDATE & DEADLINE ALERTS"),
                    repository.FindFeatureByName("INTERACTIVE GANTT CHARTS"),
                    repository.FindFeatureByName("BUDGET TRACKING"),
                    //repository.FindFeatureByName("CLIENT INVOICING"),
                    //repository.FindFeatureByName("PROJECT WIKI"),
                    repository.FindFeatureByName("CUSTOMISED REPORTS"),
                    repository.FindFeatureByName("MS PROJECT COMPATIBLE"),
                    repository.FindFeatureByName("SSL SECURITY"),
                    repository.FindFeatureByName("MILITARY GRADE DOCUMENT SECURITY"),
                    repository.FindFeatureByName("GUARANTEED RESTORE"),
                    //repository.FindFeatureByName("OFFLINE MODE"),
                    repository.FindFeatureByName("3RD PARTY APIS"),
                    repository.FindFeatureByName("BUG TRACKER"),
                },
                ApplicationCostPerMonth = 25.00M,
                ApplicationCostPerAnnum = 0.00M,
                //CallsPackageCostPerMonth = 0M,
                SetupFee = repository.FindSetupFeeByName("NOT APPLICABLE"),
                MinimumContract = repository.FindMinimumContractByName("12 MONTHS"),
                PaymentFrequency = repository.FindPaymentFrequencyByName("MONTHLY"),
                PaymentOptions = new List<PaymentOption>()
                {
                    repository.FindPaymentOptionByName("CREDIT CARD"),
                    repository.FindPaymentOptionByName("PRE-PAY"),
                },
                FreeTrialPeriod = repository.FindFreeTrialPeriodByName("YES"),
                Category = repository.FindCategoryByName("PROJECT MANAGEMENT"),
                Vendor = repository.FindVendorByName("PROJECTMANAGER.com"),
                Description = repository.GetDescription(),
                AddDate = DateTime.Now,
                #region Ratings,Reviews,Case Studies,White Papers
                Ratings = new List<CloudApplicationRating>()
                {
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                },
                Reviews = new List<CloudApplicationReview>()
                {
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                },
                ThumbnailDocuments = new List<ThumbnailDocument>()
                {
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("WHITE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_WHITE_PAPER_FILEPATH+PDF_TEST_WHITE_PAPER_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_WHITE_PAPER_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_WHITE_PAPER_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_WHITE_PAPER_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("WHITE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_WHITE_PAPER_FILEPATH+PDF_TEST_WHITE_PAPER_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_WHITE_PAPER_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_WHITE_PAPER_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_WHITE_PAPER_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("WHITE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_WHITE_PAPER_FILEPATH+PDF_TEST_WHITE_PAPER_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_WHITE_PAPER_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_WHITE_PAPER_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_WHITE_PAPER_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("CASE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_CASE_STUDY_FILEPATH+PDF_TEST_CASE_STUDY_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_CASE_STUDY_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_CASE_STUDY_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_CASE_STUDY_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("CASE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_CASE_STUDY_FILEPATH+PDF_TEST_CASE_STUDY_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_CASE_STUDY_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_CASE_STUDY_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_CASE_STUDY_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("CASE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_CASE_STUDY_FILEPATH+PDF_TEST_CASE_STUDY_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_CASE_STUDY_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_CASE_STUDY_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_CASE_STUDY_FILENAME,
                    },
                },
                #endregion
            };

            repository.AddCloudApplication(ca);

            #endregion

            #region COLLABORATECLOUD
            ca = new CloudApplication()
            {
                Brand = "CollaborateCloud",
                ServiceName = "Basic Plus",
                CompanyURL = "www.collaboratecloud.com",
                OperatingSystems = new List<Domain.Models.OperatingSystem>()
                {
                    repository.FindOperatingSystemByName("WIN"),
                    repository.FindOperatingSystemByName("MAC"),
                    //repository.FindOperatingSystemByName("LINUX")
                },
                //MobilePlatforms = repository.GetAllMobilePlatforms(),
                MobilePlatforms = new List<MobilePlatform>()
                {
                    repository.FindMobilePlatformByName("ANDROID"),
                    repository.FindMobilePlatformByName("IPHONE"),
                    repository.FindMobilePlatformByName("BB"),
                    //repository.FindMobilePlatformByName("IPAD")
                },
                Browsers = new List<Browser>()
                {
                    repository.FindBrowserByName("Internet Explorer 6"),
                    repository.FindBrowserByName("Internet Explorer 7"),
                    repository.FindBrowserByName("Internet Explorer 8"),
                    repository.FindBrowserByName("Internet Explorer 9"),
                    repository.FindBrowserByName("FIREFOX"),
                    repository.FindBrowserByName("CHROME"),
                    repository.FindBrowserByName("SAFARI"),
                },
                LicenceTypeMinimum = repository.FindLicenceTypeMinimumByName(1),
                LicenceTypeMaximum = repository.FindLicenceTypeMaximumByName(99),
                Languages = new List<Language>()
                {
                    repository.FindLanguageByName("ENGLISH")
                },
                SupportTypes = new List<SupportType>()
                {
                    //repository.FindSupportTypeByName("PHONE"),
                    repository.FindSupportTypeByName("ONLINE"),
                    //repository.FindSupportTypeByName("EMAIL")
                },
                SupportHours = repository.FindSupportHoursByName("24"),
                SupportDays = repository.FindSupportDaysByName("7"),
                SupportTerritories = new List<SupportTerritory>()
                {
                    repository.FindSupportTerritoryByName("US"),
                },
                VideoTrainingSupport = false,
                //MaximumMeetingAttendees = 50,
                //MaximumWebinarAttendees = 0,
                CloudApplicationFeatures = new List<CloudApplicationFeature>()
                {
                    repository.FindFeatureByName("NUMBER OF PROJECTS"),
                    repository.FindFeatureByName("FILE STORAGE"),
                    repository.FindFeatureByName("MULTI-USERS PER ACCOUNT"),
                    repository.FindFeatureByName("DOCUMENT SHARING"),
                    repository.FindFeatureByName("SHARED WORKSPACE"),
                    repository.FindFeatureByName("EDITED DOCUMENT TRACKING"),
                    repository.FindFeatureByName("LOCKFILES"),
                    repository.FindFeatureByName("UPDATE & DEADLINE ALERTS"),
                    repository.FindFeatureByName("INTERACTIVE GANTT CHARTS"),
                    repository.FindFeatureByName("BUDGET TRACKING"),
                    //repository.FindFeatureByName("CLIENT INVOICING"),
                    //repository.FindFeatureByName("PROJECT WIKI"),
                    repository.FindFeatureByName("CUSTOMISED REPORTS"),
                    repository.FindFeatureByName("MS PROJECT COMPATIBLE"),
                    repository.FindFeatureByName("SSL SECURITY"),
                    repository.FindFeatureByName("MILITARY GRADE DOCUMENT SECURITY"),
                    repository.FindFeatureByName("GUARANTEED RESTORE"),
                    //repository.FindFeatureByName("OFFLINE MODE"),
                    //repository.FindFeatureByName("3RD PARTY APIS"),
                    //repository.FindFeatureByName("BUG TRACKER"),
                },
                ApplicationCostPerMonth = 29.00M,
                ApplicationCostPerAnnum = 0.00M,
                //CallsPackageCostPerMonth = 0M,
                SetupFee = repository.FindSetupFeeByName("NOT APPLICABLE"),
                MinimumContract = repository.FindMinimumContractByName("12 MONTHS"),
                PaymentFrequency = repository.FindPaymentFrequencyByName("MONTHLY"),
                PaymentOptions = new List<PaymentOption>()
                {
                    repository.FindPaymentOptionByName("CREDIT CARD"),
                    repository.FindPaymentOptionByName("PRE-PAY"),
                },
                FreeTrialPeriod = repository.FindFreeTrialPeriodByName("YES"),
                Category = repository.FindCategoryByName("PROJECT MANAGEMENT"),
                Vendor = repository.FindVendorByName("CollaborateCloud"),
                Description = repository.GetDescription(),
                AddDate = DateTime.Now,
                #region Ratings,Reviews,Case Studies,White Papers
                Ratings = new List<CloudApplicationRating>()
                {
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                },
                Reviews = new List<CloudApplicationReview>()
                {
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                },
                ThumbnailDocuments = new List<ThumbnailDocument>()
                {
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("WHITE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_WHITE_PAPER_FILEPATH+PDF_TEST_WHITE_PAPER_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_WHITE_PAPER_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_WHITE_PAPER_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_WHITE_PAPER_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("WHITE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_WHITE_PAPER_FILEPATH+PDF_TEST_WHITE_PAPER_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_WHITE_PAPER_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_WHITE_PAPER_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_WHITE_PAPER_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("WHITE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_WHITE_PAPER_FILEPATH+PDF_TEST_WHITE_PAPER_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_WHITE_PAPER_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_WHITE_PAPER_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_WHITE_PAPER_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("CASE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_CASE_STUDY_FILEPATH+PDF_TEST_CASE_STUDY_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_CASE_STUDY_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_CASE_STUDY_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_CASE_STUDY_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("CASE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_CASE_STUDY_FILEPATH+PDF_TEST_CASE_STUDY_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_CASE_STUDY_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_CASE_STUDY_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_CASE_STUDY_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("CASE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_CASE_STUDY_FILEPATH+PDF_TEST_CASE_STUDY_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_CASE_STUDY_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_CASE_STUDY_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_CASE_STUDY_FILENAME,
                    },
                },
                #endregion
            };

            repository.AddCloudApplication(ca);

            #endregion

            #region COPPER
            ca = new CloudApplication()
            {
                Brand = "copper",
                ServiceName = "Studio",
                CompanyURL = "www.copperproject.com",
                OperatingSystems = new List<Domain.Models.OperatingSystem>()
                {
                    repository.FindOperatingSystemByName("WIN"),
                    repository.FindOperatingSystemByName("MAC"),
                    //repository.FindOperatingSystemByName("LINUX")
                },
                //MobilePlatforms = repository.GetAllMobilePlatforms(),
                MobilePlatforms = new List<MobilePlatform>()
                {
                    repository.FindMobilePlatformByName("ANDROID"),
                    repository.FindMobilePlatformByName("IPHONE"),
                    repository.FindMobilePlatformByName("BB"),
                    //repository.FindMobilePlatformByName("IPAD")
                },
                Browsers = new List<Browser>()
                {
                    repository.FindBrowserByName("Internet Explorer 6"),
                    repository.FindBrowserByName("Internet Explorer 7"),
                    repository.FindBrowserByName("Internet Explorer 8"),
                    repository.FindBrowserByName("Internet Explorer 9"),
                    repository.FindBrowserByName("FIREFOX"),
                    repository.FindBrowserByName("CHROME"),
                    repository.FindBrowserByName("SAFARI"),
                },
                LicenceTypeMinimum = repository.FindLicenceTypeMinimumByName(1),
                LicenceTypeMaximum = repository.FindLicenceTypeMaximumByName(99),
                Languages = new List<Language>()
                {
                    repository.FindLanguageByName("ENGLISH")
                },
                SupportTypes = new List<SupportType>()
                {
                    //repository.FindSupportTypeByName("PHONE"),
                    repository.FindSupportTypeByName("ONLINE"),
                    //repository.FindSupportTypeByName("EMAIL")
                },
                SupportHours = repository.FindSupportHoursByName("24"),
                SupportDays = repository.FindSupportDaysByName("7"),
                SupportTerritories = new List<SupportTerritory>()
                {
                    repository.FindSupportTerritoryByName("US"),
                },
                VideoTrainingSupport = false,
                //MaximumMeetingAttendees = 50,
                //MaximumWebinarAttendees = 0,
                CloudApplicationFeatures = new List<CloudApplicationFeature>()
                {
                    repository.FindFeatureByName("NUMBER OF PROJECTS"),
                    repository.FindFeatureByName("FILE STORAGE"),
                    repository.FindFeatureByName("MULTI-USERS PER ACCOUNT"),
                    repository.FindFeatureByName("DOCUMENT SHARING"),
                    repository.FindFeatureByName("SHARED WORKSPACE"),
                    repository.FindFeatureByName("EDITED DOCUMENT TRACKING"),
                    repository.FindFeatureByName("LOCKFILES"),
                    repository.FindFeatureByName("UPDATE & DEADLINE ALERTS"),
                    repository.FindFeatureByName("INTERACTIVE GANTT CHARTS"),
                    repository.FindFeatureByName("BUDGET TRACKING"),
                    //repository.FindFeatureByName("CLIENT INVOICING"),
                    //repository.FindFeatureByName("PROJECT WIKI"),
                    repository.FindFeatureByName("CUSTOMISED REPORTS"),
                    repository.FindFeatureByName("MS PROJECT COMPATIBLE"),
                    repository.FindFeatureByName("SSL SECURITY"),
                    repository.FindFeatureByName("MILITARY GRADE DOCUMENT SECURITY"),
                    repository.FindFeatureByName("GUARANTEED RESTORE"),
                    //repository.FindFeatureByName("OFFLINE MODE"),
                    repository.FindFeatureByName("3RD PARTY APIS"),
                    //repository.FindFeatureByName("BUG TRACKER"),
                },
                ApplicationCostPerMonth = 49.00M,
                ApplicationCostPerAnnum = 0.00M,
                //CallsPackageCostPerMonth = 0M,
                SetupFee = repository.FindSetupFeeByName("NOT APPLICABLE"),
                MinimumContract = repository.FindMinimumContractByName("12 MONTHS"),
                PaymentFrequency = repository.FindPaymentFrequencyByName("MONTHLY"),
                PaymentOptions = new List<PaymentOption>()
                {
                    repository.FindPaymentOptionByName("CREDIT CARD"),
                    repository.FindPaymentOptionByName("PRE-PAY"),
                },
                FreeTrialPeriod = repository.FindFreeTrialPeriodByName("YES"),
                Category = repository.FindCategoryByName("PROJECT MANAGEMENT"),
                Vendor = repository.FindVendorByName("copper"),
                Description = repository.GetDescription(),
                AddDate = DateTime.Now,
                #region Ratings,Reviews,Case Studies,White Papers
                Ratings = new List<CloudApplicationRating>()
                {
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                },
                Reviews = new List<CloudApplicationReview>()
                {
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                },
                ThumbnailDocuments = new List<ThumbnailDocument>()
                {
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("WHITE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_WHITE_PAPER_FILEPATH+PDF_TEST_WHITE_PAPER_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_WHITE_PAPER_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_WHITE_PAPER_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_WHITE_PAPER_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("WHITE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_WHITE_PAPER_FILEPATH+PDF_TEST_WHITE_PAPER_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_WHITE_PAPER_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_WHITE_PAPER_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_WHITE_PAPER_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("WHITE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_WHITE_PAPER_FILEPATH+PDF_TEST_WHITE_PAPER_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_WHITE_PAPER_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_WHITE_PAPER_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_WHITE_PAPER_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("CASE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_CASE_STUDY_FILEPATH+PDF_TEST_CASE_STUDY_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_CASE_STUDY_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_CASE_STUDY_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_CASE_STUDY_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("CASE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_CASE_STUDY_FILEPATH+PDF_TEST_CASE_STUDY_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_CASE_STUDY_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_CASE_STUDY_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_CASE_STUDY_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("CASE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_CASE_STUDY_FILEPATH+PDF_TEST_CASE_STUDY_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_CASE_STUDY_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_CASE_STUDY_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_CASE_STUDY_FILENAME,
                    },
                },
                #endregion
            };

            repository.AddCloudApplication(ca);

            #endregion

            #region PROJECTPLACE
            ca = new CloudApplication()
            {
                Brand = "projectplace",
                ServiceName = "Team Edition",
                CompanyURL = "www.projectplace.com",
                OperatingSystems = new List<Domain.Models.OperatingSystem>()
                {
                    repository.FindOperatingSystemByName("WIN"),
                    repository.FindOperatingSystemByName("MAC"),
                    //repository.FindOperatingSystemByName("LINUX")
                },
                //MobilePlatforms = repository.GetAllMobilePlatforms(),
                MobilePlatforms = new List<MobilePlatform>()
                {
                    repository.FindMobilePlatformByName("ANDROID"),
                    repository.FindMobilePlatformByName("IPHONE"),
                    repository.FindMobilePlatformByName("BB"),
                    //repository.FindMobilePlatformByName("IPAD")
                },
                Browsers = new List<Browser>()
                {
                    repository.FindBrowserByName("Internet Explorer 6"),
                    repository.FindBrowserByName("Internet Explorer 7"),
                    repository.FindBrowserByName("Internet Explorer 8"),
                    repository.FindBrowserByName("Internet Explorer 9"),
                    repository.FindBrowserByName("FIREFOX"),
                    repository.FindBrowserByName("CHROME"),
                    repository.FindBrowserByName("SAFARI"),
                },
                LicenceTypeMinimum = repository.FindLicenceTypeMinimumByName(1),
                LicenceTypeMaximum = repository.FindLicenceTypeMaximumByName(99),
                Languages = new List<Language>()
                {
                    repository.FindLanguageByName("ENGLISH")
                },
                SupportTypes = new List<SupportType>()
                {
                    repository.FindSupportTypeByName("PHONE"),
                    repository.FindSupportTypeByName("ONLINE"),
                    //repository.FindSupportTypeByName("EMAIL")
                },
                SupportHours = repository.FindSupportHoursByName("24"),
                SupportDays = repository.FindSupportDaysByName("7"),
                SupportTerritories = new List<SupportTerritory>()
                {
                    repository.FindSupportTerritoryByName("UK"),
                },
                VideoTrainingSupport = false,
                //MaximumMeetingAttendees = 50,
                //MaximumWebinarAttendees = 0,
                CloudApplicationFeatures = new List<CloudApplicationFeature>()
                {
                    repository.FindFeatureByName("NUMBER OF PROJECTS"),
                    repository.FindFeatureByName("FILE STORAGE"),
                    repository.FindFeatureByName("MULTI-USERS PER ACCOUNT"),
                    repository.FindFeatureByName("DOCUMENT SHARING"),
                    repository.FindFeatureByName("SHARED WORKSPACE"),
                    repository.FindFeatureByName("EDITED DOCUMENT TRACKING"),
                    repository.FindFeatureByName("LOCKFILES"),
                    repository.FindFeatureByName("UPDATE & DEADLINE ALERTS"),
                    repository.FindFeatureByName("INTERACTIVE GANTT CHARTS"),
                    repository.FindFeatureByName("BUDGET TRACKING"),
                    //repository.FindFeatureByName("CLIENT INVOICING"),
                    //repository.FindFeatureByName("PROJECT WIKI"),
                    repository.FindFeatureByName("CUSTOMISED REPORTS"),
                    repository.FindFeatureByName("MS PROJECT COMPATIBLE"),
                    repository.FindFeatureByName("SSL SECURITY"),
                    repository.FindFeatureByName("MILITARY GRADE DOCUMENT SECURITY"),
                    repository.FindFeatureByName("GUARANTEED RESTORE"),
                    //repository.FindFeatureByName("OFFLINE MODE"),
                    repository.FindFeatureByName("3RD PARTY APIS"),
                    repository.FindFeatureByName("BUG TRACKER"),
                },
                ApplicationCostPerMonth = 16.00M,
                ApplicationCostPerAnnum = 0.00M,
                //CallsPackageCostPerMonth = 0M,
                SetupFee = repository.FindSetupFeeByName("NOT APPLICABLE"),
                MinimumContract = repository.FindMinimumContractByName("12 MONTHS"),
                PaymentFrequency = repository.FindPaymentFrequencyByName("MONTHLY"),
                PaymentOptions = new List<PaymentOption>()
                {
                    repository.FindPaymentOptionByName("CREDIT CARD"),
                    repository.FindPaymentOptionByName("PRE-PAY"),
                },
                FreeTrialPeriod = repository.FindFreeTrialPeriodByName("YES"),
                Category = repository.FindCategoryByName("PROJECT MANAGEMENT"),
                Vendor = repository.FindVendorByName("projectplace"),
                Description = repository.GetDescription(),
                AddDate = DateTime.Now,
                #region Ratings,Reviews,Case Studies,White Papers
                Ratings = new List<CloudApplicationRating>()
                {
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                },
                Reviews = new List<CloudApplicationReview>()
                {
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                },
                ThumbnailDocuments = new List<ThumbnailDocument>()
                {
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("WHITE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_WHITE_PAPER_FILEPATH+PDF_TEST_WHITE_PAPER_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_WHITE_PAPER_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_WHITE_PAPER_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_WHITE_PAPER_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("WHITE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_WHITE_PAPER_FILEPATH+PDF_TEST_WHITE_PAPER_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_WHITE_PAPER_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_WHITE_PAPER_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_WHITE_PAPER_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("WHITE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_WHITE_PAPER_FILEPATH+PDF_TEST_WHITE_PAPER_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_WHITE_PAPER_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_WHITE_PAPER_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_WHITE_PAPER_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("CASE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_CASE_STUDY_FILEPATH+PDF_TEST_CASE_STUDY_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_CASE_STUDY_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_CASE_STUDY_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_CASE_STUDY_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("CASE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_CASE_STUDY_FILEPATH+PDF_TEST_CASE_STUDY_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_CASE_STUDY_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_CASE_STUDY_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_CASE_STUDY_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("CASE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_CASE_STUDY_FILEPATH+PDF_TEST_CASE_STUDY_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_CASE_STUDY_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_CASE_STUDY_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_CASE_STUDY_FILENAME,
                    },
                },
                #endregion
            };

            repository.AddCloudApplication(ca);

            #endregion

            #region BASECAMP
            ca = new CloudApplication()
            {
                Brand = "Basecamp",
                ServiceName = "Plus",
                CompanyURL = "www.basecamphg.com",
                OperatingSystems = new List<Domain.Models.OperatingSystem>()
                {
                    repository.FindOperatingSystemByName("WIN"),
                    repository.FindOperatingSystemByName("MAC"),
                    //repository.FindOperatingSystemByName("LINUX")
                },
                //MobilePlatforms = repository.GetAllMobilePlatforms(),
                MobilePlatforms = new List<MobilePlatform>()
                {
                    repository.FindMobilePlatformByName("ANDROID"),
                    repository.FindMobilePlatformByName("IPHONE"),
                    repository.FindMobilePlatformByName("BB"),
                    //repository.FindMobilePlatformByName("IPAD")
                },
                Browsers = new List<Browser>()
                {
                    repository.FindBrowserByName("Internet Explorer 6"),
                    repository.FindBrowserByName("Internet Explorer 7"),
                    repository.FindBrowserByName("Internet Explorer 8"),
                    repository.FindBrowserByName("Internet Explorer 9"),
                    repository.FindBrowserByName("FIREFOX"),
                    repository.FindBrowserByName("CHROME"),
                    repository.FindBrowserByName("SAFARI"),
                },
                LicenceTypeMinimum = repository.FindLicenceTypeMinimumByName(1),
                LicenceTypeMaximum = repository.FindLicenceTypeMaximumByName(99),
                Languages = new List<Language>()
                {
                    repository.FindLanguageByName("ENGLISH")
                },
                SupportTypes = new List<SupportType>()
                {
                    //repository.FindSupportTypeByName("PHONE"),
                    repository.FindSupportTypeByName("ONLINE"),
                    //repository.FindSupportTypeByName("EMAIL")
                },
                SupportHours = repository.FindSupportHoursByName("24"),
                SupportDays = repository.FindSupportDaysByName("7"),
                SupportTerritories = new List<SupportTerritory>()
                {
                    repository.FindSupportTerritoryByName("US"),
                },
                VideoTrainingSupport = false,
                //MaximumMeetingAttendees = 50,
                //MaximumWebinarAttendees = 0,
                CloudApplicationFeatures = new List<CloudApplicationFeature>()
                {
                    repository.FindFeatureByName("NUMBER OF PROJECTS"),
                    repository.FindFeatureByName("FILE STORAGE"),
                    repository.FindFeatureByName("MULTI-USERS PER ACCOUNT"),
                    repository.FindFeatureByName("DOCUMENT SHARING"),
                    repository.FindFeatureByName("SHARED WORKSPACE"),
                    repository.FindFeatureByName("EDITED DOCUMENT TRACKING"),
                    repository.FindFeatureByName("LOCKFILES"),
                    repository.FindFeatureByName("UPDATE & DEADLINE ALERTS"),
                    repository.FindFeatureByName("INTERACTIVE GANTT CHARTS"),
                    repository.FindFeatureByName("BUDGET TRACKING"),
                    //repository.FindFeatureByName("CLIENT INVOICING"),
                    //repository.FindFeatureByName("PROJECT WIKI"),
                    repository.FindFeatureByName("CUSTOMISED REPORTS"),
                    repository.FindFeatureByName("MS PROJECT COMPATIBLE"),
                    repository.FindFeatureByName("SSL SECURITY"),
                    repository.FindFeatureByName("MILITARY GRADE DOCUMENT SECURITY"),
                    repository.FindFeatureByName("GUARANTEED RESTORE"),
                    //repository.FindFeatureByName("OFFLINE MODE"),
                    repository.FindFeatureByName("3RD PARTY APIS"),
                    repository.FindFeatureByName("BUG TRACKER"),
                },
                ApplicationCostPerMonth = 49.00M,
                ApplicationCostPerAnnum = 0.00M,
                //CallsPackageCostPerMonth = 0M,
                SetupFee = repository.FindSetupFeeByName("NOT APPLICABLE"),
                MinimumContract = repository.FindMinimumContractByName("12 MONTHS"),
                PaymentFrequency = repository.FindPaymentFrequencyByName("MONTHLY"),
                PaymentOptions = new List<PaymentOption>()
                {
                    repository.FindPaymentOptionByName("CREDIT CARD"),
                    repository.FindPaymentOptionByName("PRE-PAY"),
                },
                FreeTrialPeriod = repository.FindFreeTrialPeriodByName("YES"),
                Category = repository.FindCategoryByName("PROJECT MANAGEMENT"),
                Vendor = repository.FindVendorByName("Basecamp"),
                Description = repository.GetDescription(),
                AddDate = DateTime.Now,
                #region Ratings,Reviews,Case Studies,White Papers
                Ratings = new List<CloudApplicationRating>()
                {
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                },
                Reviews = new List<CloudApplicationReview>()
                {
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                },
                ThumbnailDocuments = new List<ThumbnailDocument>()
                {
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("WHITE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_WHITE_PAPER_FILEPATH+PDF_TEST_WHITE_PAPER_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_WHITE_PAPER_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_WHITE_PAPER_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_WHITE_PAPER_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("WHITE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_WHITE_PAPER_FILEPATH+PDF_TEST_WHITE_PAPER_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_WHITE_PAPER_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_WHITE_PAPER_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_WHITE_PAPER_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("WHITE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_WHITE_PAPER_FILEPATH+PDF_TEST_WHITE_PAPER_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_WHITE_PAPER_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_WHITE_PAPER_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_WHITE_PAPER_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("CASE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_CASE_STUDY_FILEPATH+PDF_TEST_CASE_STUDY_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_CASE_STUDY_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_CASE_STUDY_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_CASE_STUDY_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("CASE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_CASE_STUDY_FILEPATH+PDF_TEST_CASE_STUDY_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_CASE_STUDY_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_CASE_STUDY_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_CASE_STUDY_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("CASE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_CASE_STUDY_FILEPATH+PDF_TEST_CASE_STUDY_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_CASE_STUDY_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_CASE_STUDY_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_CASE_STUDY_FILENAME,
                    },
                },
                #endregion
            };

            repository.AddCloudApplication(ca);

            #endregion

            #region TRAFFICLIVE
            ca = new CloudApplication()
            {
                Brand = "trafficLIVE",
                ServiceName = "Project",
                CompanyURL = "www.trafficlive.com",
                OperatingSystems = new List<Domain.Models.OperatingSystem>()
                {
                    repository.FindOperatingSystemByName("WIN"),
                    repository.FindOperatingSystemByName("MAC"),
                    //repository.FindOperatingSystemByName("LINUX")
                },
                //MobilePlatforms = repository.GetAllMobilePlatforms(),
                MobilePlatforms = new List<MobilePlatform>()
                {
                    repository.FindMobilePlatformByName("ANDROID"),
                    repository.FindMobilePlatformByName("IPHONE"),
                    repository.FindMobilePlatformByName("BB"),
                    //repository.FindMobilePlatformByName("IPAD")
                },
                Browsers = new List<Browser>()
                {
                    repository.FindBrowserByName("Internet Explorer 6"),
                    repository.FindBrowserByName("Internet Explorer 7"),
                    repository.FindBrowserByName("Internet Explorer 8"),
                    repository.FindBrowserByName("Internet Explorer 9"),
                    repository.FindBrowserByName("FIREFOX"),
                    repository.FindBrowserByName("CHROME"),
                    repository.FindBrowserByName("SAFARI"),
                },
                LicenceTypeMinimum = repository.FindLicenceTypeMinimumByName(1),
                LicenceTypeMaximum = repository.FindLicenceTypeMaximumByName(99),
                Languages = new List<Language>()
                {
                    repository.FindLanguageByName("ENGLISH")
                },
                SupportTypes = new List<SupportType>()
                {
                    repository.FindSupportTypeByName("FREEPHONE"),
                    repository.FindSupportTypeByName("ONLINE"),
                    //repository.FindSupportTypeByName("EMAIL")
                },
                SupportHours = repository.FindSupportHoursByName("24"),
                SupportDays = repository.FindSupportDaysByName("7"),
                SupportTerritories = new List<SupportTerritory>()
                {
                    repository.FindSupportTerritoryByName("UK"),
                },
                VideoTrainingSupport = true,
                //MaximumMeetingAttendees = 50,
                //MaximumWebinarAttendees = 0,
                CloudApplicationFeatures = new List<CloudApplicationFeature>()
                {
                    repository.FindFeatureByName("NUMBER OF PROJECTS"),
                    repository.FindFeatureByName("FILE STORAGE"),
                    repository.FindFeatureByName("MULTI-USERS PER ACCOUNT"),
                    repository.FindFeatureByName("DOCUMENT SHARING"),
                    repository.FindFeatureByName("SHARED WORKSPACE"),
                    repository.FindFeatureByName("EDITED DOCUMENT TRACKING"),
                    repository.FindFeatureByName("LOCKFILES"),
                    repository.FindFeatureByName("UPDATE & DEADLINE ALERTS"),
                    repository.FindFeatureByName("INTERACTIVE GANTT CHARTS"),
                    repository.FindFeatureByName("BUDGET TRACKING"),
                    repository.FindFeatureByName("CLIENT INVOICING"),
                    repository.FindFeatureByName("PROJECT WIKI"),
                    repository.FindFeatureByName("CUSTOMISED REPORTS"),
                    repository.FindFeatureByName("MS PROJECT COMPATIBLE"),
                    repository.FindFeatureByName("SSL SECURITY"),
                    repository.FindFeatureByName("MILITARY GRADE DOCUMENT SECURITY"),
                    repository.FindFeatureByName("GUARANTEED RESTORE"),
                    repository.FindFeatureByName("OFFLINE MODE"),
                    //repository.FindFeatureByName("3RD PARTY APIS"),
                    repository.FindFeatureByName("BUG TRACKER"),
                },
                ApplicationCostPerMonth = 37.00M,
                ApplicationCostPerAnnum = 348.00M,
                //CallsPackageCostPerMonth = 0M,
                SetupFee = repository.FindSetupFeeByName("NOT APPLICABLE"),
                MinimumContract = repository.FindMinimumContractByName("12 MONTHS"),
                PaymentFrequency = repository.FindPaymentFrequencyByName("MONTHLY"),
                PaymentOptions = new List<PaymentOption>()
                {
                    repository.FindPaymentOptionByName("CREDIT CARD"),
                    repository.FindPaymentOptionByName("PRE-PAY"),
                },
                FreeTrialPeriod = repository.FindFreeTrialPeriodByName("YES"),
                Category = repository.FindCategoryByName("PROJECT MANAGEMENT"),
                Vendor = repository.FindVendorByName("trafficLIVE"),
                Description = repository.GetDescription(),
                AddDate = DateTime.Now,
                #region Ratings,Reviews,Case Studies,White Papers
                Ratings = new List<CloudApplicationRating>()
                {
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                },
                Reviews = new List<CloudApplicationReview>()
                {
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                },
                ThumbnailDocuments = new List<ThumbnailDocument>()
                {
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("WHITE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_WHITE_PAPER_FILEPATH+PDF_TEST_WHITE_PAPER_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_WHITE_PAPER_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_WHITE_PAPER_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_WHITE_PAPER_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("WHITE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_WHITE_PAPER_FILEPATH+PDF_TEST_WHITE_PAPER_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_WHITE_PAPER_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_WHITE_PAPER_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_WHITE_PAPER_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("WHITE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_WHITE_PAPER_FILEPATH+PDF_TEST_WHITE_PAPER_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_WHITE_PAPER_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_WHITE_PAPER_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_WHITE_PAPER_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("CASE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_CASE_STUDY_FILEPATH+PDF_TEST_CASE_STUDY_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_CASE_STUDY_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_CASE_STUDY_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_CASE_STUDY_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("CASE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_CASE_STUDY_FILEPATH+PDF_TEST_CASE_STUDY_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_CASE_STUDY_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_CASE_STUDY_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_CASE_STUDY_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("CASE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_CASE_STUDY_FILEPATH+PDF_TEST_CASE_STUDY_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_CASE_STUDY_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_CASE_STUDY_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_CASE_STUDY_FILENAME,
                    },
                },
                #endregion
            };

            repository.AddCloudApplication(ca);

            #endregion

            #region IMANAGEPROJECT
            ca = new CloudApplication()
            {
                Brand = "iManageProject",
                ServiceName = "Premium",
                CompanyURL = "www.imanageproject.com",
                OperatingSystems = new List<Domain.Models.OperatingSystem>()
                {
                    repository.FindOperatingSystemByName("WIN"),
                    repository.FindOperatingSystemByName("MAC"),
                    //repository.FindOperatingSystemByName("LINUX")
                },
                //MobilePlatforms = repository.GetAllMobilePlatforms(),
                MobilePlatforms = new List<MobilePlatform>()
                {
                    repository.FindMobilePlatformByName("ANDROID"),
                    repository.FindMobilePlatformByName("IPHONE"),
                    repository.FindMobilePlatformByName("BB"),
                    //repository.FindMobilePlatformByName("IPAD")
                },
                Browsers = new List<Browser>()
                {
                    repository.FindBrowserByName("Internet Explorer 6"),
                    repository.FindBrowserByName("Internet Explorer 7"),
                    repository.FindBrowserByName("Internet Explorer 8"),
                    repository.FindBrowserByName("Internet Explorer 9"),
                    repository.FindBrowserByName("FIREFOX"),
                    repository.FindBrowserByName("CHROME"),
                    repository.FindBrowserByName("SAFARI"),
                },
                LicenceTypeMinimum = repository.FindLicenceTypeMinimumByName(1),
                LicenceTypeMaximum = repository.FindLicenceTypeMaximumByName(99),
                Languages = new List<Language>()
                {
                    repository.FindLanguageByName("ENGLISH")
                },
                SupportTypes = new List<SupportType>()
                {
                    //repository.FindSupportTypeByName("PHONE"),
                    repository.FindSupportTypeByName("ONLINE"),
                    //repository.FindSupportTypeByName("EMAIL")
                },
                SupportHours = repository.FindSupportHoursByName("24"),
                SupportDays = repository.FindSupportDaysByName("7"),
                SupportTerritories = new List<SupportTerritory>()
                {
                    repository.FindSupportTerritoryByName("US"),
                },
                VideoTrainingSupport = false,
                //MaximumMeetingAttendees = 50,
                //MaximumWebinarAttendees = 0,
                CloudApplicationFeatures = new List<CloudApplicationFeature>()
                {
                    repository.FindFeatureByName("NUMBER OF PROJECTS"),
                    repository.FindFeatureByName("FILE STORAGE"),
                    repository.FindFeatureByName("MULTI-USERS PER ACCOUNT"),
                    repository.FindFeatureByName("DOCUMENT SHARING"),
                    repository.FindFeatureByName("SHARED WORKSPACE"),
                    repository.FindFeatureByName("EDITED DOCUMENT TRACKING"),
                    repository.FindFeatureByName("LOCKFILES"),
                    repository.FindFeatureByName("UPDATE & DEADLINE ALERTS"),
                    repository.FindFeatureByName("INTERACTIVE GANTT CHARTS"),
                    repository.FindFeatureByName("BUDGET TRACKING"),
                    //repository.FindFeatureByName("CLIENT INVOICING"),
                    //repository.FindFeatureByName("PROJECT WIKI"),
                    repository.FindFeatureByName("CUSTOMISED REPORTS"),
                    repository.FindFeatureByName("MS PROJECT COMPATIBLE"),
                    repository.FindFeatureByName("SSL SECURITY"),
                    repository.FindFeatureByName("MILITARY GRADE DOCUMENT SECURITY"),
                    repository.FindFeatureByName("GUARANTEED RESTORE"),
                    //repository.FindFeatureByName("OFFLINE MODE"),
                    repository.FindFeatureByName("3RD PARTY APIS"),
                    repository.FindFeatureByName("BUG TRACKER"),
                },
                ApplicationCostPerMonth = 20.00M,
                ApplicationCostPerAnnum = 0.00M,
                //CallsPackageCostPerMonth = 0M,
                SetupFee = repository.FindSetupFeeByName("NOT APPLICABLE"),
                MinimumContract = repository.FindMinimumContractByName("12 MONTHS"),
                PaymentFrequency = repository.FindPaymentFrequencyByName("MONTHLY"),
                PaymentOptions = new List<PaymentOption>()
                {
                    repository.FindPaymentOptionByName("CREDIT CARD"),
                    repository.FindPaymentOptionByName("PRE-PAY"),
                },
                FreeTrialPeriod = repository.FindFreeTrialPeriodByName("YES"),
                Category = repository.FindCategoryByName("PROJECT MANAGEMENT"),
                Vendor = repository.FindVendorByName("iManageProject"),
                Description = repository.GetDescription(),
                AddDate = DateTime.Now,
                #region Ratings,Reviews,Case Studies,White Papers
                Ratings = new List<CloudApplicationRating>()
                {
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                },
                Reviews = new List<CloudApplicationReview>()
                {
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                },
                ThumbnailDocuments = new List<ThumbnailDocument>()
                {
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("WHITE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_WHITE_PAPER_FILEPATH+PDF_TEST_WHITE_PAPER_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_WHITE_PAPER_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_WHITE_PAPER_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_WHITE_PAPER_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("WHITE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_WHITE_PAPER_FILEPATH+PDF_TEST_WHITE_PAPER_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_WHITE_PAPER_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_WHITE_PAPER_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_WHITE_PAPER_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("WHITE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_WHITE_PAPER_FILEPATH+PDF_TEST_WHITE_PAPER_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_WHITE_PAPER_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_WHITE_PAPER_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_WHITE_PAPER_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("CASE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_CASE_STUDY_FILEPATH+PDF_TEST_CASE_STUDY_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_CASE_STUDY_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_CASE_STUDY_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_CASE_STUDY_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("CASE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_CASE_STUDY_FILEPATH+PDF_TEST_CASE_STUDY_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_CASE_STUDY_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_CASE_STUDY_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_CASE_STUDY_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("CASE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_CASE_STUDY_FILEPATH+PDF_TEST_CASE_STUDY_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_CASE_STUDY_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_CASE_STUDY_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_CASE_STUDY_FILENAME,
                    },
                },
                #endregion
            };

            repository.AddCloudApplication(ca);

            #endregion

            #region MYINTERVALS
            ca = new CloudApplication()
            {
                Brand = "intervals",
                ServiceName = "Basic",
                CompanyURL = "www.myintervals.com",
                OperatingSystems = new List<Domain.Models.OperatingSystem>()
                {
                    repository.FindOperatingSystemByName("WIN"),
                    repository.FindOperatingSystemByName("MAC"),
                    //repository.FindOperatingSystemByName("LINUX")
                },
                //MobilePlatforms = repository.GetAllMobilePlatforms(),
                MobilePlatforms = new List<MobilePlatform>()
                {
                    repository.FindMobilePlatformByName("ANDROID"),
                    repository.FindMobilePlatformByName("IPHONE"),
                    repository.FindMobilePlatformByName("BB"),
                    //repository.FindMobilePlatformByName("IPAD")
                },
                Browsers = new List<Browser>()
                {
                    repository.FindBrowserByName("Internet Explorer 6"),
                    repository.FindBrowserByName("Internet Explorer 7"),
                    repository.FindBrowserByName("Internet Explorer 8"),
                    repository.FindBrowserByName("Internet Explorer 9"),
                    repository.FindBrowserByName("FIREFOX"),
                    repository.FindBrowserByName("CHROME"),
                    repository.FindBrowserByName("SAFARI"),
                },
                LicenceTypeMinimum = repository.FindLicenceTypeMinimumByName(1),
                LicenceTypeMaximum = repository.FindLicenceTypeMaximumByName(99),
                Languages = new List<Language>()
                {
                    repository.FindLanguageByName("ENGLISH")
                },
                SupportTypes = new List<SupportType>()
                {
                    //repository.FindSupportTypeByName("PHONE"),
                    repository.FindSupportTypeByName("ONLINE"),
                    //repository.FindSupportTypeByName("EMAIL")
                },
                SupportHours = repository.FindSupportHoursByName("24"),
                SupportDays = repository.FindSupportDaysByName("7"),
                SupportTerritories = new List<SupportTerritory>()
                {
                    repository.FindSupportTerritoryByName("US"),
                },
                VideoTrainingSupport = false,
                //MaximumMeetingAttendees = 50,
                //MaximumWebinarAttendees = 0,
                CloudApplicationFeatures = new List<CloudApplicationFeature>()
                {
                    repository.FindFeatureByName("NUMBER OF PROJECTS"),
                    repository.FindFeatureByName("FILE STORAGE"),
                    repository.FindFeatureByName("MULTI-USERS PER ACCOUNT"),
                    repository.FindFeatureByName("DOCUMENT SHARING"),
                    repository.FindFeatureByName("SHARED WORKSPACE"),
                    repository.FindFeatureByName("EDITED DOCUMENT TRACKING"),
                    repository.FindFeatureByName("LOCKFILES"),
                    repository.FindFeatureByName("UPDATE & DEADLINE ALERTS"),
                    repository.FindFeatureByName("INTERACTIVE GANTT CHARTS"),
                    repository.FindFeatureByName("BUDGET TRACKING"),
                    repository.FindFeatureByName("CLIENT INVOICING"),
                    repository.FindFeatureByName("PROJECT WIKI"),
                    repository.FindFeatureByName("CUSTOMISED REPORTS"),
                    repository.FindFeatureByName("MS PROJECT COMPATIBLE"),
                    repository.FindFeatureByName("SSL SECURITY"),
                    repository.FindFeatureByName("MILITARY GRADE DOCUMENT SECURITY"),
                    repository.FindFeatureByName("GUARANTEED RESTORE"),
                    repository.FindFeatureByName("OFFLINE MODE"),
                    //repository.FindFeatureByName("3RD PARTY APIS"),
                    repository.FindFeatureByName("BUG TRACKER"),
                },
                ApplicationCostPerMonth = 20.00M,
                ApplicationCostPerAnnum = 0.00M,
                //CallsPackageCostPerMonth = 0M,
                SetupFee = repository.FindSetupFeeByName("NOT APPLICABLE"),
                MinimumContract = repository.FindMinimumContractByName("12 MONTHS"),
                PaymentFrequency = repository.FindPaymentFrequencyByName("MONTHLY"),
                PaymentOptions = new List<PaymentOption>()
                {
                    repository.FindPaymentOptionByName("CREDIT CARD"),
                    repository.FindPaymentOptionByName("PRE-PAY"),
                },
                FreeTrialPeriod = repository.FindFreeTrialPeriodByName("YES"),
                Category = repository.FindCategoryByName("PROJECT MANAGEMENT"),
                Vendor = repository.FindVendorByName("intervals"),
                Description = repository.GetDescription(),
                AddDate = DateTime.Now,
                #region Ratings,Reviews,Case Studies,White Papers
                Ratings = new List<CloudApplicationRating>()
                {
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                },
                Reviews = new List<CloudApplicationReview>()
                {
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                },
                ThumbnailDocuments = new List<ThumbnailDocument>()
                {
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("WHITE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_WHITE_PAPER_FILEPATH+PDF_TEST_WHITE_PAPER_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_WHITE_PAPER_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_WHITE_PAPER_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_WHITE_PAPER_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("WHITE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_WHITE_PAPER_FILEPATH+PDF_TEST_WHITE_PAPER_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_WHITE_PAPER_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_WHITE_PAPER_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_WHITE_PAPER_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("WHITE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_WHITE_PAPER_FILEPATH+PDF_TEST_WHITE_PAPER_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_WHITE_PAPER_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_WHITE_PAPER_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_WHITE_PAPER_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("CASE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_CASE_STUDY_FILEPATH+PDF_TEST_CASE_STUDY_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_CASE_STUDY_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_CASE_STUDY_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_CASE_STUDY_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("CASE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_CASE_STUDY_FILEPATH+PDF_TEST_CASE_STUDY_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_CASE_STUDY_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_CASE_STUDY_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_CASE_STUDY_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("CASE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_CASE_STUDY_FILEPATH+PDF_TEST_CASE_STUDY_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_CASE_STUDY_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_CASE_STUDY_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_CASE_STUDY_FILENAME,
                    },
                },
                #endregion
            };

            repository.AddCloudApplication(ca);

            #endregion

            #region GENIUSPROJECT
            ca = new CloudApplication()
            {
                Brand = "Geniusproject",
                ServiceName = "On-demand PPM",
                CompanyURL = "www.geniusinside.com",
                OperatingSystems = new List<Domain.Models.OperatingSystem>()
                {
                    repository.FindOperatingSystemByName("WIN"),
                    repository.FindOperatingSystemByName("MAC"),
                    //repository.FindOperatingSystemByName("LINUX")
                },
                //MobilePlatforms = repository.GetAllMobilePlatforms(),
                MobilePlatforms = new List<MobilePlatform>()
                {
                    repository.FindMobilePlatformByName("ANDROID"),
                    repository.FindMobilePlatformByName("IPHONE"),
                    repository.FindMobilePlatformByName("BB"),
                    //repository.FindMobilePlatformByName("IPAD")
                },
                Browsers = new List<Browser>()
                {
                    repository.FindBrowserByName("Internet Explorer 6"),
                    repository.FindBrowserByName("Internet Explorer 7"),
                    repository.FindBrowserByName("Internet Explorer 8"),
                    repository.FindBrowserByName("Internet Explorer 9"),
                    repository.FindBrowserByName("FIREFOX"),
                    repository.FindBrowserByName("CHROME"),
                    repository.FindBrowserByName("SAFARI"),
                },
                LicenceTypeMinimum = repository.FindLicenceTypeMinimumByName(1),
                LicenceTypeMaximum = repository.FindLicenceTypeMaximumByName(99),
                Languages = new List<Language>()
                {
                    repository.FindLanguageByName("ENGLISH")
                },
                SupportTypes = new List<SupportType>()
                {
                    //repository.FindSupportTypeByName("PHONE"),
                    repository.FindSupportTypeByName("ONLINE"),
                    //repository.FindSupportTypeByName("EMAIL")
                },
                SupportHours = repository.FindSupportHoursByName("24"),
                SupportDays = repository.FindSupportDaysByName("7"),
                SupportTerritories = new List<SupportTerritory>()
                {
                    repository.FindSupportTerritoryByName("US"),
                },
                VideoTrainingSupport = false,
                //MaximumMeetingAttendees = 50,
                //MaximumWebinarAttendees = 0,
                CloudApplicationFeatures = new List<CloudApplicationFeature>()
                {
                    repository.FindFeatureByName("NUMBER OF PROJECTS"),
                    repository.FindFeatureByName("FILE STORAGE"),
                    repository.FindFeatureByName("MULTI-USERS PER ACCOUNT"),
                    repository.FindFeatureByName("DOCUMENT SHARING"),
                    repository.FindFeatureByName("SHARED WORKSPACE"),
                    repository.FindFeatureByName("EDITED DOCUMENT TRACKING"),
                    repository.FindFeatureByName("LOCKFILES"),
                    repository.FindFeatureByName("UPDATE & DEADLINE ALERTS"),
                    repository.FindFeatureByName("INTERACTIVE GANTT CHARTS"),
                    repository.FindFeatureByName("BUDGET TRACKING"),
                    //repository.FindFeatureByName("CLIENT INVOICING"),
                    //repository.FindFeatureByName("PROJECT WIKI"),
                    repository.FindFeatureByName("CUSTOMISED REPORTS"),
                    repository.FindFeatureByName("MS PROJECT COMPATIBLE"),
                    repository.FindFeatureByName("SSL SECURITY"),
                    repository.FindFeatureByName("MILITARY GRADE DOCUMENT SECURITY"),
                    repository.FindFeatureByName("GUARANTEED RESTORE"),
                    repository.FindFeatureByName("OFFLINE MODE"),
                    repository.FindFeatureByName("3RD PARTY APIS"),
                    repository.FindFeatureByName("BUG TRACKER"),
                },
                ApplicationCostPerMonth = 29.00M,
                ApplicationCostPerAnnum = 0.00M,
                //CallsPackageCostPerMonth = 0M,
                SetupFee = repository.FindSetupFeeByName("NOT APPLICABLE"),
                MinimumContract = repository.FindMinimumContractByName("12 MONTHS"),
                PaymentFrequency = repository.FindPaymentFrequencyByName("MONTHLY"),
                PaymentOptions = new List<PaymentOption>()
                {
                    repository.FindPaymentOptionByName("CREDIT CARD"),
                    repository.FindPaymentOptionByName("PRE-PAY"),
                },
                FreeTrialPeriod = repository.FindFreeTrialPeriodByName("YES"),
                Category = repository.FindCategoryByName("PROJECT MANAGEMENT"),
                Vendor = repository.FindVendorByName("Geniusproject"),
                Description = repository.GetDescription(),
                AddDate = DateTime.Now,
                #region Ratings,Reviews,Case Studies,White Papers
                Ratings = new List<CloudApplicationRating>()
                {
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                },
                Reviews = new List<CloudApplicationReview>()
                {
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                },
                ThumbnailDocuments = new List<ThumbnailDocument>()
                {
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("WHITE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_WHITE_PAPER_FILEPATH+PDF_TEST_WHITE_PAPER_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_WHITE_PAPER_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_WHITE_PAPER_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_WHITE_PAPER_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("WHITE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_WHITE_PAPER_FILEPATH+PDF_TEST_WHITE_PAPER_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_WHITE_PAPER_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_WHITE_PAPER_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_WHITE_PAPER_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("WHITE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_WHITE_PAPER_FILEPATH+PDF_TEST_WHITE_PAPER_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_WHITE_PAPER_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_WHITE_PAPER_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_WHITE_PAPER_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("CASE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_CASE_STUDY_FILEPATH+PDF_TEST_CASE_STUDY_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_CASE_STUDY_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_CASE_STUDY_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_CASE_STUDY_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("CASE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_CASE_STUDY_FILEPATH+PDF_TEST_CASE_STUDY_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_CASE_STUDY_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_CASE_STUDY_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_CASE_STUDY_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("CASE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_CASE_STUDY_FILEPATH+PDF_TEST_CASE_STUDY_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_CASE_STUDY_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_CASE_STUDY_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_CASE_STUDY_FILENAME,
                    },
                },
                #endregion
            };

            repository.AddCloudApplication(ca);

            #endregion

            #region GLASSCUBES
            ca = new CloudApplication()
            {
                Brand = "glasscubes",
                ServiceName = "Standard",
                CompanyURL = "www.glasscubes.com",
                OperatingSystems = new List<Domain.Models.OperatingSystem>()
                {
                    repository.FindOperatingSystemByName("WIN"),
                    //repository.FindOperatingSystemByName("MAC"),
                    //repository.FindOperatingSystemByName("LINUX")
                },
                //MobilePlatforms = repository.GetAllMobilePlatforms(),
                //MobilePlatforms = new List<MobilePlatform>()
                //{
                //    repository.FindMobilePlatformByName("ANDROID"),
                //    repository.FindMobilePlatformByName("IPHONE"),
                //    repository.FindMobilePlatformByName("BB"),
                //    //repository.FindMobilePlatformByName("IPAD")
                //},
                Browsers = new List<Browser>()
                {
                    repository.FindBrowserByName("Internet Explorer 6"),
                    repository.FindBrowserByName("Internet Explorer 7"),
                    repository.FindBrowserByName("Internet Explorer 8"),
                    repository.FindBrowserByName("Internet Explorer 9"),
                    repository.FindBrowserByName("FIREFOX"),
                    //repository.FindBrowserByName("CHROME"),
                    //repository.FindBrowserByName("SAFARI"),
                },
                LicenceTypeMinimum = repository.FindLicenceTypeMinimumByName(1),
                LicenceTypeMaximum = repository.FindLicenceTypeMaximumByName(99),
                Languages = new List<Language>()
                {
                    repository.FindLanguageByName("ENGLISH")
                },
                SupportTypes = new List<SupportType>()
                {
                    repository.FindSupportTypeByName("FAQ"),
                    repository.FindSupportTypeByName("TROUBLESHOOT"),
                    //repository.FindSupportTypeByName("EMAIL")
                },
                SupportHours = repository.FindSupportHoursByName("24"),
                SupportDays = repository.FindSupportDaysByName("7"),
                SupportTerritories = new List<SupportTerritory>()
                {
                    repository.FindSupportTerritoryByName("UK"),
                },
                VideoTrainingSupport = false,
                //MaximumMeetingAttendees = 50,
                //MaximumWebinarAttendees = 0,
                CloudApplicationFeatures = new List<CloudApplicationFeature>()
                {
                    repository.FindFeatureByName("NUMBER OF PROJECTS"),
                    repository.FindFeatureByName("FILE STORAGE"),
                    repository.FindFeatureByName("MULTI-USERS PER ACCOUNT"),
                    repository.FindFeatureByName("DOCUMENT SHARING"),
                    repository.FindFeatureByName("SHARED WORKSPACE"),
                    repository.FindFeatureByName("EDITED DOCUMENT TRACKING"),
                    repository.FindFeatureByName("LOCKFILES"),
                    repository.FindFeatureByName("UPDATE & DEADLINE ALERTS"),
                    repository.FindFeatureByName("INTERACTIVE GANTT CHARTS"),
                    repository.FindFeatureByName("BUDGET TRACKING"),
                    //repository.FindFeatureByName("CLIENT INVOICING"),
                    //repository.FindFeatureByName("PROJECT WIKI"),
                    repository.FindFeatureByName("CUSTOMISED REPORTS"),
                    repository.FindFeatureByName("MS PROJECT COMPATIBLE"),
                    repository.FindFeatureByName("SSL SECURITY"),
                    repository.FindFeatureByName("MILITARY GRADE DOCUMENT SECURITY"),
                    repository.FindFeatureByName("GUARANTEED RESTORE"),
                    repository.FindFeatureByName("OFFLINE MODE"),
                    repository.FindFeatureByName("3RD PARTY APIS"),
                    //repository.FindFeatureByName("BUG TRACKER"),
                },
                ApplicationCostPerMonth = 30.00M,
                ApplicationCostPerAnnum = 0.00M,
                //CallsPackageCostPerMonth = 0M,
                SetupFee = repository.FindSetupFeeByName("NOT APPLICABLE"),
                MinimumContract = repository.FindMinimumContractByName("12 MONTHS"),
                PaymentFrequency = repository.FindPaymentFrequencyByName("MONTHLY"),
                PaymentOptions = new List<PaymentOption>()
                {
                    repository.FindPaymentOptionByName("CREDIT CARD"),
                    repository.FindPaymentOptionByName("PRE-PAY"),
                },
                FreeTrialPeriod = repository.FindFreeTrialPeriodByName("YES"),
                Category = repository.FindCategoryByName("PROJECT MANAGEMENT"),
                Vendor = repository.FindVendorByName("glasscubes"),
                Description = repository.GetDescription(),
                AddDate = DateTime.Now,
                #region Ratings,Reviews,Case Studies,White Papers
                Ratings = new List<CloudApplicationRating>()
                {
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                },
                Reviews = new List<CloudApplicationReview>()
                {
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                },
                ThumbnailDocuments = new List<ThumbnailDocument>()
                {
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("WHITE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_WHITE_PAPER_FILEPATH+PDF_TEST_WHITE_PAPER_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_WHITE_PAPER_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_WHITE_PAPER_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_WHITE_PAPER_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("WHITE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_WHITE_PAPER_FILEPATH+PDF_TEST_WHITE_PAPER_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_WHITE_PAPER_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_WHITE_PAPER_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_WHITE_PAPER_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("WHITE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_WHITE_PAPER_FILEPATH+PDF_TEST_WHITE_PAPER_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_WHITE_PAPER_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_WHITE_PAPER_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_WHITE_PAPER_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("CASE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_CASE_STUDY_FILEPATH+PDF_TEST_CASE_STUDY_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_CASE_STUDY_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_CASE_STUDY_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_CASE_STUDY_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("CASE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_CASE_STUDY_FILEPATH+PDF_TEST_CASE_STUDY_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_CASE_STUDY_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_CASE_STUDY_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_CASE_STUDY_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("CASE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_CASE_STUDY_FILEPATH+PDF_TEST_CASE_STUDY_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_CASE_STUDY_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_CASE_STUDY_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_CASE_STUDY_FILENAME,
                    },
                },
                #endregion
            };

            repository.AddCloudApplication(ca);

            #endregion

            #endregion

            #region FINANCIAL

            #region XERO
            ca = new CloudApplication()
            {
                Brand = "xero",
                ServiceName = "Medium",
                CompanyURL = "www.xero.com",
                OperatingSystems = new List<Domain.Models.OperatingSystem>()
                {
                    repository.FindOperatingSystemByName("WIN"),
                    repository.FindOperatingSystemByName("MAC"),
                    repository.FindOperatingSystemByName("LINUX")
                },
                //MobilePlatforms = repository.GetAllMobilePlatforms(),
                MobilePlatforms = new List<MobilePlatform>()
                {
                    repository.FindMobilePlatformByName("ANDROID"),
                    repository.FindMobilePlatformByName("IPHONE"),
                    repository.FindMobilePlatformByName("BB"),
                    repository.FindMobilePlatformByName("WIN")
                },
                Browsers = new List<Browser>()
                {
                    repository.FindBrowserByName("Internet Explorer 6"),
                    repository.FindBrowserByName("Internet Explorer 7"),
                    repository.FindBrowserByName("Internet Explorer 8"),
                    repository.FindBrowserByName("Internet Explorer 9"),
                    repository.FindBrowserByName("FIREFOX"),
                    repository.FindBrowserByName("CHROME"),
                    repository.FindBrowserByName("SAFARI"),
                },
                LicenceTypeMinimum = repository.FindLicenceTypeMinimumByName(1),
                LicenceTypeMaximum = repository.FindLicenceTypeMaximumByName(99),
                Languages = new List<Language>()
                {
                    repository.FindLanguageByName("ENGLISH")
                },
                SupportTypes = new List<SupportType>()
                {
                    //repository.FindSupportTypeByName("PHONE"),
                    repository.FindSupportTypeByName("ONLINE"),
                    //repository.FindSupportTypeByName("EMAIL")
                },
                SupportHours = repository.FindSupportHoursByName("24"),
                SupportDays = repository.FindSupportDaysByName("7"),
                SupportTerritories = new List<SupportTerritory>()
                {
                    repository.FindSupportTerritoryByName("US"),
                },
                VideoTrainingSupport = true,
                //MaximumMeetingAttendees = 50,
                //MaximumWebinarAttendees = 0,
                CloudApplicationFeatures = new List<CloudApplicationFeature>()
                {
                    repository.FindFeatureByName("UNLIMITED TRANSACTIONS"),
                    repository.FindFeatureByName("UNLIMITED CUSTOMER RECORDS"),
                    repository.FindFeatureByName("UNLIMITED SUPPLIER RECORDS"),
                    repository.FindFeatureByName("UNLIMITED PRODUCT & SERVICE DESCRIPTIONS"),
                    repository.FindFeatureByName("CREATE INVOICES"),
                    repository.FindFeatureByName("INVOICE-TO-PAYMENT MATCHING"),
                    //repository.FindFeatureByName("MULTI-CURRENCY INVOICING"),
                    repository.FindFeatureByName("RECORD BANK PAYMENTS"),
                    repository.FindFeatureByName("CUSTOMISED REPORTS"),
                    repository.FindFeatureByName("SSL SECURITY"),
                    //repository.FindFeatureByName("PROJECT ACCOUNTING"),
                    repository.FindFeatureByName("EXTERNAL ACCESS (FOR ACCOUNTANTS)"),
                    repository.FindFeatureByName("MULTI-USER ACCESS"),
                    repository.FindFeatureByName("MS EXCEL COMPATIBLE"),
                    //repository.FindFeatureByName("FIXED ASSET DEPRECIATION TOOL"),
                    //repository.FindFeatureByName("CUSTOMER STATEMENTS"),
                    //repository.FindFeatureByName("PURCHASE ORDER SYSTEM"),
                    //repository.FindFeatureByName("PAYROLL"),
                    repository.FindFeatureByName("VAT FILING"),
                    repository.FindFeatureByName("3RD PARTY API"),
                },
                ApplicationCostPerMonth = 19.00M,
                ApplicationCostPerAnnum = 0.00M,
                //CallsPackageCostPerMonth = 0M,
                SetupFee = repository.FindSetupFeeByName("NOT APPLICABLE"),
                MinimumContract = repository.FindMinimumContractByName("1 MONTH"),
                PaymentFrequency = repository.FindPaymentFrequencyByName("MONTHLY"),
                PaymentOptions = new List<PaymentOption>()
                {
                    repository.FindPaymentOptionByName("CREDIT CARD"),
                    repository.FindPaymentOptionByName("PRE-PAY"),
                },
                FreeTrialPeriod = repository.FindFreeTrialPeriodByName("YES"),
                Category = repository.FindCategoryByName("FINANCIAL"),
                Vendor = repository.FindVendorByName("xero"),
                Description = repository.GetDescription(),
                AddDate = DateTime.Now,
                #region Ratings,Reviews,Case Studies,White Papers
                Ratings = new List<CloudApplicationRating>()
                {
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                },
                Reviews = new List<CloudApplicationReview>()
                {
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                },
                ThumbnailDocuments = new List<ThumbnailDocument>()
                {
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("WHITE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_WHITE_PAPER_FILEPATH+PDF_TEST_WHITE_PAPER_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_WHITE_PAPER_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_WHITE_PAPER_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_WHITE_PAPER_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("WHITE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_WHITE_PAPER_FILEPATH+PDF_TEST_WHITE_PAPER_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_WHITE_PAPER_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_WHITE_PAPER_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_WHITE_PAPER_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("WHITE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_WHITE_PAPER_FILEPATH+PDF_TEST_WHITE_PAPER_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_WHITE_PAPER_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_WHITE_PAPER_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_WHITE_PAPER_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("CASE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_CASE_STUDY_FILEPATH+PDF_TEST_CASE_STUDY_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_CASE_STUDY_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_CASE_STUDY_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_CASE_STUDY_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("CASE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_CASE_STUDY_FILEPATH+PDF_TEST_CASE_STUDY_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_CASE_STUDY_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_CASE_STUDY_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_CASE_STUDY_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("CASE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_CASE_STUDY_FILEPATH+PDF_TEST_CASE_STUDY_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_CASE_STUDY_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_CASE_STUDY_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_CASE_STUDY_FILENAME,
                    },
                },
                #endregion
            };

            repository.AddCloudApplication(ca);

            #endregion

            #region SAGEONE
            ca = new CloudApplication()
            {
                Brand = "SageOne",
                ServiceName = "Accounts",
                CompanyURL = "www.sageone.com",
                OperatingSystems = new List<Domain.Models.OperatingSystem>()
                {
                    repository.FindOperatingSystemByName("WIN"),
                    repository.FindOperatingSystemByName("MAC"),
                    repository.FindOperatingSystemByName("LINUX")
                },
                //MobilePlatforms = repository.GetAllMobilePlatforms(),
                //MobilePlatforms = new List<MobilePlatform>()
                //{
                //    repository.FindMobilePlatformByName("ANDROID"),
                //    repository.FindMobilePlatformByName("IPHONE"),
                //    repository.FindMobilePlatformByName("BB"),
                //    repository.FindMobilePlatformByName("WIN")
                //},
                Browsers = new List<Browser>()
                {
                    repository.FindBrowserByName("Internet Explorer 6"),
                    repository.FindBrowserByName("Internet Explorer 7"),
                    repository.FindBrowserByName("Internet Explorer 8"),
                    repository.FindBrowserByName("Internet Explorer 9"),
                    repository.FindBrowserByName("FIREFOX"),
                    repository.FindBrowserByName("CHROME"),
                    repository.FindBrowserByName("SAFARI"),
                },
                LicenceTypeMinimum = repository.FindLicenceTypeMinimumByName(1),
                LicenceTypeMaximum = repository.FindLicenceTypeMaximumByName(99),
                Languages = new List<Language>()
                {
                    repository.FindLanguageByName("ENGLISH")
                },
                SupportTypes = new List<SupportType>()
                {
                    repository.FindSupportTypeByName("PHONE"),
                    repository.FindSupportTypeByName("ONLINE"),
                    //repository.FindSupportTypeByName("EMAIL")
                },
                SupportHours = repository.FindSupportHoursByName("24"),
                SupportDays = repository.FindSupportDaysByName("7"),
                SupportTerritories = new List<SupportTerritory>()
                {
                    repository.FindSupportTerritoryByName("UK"),
                },
                VideoTrainingSupport = false,
                //MaximumMeetingAttendees = 50,
                //MaximumWebinarAttendees = 0,
                CloudApplicationFeatures = new List<CloudApplicationFeature>()
                {
                    repository.FindFeatureByName("UNLIMITED TRANSACTIONS"),
                    repository.FindFeatureByName("UNLIMITED CUSTOMER RECORDS"),
                    repository.FindFeatureByName("UNLIMITED SUPPLIER RECORDS"),
                    repository.FindFeatureByName("UNLIMITED PRODUCT & SERVICE DESCRIPTIONS"),
                    repository.FindFeatureByName("CREATE INVOICES"),
                    repository.FindFeatureByName("INVOICE-TO-PAYMENT MATCHING"),
                    //repository.FindFeatureByName("MULTI-CURRENCY INVOICING"),
                    repository.FindFeatureByName("RECORD BANK PAYMENTS"),
                    //repository.FindFeatureByName("CUSTOMISED REPORTS"),
                    repository.FindFeatureByName("SSL SECURITY"),
                    //repository.FindFeatureByName("PROJECT ACCOUNTING"),
                    //repository.FindFeatureByName("EXTERNAL ACCESS (FOR ACCOUNTANTS)"),
                    repository.FindFeatureByName("MULTI-USER ACCESS"),
                    repository.FindFeatureByName("MS EXCEL COMPATIBLE"),
                    //repository.FindFeatureByName("FIXED ASSET DEPRECIATION TOOL"),
                    //repository.FindFeatureByName("CUSTOMER STATEMENTS"),
                    //repository.FindFeatureByName("PURCHASE ORDER SYSTEM"),
                    //repository.FindFeatureByName("PAYROLL"),
                    repository.FindFeatureByName("VAT FILING"),
                    //repository.FindFeatureByName("3RD PARTY API"),
                },
                ApplicationCostPerMonth = 10.00M,
                ApplicationCostPerAnnum = 0.00M,
                //CallsPackageCostPerMonth = 0M,
                SetupFee = repository.FindSetupFeeByName("NOT APPLICABLE"),
                MinimumContract = repository.FindMinimumContractByName("1 MONTH"),
                PaymentFrequency = repository.FindPaymentFrequencyByName("MONTHLY"),
                PaymentOptions = new List<PaymentOption>()
                {
                    repository.FindPaymentOptionByName("CREDIT CARD"),
                    repository.FindPaymentOptionByName("PRE-PAY"),
                },
                FreeTrialPeriod = repository.FindFreeTrialPeriodByName("YES"),
                Category = repository.FindCategoryByName("FINANCIAL"),
                Vendor = repository.FindVendorByName("SageOne"),
                Description = repository.GetDescription(),
                AddDate = DateTime.Now,
                #region Ratings,Reviews,Case Studies,White Papers
                Ratings = new List<CloudApplicationRating>()
                {
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                },
                Reviews = new List<CloudApplicationReview>()
                {
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                },
                ThumbnailDocuments = new List<ThumbnailDocument>()
                {
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("WHITE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_WHITE_PAPER_FILEPATH+PDF_TEST_WHITE_PAPER_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_WHITE_PAPER_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_WHITE_PAPER_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_WHITE_PAPER_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("WHITE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_WHITE_PAPER_FILEPATH+PDF_TEST_WHITE_PAPER_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_WHITE_PAPER_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_WHITE_PAPER_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_WHITE_PAPER_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("WHITE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_WHITE_PAPER_FILEPATH+PDF_TEST_WHITE_PAPER_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_WHITE_PAPER_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_WHITE_PAPER_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_WHITE_PAPER_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("CASE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_CASE_STUDY_FILEPATH+PDF_TEST_CASE_STUDY_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_CASE_STUDY_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_CASE_STUDY_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_CASE_STUDY_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("CASE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_CASE_STUDY_FILEPATH+PDF_TEST_CASE_STUDY_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_CASE_STUDY_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_CASE_STUDY_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_CASE_STUDY_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("CASE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_CASE_STUDY_FILEPATH+PDF_TEST_CASE_STUDY_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_CASE_STUDY_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_CASE_STUDY_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_CASE_STUDY_FILENAME,
                    },
                },
                #endregion
            };

            repository.AddCloudApplication(ca);

            #endregion

            #region E-CONOMIC
            ca = new CloudApplication()
            {
                Brand = "e-conomic",
                ServiceName = "Small",
                CompanyURL = "www.e-conomic.com",
                OperatingSystems = new List<Domain.Models.OperatingSystem>()
                {
                    repository.FindOperatingSystemByName("WIN"),
                    repository.FindOperatingSystemByName("MAC"),
                    repository.FindOperatingSystemByName("LINUX")
                },
                //MobilePlatforms = repository.GetAllMobilePlatforms(),
                //MobilePlatforms = new List<MobilePlatform>()
                //{
                //    repository.FindMobilePlatformByName("ANDROID"),
                //    repository.FindMobilePlatformByName("IPHONE"),
                //    repository.FindMobilePlatformByName("BB"),
                //    repository.FindMobilePlatformByName("WIN")
                //},
                Browsers = new List<Browser>()
                {
                    repository.FindBrowserByName("Internet Explorer 6"),
                    repository.FindBrowserByName("Internet Explorer 7"),
                    repository.FindBrowserByName("Internet Explorer 8"),
                    repository.FindBrowserByName("Internet Explorer 9"),
                    repository.FindBrowserByName("FIREFOX"),
                    repository.FindBrowserByName("CHROME"),
                    repository.FindBrowserByName("SAFARI"),
                },
                LicenceTypeMinimum = repository.FindLicenceTypeMinimumByName(1),
                LicenceTypeMaximum = repository.FindLicenceTypeMaximumByName(99),
                Languages = new List<Language>()
                {
                    repository.FindLanguageByName("ENGLISH")
                },
                SupportTypes = new List<SupportType>()
                {
                    repository.FindSupportTypeByName("PHONE"),
                    repository.FindSupportTypeByName("ONLINE"),
                    //repository.FindSupportTypeByName("EMAIL")
                },
                SupportHours = repository.FindSupportHoursByName("24"),
                SupportDays = repository.FindSupportDaysByName("7"),
                SupportTerritories = new List<SupportTerritory>()
                {
                    repository.FindSupportTerritoryByName("UK"),
                },
                VideoTrainingSupport = false,
                //MaximumMeetingAttendees = 50,
                //MaximumWebinarAttendees = 0,
                CloudApplicationFeatures = new List<CloudApplicationFeature>()
                {
                    repository.FindFeatureByName("UNLIMITED TRANSACTIONS"),
                    repository.FindFeatureByName("UNLIMITED CUSTOMER RECORDS"),
                    repository.FindFeatureByName("UNLIMITED SUPPLIER RECORDS"),
                    repository.FindFeatureByName("UNLIMITED PRODUCT & SERVICE DESCRIPTIONS"),
                    repository.FindFeatureByName("CREATE INVOICES"),
                    repository.FindFeatureByName("INVOICE-TO-PAYMENT MATCHING"),
                    //repository.FindFeatureByName("MULTI-CURRENCY INVOICING"),
                    repository.FindFeatureByName("RECORD BANK PAYMENTS"),
                    repository.FindFeatureByName("CUSTOMISED REPORTS"),
                    repository.FindFeatureByName("SSL SECURITY"),
                    //repository.FindFeatureByName("PROJECT ACCOUNTING"),
                    repository.FindFeatureByName("EXTERNAL ACCESS (FOR ACCOUNTANTS)"),
                    repository.FindFeatureByName("MULTI-USER ACCESS"),
                    repository.FindFeatureByName("MS EXCEL COMPATIBLE"),
                    //repository.FindFeatureByName("FIXED ASSET DEPRECIATION TOOL"),
                    //repository.FindFeatureByName("CUSTOMER STATEMENTS"),
                    //repository.FindFeatureByName("PURCHASE ORDER SYSTEM"),
                    //repository.FindFeatureByName("PAYROLL"),
                    repository.FindFeatureByName("VAT FILING"),
                    repository.FindFeatureByName("3RD PARTY API"),
                },
                ApplicationCostPerMonth = 12.99M,
                ApplicationCostPerAnnum = 0.00M,
                //CallsPackageCostPerMonth = 0M,
                SetupFee = repository.FindSetupFeeByName("NOT APPLICABLE"),
                MinimumContract = repository.FindMinimumContractByName("1 MONTH"),
                PaymentFrequency = repository.FindPaymentFrequencyByName("MONTHLY"),
                PaymentOptions = new List<PaymentOption>()
                {
                    repository.FindPaymentOptionByName("CREDIT CARD"),
                    repository.FindPaymentOptionByName("PRE-PAY"),
                },
                FreeTrialPeriod = repository.FindFreeTrialPeriodByName("YES"),
                Category = repository.FindCategoryByName("FINANCIAL"),
                Vendor = repository.FindVendorByName("e-conomic"),
                Description = repository.GetDescription(),
                AddDate = DateTime.Now,
                #region Ratings,Reviews,Case Studies,White Papers
                Ratings = new List<CloudApplicationRating>()
                {
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                },
                Reviews = new List<CloudApplicationReview>()
                {
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                },
                ThumbnailDocuments = new List<ThumbnailDocument>()
                {
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("WHITE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_WHITE_PAPER_FILEPATH+PDF_TEST_WHITE_PAPER_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_WHITE_PAPER_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_WHITE_PAPER_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_WHITE_PAPER_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("WHITE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_WHITE_PAPER_FILEPATH+PDF_TEST_WHITE_PAPER_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_WHITE_PAPER_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_WHITE_PAPER_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_WHITE_PAPER_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("WHITE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_WHITE_PAPER_FILEPATH+PDF_TEST_WHITE_PAPER_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_WHITE_PAPER_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_WHITE_PAPER_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_WHITE_PAPER_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("CASE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_CASE_STUDY_FILEPATH+PDF_TEST_CASE_STUDY_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_CASE_STUDY_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_CASE_STUDY_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_CASE_STUDY_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("CASE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_CASE_STUDY_FILEPATH+PDF_TEST_CASE_STUDY_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_CASE_STUDY_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_CASE_STUDY_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_CASE_STUDY_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("CASE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_CASE_STUDY_FILEPATH+PDF_TEST_CASE_STUDY_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_CASE_STUDY_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_CASE_STUDY_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_CASE_STUDY_FILENAME,
                    },
                },
                #endregion
            };

            repository.AddCloudApplication(ca);

            #endregion

            #region ARITHMO
            ca = new CloudApplication()
            {
                Brand = "ARITHMO",
                ServiceName = "Small Business",
                CompanyURL = "www.arithmo.co.uk",
                OperatingSystems = new List<Domain.Models.OperatingSystem>()
                {
                    repository.FindOperatingSystemByName("WIN"),
                    repository.FindOperatingSystemByName("MAC"),
                    repository.FindOperatingSystemByName("LINUX")
                },
                //MobilePlatforms = repository.GetAllMobilePlatforms(),
                //MobilePlatforms = new List<MobilePlatform>()
                //{
                //    repository.FindMobilePlatformByName("ANDROID"),
                //    repository.FindMobilePlatformByName("IPHONE"),
                //    repository.FindMobilePlatformByName("BB"),
                //    repository.FindMobilePlatformByName("WIN")
                //},
                Browsers = new List<Browser>()
                {
                    repository.FindBrowserByName("Internet Explorer 6"),
                    repository.FindBrowserByName("Internet Explorer 7"),
                    repository.FindBrowserByName("Internet Explorer 8"),
                    repository.FindBrowserByName("Internet Explorer 9"),
                    repository.FindBrowserByName("FIREFOX"),
                    repository.FindBrowserByName("CHROME"),
                    repository.FindBrowserByName("SAFARI"),
                },
                LicenceTypeMinimum = repository.FindLicenceTypeMinimumByName(1),
                LicenceTypeMaximum = repository.FindLicenceTypeMaximumByName(99),
                Languages = new List<Language>()
                {
                    repository.FindLanguageByName("ENGLISH")
                },
                SupportTypes = new List<SupportType>()
                {
                    repository.FindSupportTypeByName("FAQ"),
                    repository.FindSupportTypeByName("CALLBACK"),
                    //repository.FindSupportTypeByName("EMAIL")
                },
                SupportHours = repository.FindSupportHoursByName("9AM-6PM"),
                SupportDays = repository.FindSupportDaysByName("5"),
                SupportTerritories = new List<SupportTerritory>()
                {
                    repository.FindSupportTerritoryByName("UK"),
                },
                VideoTrainingSupport = true,
                //MaximumMeetingAttendees = 50,
                //MaximumWebinarAttendees = 0,
                CloudApplicationFeatures = new List<CloudApplicationFeature>()
                {
                    repository.FindFeatureByName("UNLIMITED TRANSACTIONS"),
                    repository.FindFeatureByName("UNLIMITED CUSTOMER RECORDS"),
                    repository.FindFeatureByName("UNLIMITED SUPPLIER RECORDS"),
                    repository.FindFeatureByName("UNLIMITED PRODUCT & SERVICE DESCRIPTIONS"),
                    repository.FindFeatureByName("CREATE INVOICES"),
                    repository.FindFeatureByName("INVOICE-TO-PAYMENT MATCHING"),
                    //repository.FindFeatureByName("MULTI-CURRENCY INVOICING"),
                    repository.FindFeatureByName("RECORD BANK PAYMENTS"),
                    repository.FindFeatureByName("CUSTOMISED REPORTS"),
                    repository.FindFeatureByName("SSL SECURITY"),
                    //repository.FindFeatureByName("PROJECT ACCOUNTING"),
                    repository.FindFeatureByName("EXTERNAL ACCESS (FOR ACCOUNTANTS)"),
                    repository.FindFeatureByName("MULTI-USER ACCESS"),
                    repository.FindFeatureByName("MS EXCEL COMPATIBLE"),
                    //repository.FindFeatureByName("FIXED ASSET DEPRECIATION TOOL"),
                    //repository.FindFeatureByName("CUSTOMER STATEMENTS"),
                    //repository.FindFeatureByName("PURCHASE ORDER SYSTEM"),
                    //repository.FindFeatureByName("PAYROLL"),
                    repository.FindFeatureByName("VAT FILING"),
                    repository.FindFeatureByName("3RD PARTY API"),
                },
                ApplicationCostPerMonth = 35.00M,
                ApplicationCostPerAnnum = 0.00M,
                //CallsPackageCostPerMonth = 0M,
                SetupFee = repository.FindSetupFeeByName("NOT APPLICABLE"),
                MinimumContract = repository.FindMinimumContractByName("12 MONTHS"),
                PaymentFrequency = repository.FindPaymentFrequencyByName("MONTHLY"),
                PaymentOptions = new List<PaymentOption>()
                {
                    repository.FindPaymentOptionByName("CREDIT CARD"),
                    repository.FindPaymentOptionByName("PRE-PAY"),
                },
                FreeTrialPeriod = repository.FindFreeTrialPeriodByName("NO"),
                Category = repository.FindCategoryByName("FINANCIAL"),
                Vendor = repository.FindVendorByName("ARITHMO"),
                Description = repository.GetDescription(),
                AddDate = DateTime.Now,
                #region Ratings,Reviews,Case Studies,White Papers
                Ratings = new List<CloudApplicationRating>()
                {
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                },
                Reviews = new List<CloudApplicationReview>()
                {
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                },
                ThumbnailDocuments = new List<ThumbnailDocument>()
                {
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("WHITE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_WHITE_PAPER_FILEPATH+PDF_TEST_WHITE_PAPER_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_WHITE_PAPER_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_WHITE_PAPER_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_WHITE_PAPER_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("WHITE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_WHITE_PAPER_FILEPATH+PDF_TEST_WHITE_PAPER_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_WHITE_PAPER_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_WHITE_PAPER_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_WHITE_PAPER_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("WHITE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_WHITE_PAPER_FILEPATH+PDF_TEST_WHITE_PAPER_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_WHITE_PAPER_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_WHITE_PAPER_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_WHITE_PAPER_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("CASE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_CASE_STUDY_FILEPATH+PDF_TEST_CASE_STUDY_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_CASE_STUDY_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_CASE_STUDY_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_CASE_STUDY_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("CASE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_CASE_STUDY_FILEPATH+PDF_TEST_CASE_STUDY_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_CASE_STUDY_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_CASE_STUDY_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_CASE_STUDY_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("CASE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_CASE_STUDY_FILEPATH+PDF_TEST_CASE_STUDY_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_CASE_STUDY_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_CASE_STUDY_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_CASE_STUDY_FILENAME,
                    },
                },
                #endregion
            };

            repository.AddCloudApplication(ca);

            #endregion

            #region LIQUID
            ca = new CloudApplication()
            {
                Brand = "liquid",
                ServiceName = "Business Accounting",
                CompanyURL = "www.liquidaccounts.net",
                OperatingSystems = new List<Domain.Models.OperatingSystem>()
                {
                    repository.FindOperatingSystemByName("WIN"),
                    repository.FindOperatingSystemByName("MAC"),
                    repository.FindOperatingSystemByName("LINUX")
                },
                //MobilePlatforms = repository.GetAllMobilePlatforms(),
                //MobilePlatforms = new List<MobilePlatform>()
                //{
                //    repository.FindMobilePlatformByName("ANDROID"),
                //    repository.FindMobilePlatformByName("IPHONE"),
                //    repository.FindMobilePlatformByName("BB"),
                //    repository.FindMobilePlatformByName("WIN")
                //},
                Browsers = new List<Browser>()
                {
                    repository.FindBrowserByName("Internet Explorer 6"),
                    repository.FindBrowserByName("Internet Explorer 7"),
                    repository.FindBrowserByName("Internet Explorer 8"),
                    repository.FindBrowserByName("Internet Explorer 9"),
                    repository.FindBrowserByName("FIREFOX"),
                    repository.FindBrowserByName("CHROME"),
                    repository.FindBrowserByName("SAFARI"),
                },
                LicenceTypeMinimum = repository.FindLicenceTypeMinimumByName(1),
                LicenceTypeMaximum = repository.FindLicenceTypeMaximumByName(99),
                Languages = new List<Language>()
                {
                    repository.FindLanguageByName("ENGLISH")
                },
                SupportTypes = new List<SupportType>()
                {
                    repository.FindSupportTypeByName("PHONE"),
                    repository.FindSupportTypeByName("ONLINE"),
                    //repository.FindSupportTypeByName("EMAIL")
                },
                SupportHours = repository.FindSupportHoursByName("9AM-5PM"),
                SupportDays = repository.FindSupportDaysByName("5"),
                SupportTerritories = new List<SupportTerritory>()
                {
                    repository.FindSupportTerritoryByName("UK"),
                },
                VideoTrainingSupport = true,
                //MaximumMeetingAttendees = 50,
                //MaximumWebinarAttendees = 0,
                CloudApplicationFeatures = new List<CloudApplicationFeature>()
                {
                    repository.FindFeatureByName("UNLIMITED TRANSACTIONS"),
                    repository.FindFeatureByName("UNLIMITED CUSTOMER RECORDS"),
                    repository.FindFeatureByName("UNLIMITED SUPPLIER RECORDS"),
                    repository.FindFeatureByName("UNLIMITED PRODUCT & SERVICE DESCRIPTIONS"),
                    repository.FindFeatureByName("CREATE INVOICES"),
                    repository.FindFeatureByName("INVOICE-TO-PAYMENT MATCHING"),
                    repository.FindFeatureByName("MULTI-CURRENCY INVOICING"),
                    repository.FindFeatureByName("RECORD BANK PAYMENTS"),
                    repository.FindFeatureByName("CUSTOMISED REPORTS"),
                    repository.FindFeatureByName("SSL SECURITY"),
                    repository.FindFeatureByName("PROJECT ACCOUNTING"),
                    repository.FindFeatureByName("EXTERNAL ACCESS (FOR ACCOUNTANTS)"),
                    repository.FindFeatureByName("MULTI-USER ACCESS"),
                    repository.FindFeatureByName("MS EXCEL COMPATIBLE"),
                    repository.FindFeatureByName("FIXED ASSET DEPRECIATION TOOL"),
                    repository.FindFeatureByName("CUSTOMER STATEMENTS"),
                    repository.FindFeatureByName("PURCHASE ORDER SYSTEM"),
                    repository.FindFeatureByName("PAYROLL"),
                    repository.FindFeatureByName("VAT FILING"),
                    repository.FindFeatureByName("3RD PARTY API"),
                },
                ApplicationCostPerMonth = 20.00M,
                ApplicationCostPerAnnum = 0.00M,
                //CallsPackageCostPerMonth = 0M,
                SetupFee = repository.FindSetupFeeByName("NOT APPLICABLE"),
                MinimumContract = repository.FindMinimumContractByName("12 MONTHS"),
                PaymentFrequency = repository.FindPaymentFrequencyByName("MONTHLY"),
                PaymentOptions = new List<PaymentOption>()
                {
                    repository.FindPaymentOptionByName("CREDIT CARD"),
                    repository.FindPaymentOptionByName("PRE-PAY"),
                },
                FreeTrialPeriod = repository.FindFreeTrialPeriodByName("YES"),
                Category = repository.FindCategoryByName("FINANCIAL"),
                Vendor = repository.FindVendorByName("liquid"),
                Description = repository.GetDescription(),
                AddDate = DateTime.Now,
                #region Ratings,Reviews,Case Studies,White Papers
                Ratings = new List<CloudApplicationRating>()
                {
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                },
                Reviews = new List<CloudApplicationReview>()
                {
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                },
                ThumbnailDocuments = new List<ThumbnailDocument>()
                {
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("WHITE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_WHITE_PAPER_FILEPATH+PDF_TEST_WHITE_PAPER_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_WHITE_PAPER_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_WHITE_PAPER_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_WHITE_PAPER_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("WHITE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_WHITE_PAPER_FILEPATH+PDF_TEST_WHITE_PAPER_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_WHITE_PAPER_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_WHITE_PAPER_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_WHITE_PAPER_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("WHITE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_WHITE_PAPER_FILEPATH+PDF_TEST_WHITE_PAPER_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_WHITE_PAPER_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_WHITE_PAPER_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_WHITE_PAPER_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("CASE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_CASE_STUDY_FILEPATH+PDF_TEST_CASE_STUDY_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_CASE_STUDY_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_CASE_STUDY_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_CASE_STUDY_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("CASE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_CASE_STUDY_FILEPATH+PDF_TEST_CASE_STUDY_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_CASE_STUDY_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_CASE_STUDY_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_CASE_STUDY_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("CASE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_CASE_STUDY_FILEPATH+PDF_TEST_CASE_STUDY_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_CASE_STUDY_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_CASE_STUDY_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_CASE_STUDY_FILENAME,
                    },
                },
                #endregion
            };

            repository.AddCloudApplication(ca);

            #endregion

            #region KASHOO
            ca = new CloudApplication()
            {
                Brand = "kashoo",
                ServiceName = "Accounting",
                CompanyURL = "www.kashoo.com",
                OperatingSystems = new List<Domain.Models.OperatingSystem>()
                {
                    repository.FindOperatingSystemByName("WIN"),
                    repository.FindOperatingSystemByName("MAC"),
                    repository.FindOperatingSystemByName("IPAD")
                },
                //MobilePlatforms = repository.GetAllMobilePlatforms(),
                MobilePlatforms = new List<MobilePlatform>()
                {
                    repository.FindMobilePlatformByName("ANDROID"),
                    repository.FindMobilePlatformByName("IPHONE"),
                    repository.FindMobilePlatformByName("BB"),
                    repository.FindMobilePlatformByName("WIN")
                },
                Browsers = new List<Browser>()
                {
                    repository.FindBrowserByName("Internet Explorer 6"),
                    repository.FindBrowserByName("Internet Explorer 7"),
                    repository.FindBrowserByName("Internet Explorer 8"),
                    repository.FindBrowserByName("Internet Explorer 9"),
                    repository.FindBrowserByName("FIREFOX"),
                    repository.FindBrowserByName("CHROME"),
                    repository.FindBrowserByName("SAFARI"),
                },
                LicenceTypeMinimum = repository.FindLicenceTypeMinimumByName(1),
                LicenceTypeMaximum = repository.FindLicenceTypeMaximumByName(99),
                Languages = new List<Language>()
                {
                    repository.FindLanguageByName("ENGLISH")
                },
                SupportTypes = new List<SupportType>()
                {
                    repository.FindSupportTypeByName("PHONE"),
                    repository.FindSupportTypeByName("ONLINE"),
                    //repository.FindSupportTypeByName("EMAIL")
                },
                SupportHours = repository.FindSupportHoursByName("24"),
                SupportDays = repository.FindSupportDaysByName("7"),
                SupportTerritories = new List<SupportTerritory>()
                {
                    repository.FindSupportTerritoryByName("US"),
                },
                VideoTrainingSupport = false,
                //MaximumMeetingAttendees = 50,
                //MaximumWebinarAttendees = 0,
                CloudApplicationFeatures = new List<CloudApplicationFeature>()
                {
                    repository.FindFeatureByName("UNLIMITED TRANSACTIONS"),
                    repository.FindFeatureByName("UNLIMITED CUSTOMER RECORDS"),
                    repository.FindFeatureByName("UNLIMITED SUPPLIER RECORDS"),
                    repository.FindFeatureByName("UNLIMITED PRODUCT & SERVICE DESCRIPTIONS"),
                    repository.FindFeatureByName("CREATE INVOICES"),
                    repository.FindFeatureByName("INVOICE-TO-PAYMENT MATCHING"),
                    repository.FindFeatureByName("MULTI-CURRENCY INVOICING"),
                    repository.FindFeatureByName("RECORD BANK PAYMENTS"),
                    repository.FindFeatureByName("CUSTOMISED REPORTS"),
                    repository.FindFeatureByName("SSL SECURITY"),
                    //repository.FindFeatureByName("PROJECT ACCOUNTING"),
                    repository.FindFeatureByName("EXTERNAL ACCESS (FOR ACCOUNTANTS)"),
                    repository.FindFeatureByName("MULTI-USER ACCESS"),
                    repository.FindFeatureByName("MS EXCEL COMPATIBLE"),
                    //repository.FindFeatureByName("FIXED ASSET DEPRECIATION TOOL"),
                    //repository.FindFeatureByName("CUSTOMER STATEMENTS"),
                    //repository.FindFeatureByName("PURCHASE ORDER SYSTEM"),
                    //repository.FindFeatureByName("PAYROLL"),
                    repository.FindFeatureByName("VAT FILING"),
                    repository.FindFeatureByName("3RD PARTY API"),
                },
                ApplicationCostPerMonth = 9.95M,
                ApplicationCostPerAnnum = 0.00M,
                //CallsPackageCostPerMonth = 0M,
                SetupFee = repository.FindSetupFeeByName("NOT APPLICABLE"),
                MinimumContract = repository.FindMinimumContractByName("12 MONTHS"),
                PaymentFrequency = repository.FindPaymentFrequencyByName("MONTHLY"),
                PaymentOptions = new List<PaymentOption>()
                {
                    repository.FindPaymentOptionByName("CREDIT CARD"),
                    repository.FindPaymentOptionByName("PRE-PAY"),
                },
                FreeTrialPeriod = repository.FindFreeTrialPeriodByName("YES"),
                Category = repository.FindCategoryByName("FINANCIAL"),
                Vendor = repository.FindVendorByName("kashoo"),
                Description = repository.GetDescription(),
                AddDate = DateTime.Now,
                #region Ratings,Reviews,Case Studies,White Papers
                Ratings = new List<CloudApplicationRating>()
                {
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                },
                Reviews = new List<CloudApplicationReview>()
                {
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                },
                ThumbnailDocuments = new List<ThumbnailDocument>()
                {
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("WHITE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_WHITE_PAPER_FILEPATH+PDF_TEST_WHITE_PAPER_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_WHITE_PAPER_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_WHITE_PAPER_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_WHITE_PAPER_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("WHITE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_WHITE_PAPER_FILEPATH+PDF_TEST_WHITE_PAPER_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_WHITE_PAPER_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_WHITE_PAPER_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_WHITE_PAPER_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("WHITE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_WHITE_PAPER_FILEPATH+PDF_TEST_WHITE_PAPER_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_WHITE_PAPER_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_WHITE_PAPER_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_WHITE_PAPER_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("CASE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_CASE_STUDY_FILEPATH+PDF_TEST_CASE_STUDY_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_CASE_STUDY_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_CASE_STUDY_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_CASE_STUDY_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("CASE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_CASE_STUDY_FILEPATH+PDF_TEST_CASE_STUDY_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_CASE_STUDY_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_CASE_STUDY_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_CASE_STUDY_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("CASE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_CASE_STUDY_FILEPATH+PDF_TEST_CASE_STUDY_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_CASE_STUDY_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_CASE_STUDY_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_CASE_STUDY_FILENAME,
                    },
                },
                #endregion
            };

            repository.AddCloudApplication(ca);

            #endregion

            #region FRESHBOOKS
            ca = new CloudApplication()
            {
                Brand = "FRESHBOOKS",
                ServiceName = "Evergreen Plan",
                CompanyURL = "www.freshbooks.com",
                OperatingSystems = new List<Domain.Models.OperatingSystem>()
                {
                    repository.FindOperatingSystemByName("WIN"),
                    repository.FindOperatingSystemByName("MAC"),
                    repository.FindOperatingSystemByName("IPAD")
                },
                //MobilePlatforms = repository.GetAllMobilePlatforms(),
                MobilePlatforms = new List<MobilePlatform>()
                {
                    repository.FindMobilePlatformByName("ANDROID"),
                    repository.FindMobilePlatformByName("IPHONE"),
                    repository.FindMobilePlatformByName("BB"),
                    repository.FindMobilePlatformByName("WIN")
                },
                Browsers = new List<Browser>()
                {
                    repository.FindBrowserByName("Internet Explorer 6"),
                    repository.FindBrowserByName("Internet Explorer 7"),
                    repository.FindBrowserByName("Internet Explorer 8"),
                    repository.FindBrowserByName("Internet Explorer 9"),
                    repository.FindBrowserByName("FIREFOX"),
                    repository.FindBrowserByName("CHROME"),
                    repository.FindBrowserByName("SAFARI"),
                },
                LicenceTypeMinimum = repository.FindLicenceTypeMinimumByName(1),
                LicenceTypeMaximum = repository.FindLicenceTypeMaximumByName(99),
                Languages = new List<Language>()
                {
                    repository.FindLanguageByName("ENGLISH")
                },
                SupportTypes = new List<SupportType>()
                {
                    repository.FindSupportTypeByName("PHONE"),
                    repository.FindSupportTypeByName("ONLINE"),
                    //repository.FindSupportTypeByName("EMAIL")
                },
                SupportHours = repository.FindSupportHoursByName("24"),
                SupportDays = repository.FindSupportDaysByName("7"),
                SupportTerritories = new List<SupportTerritory>()
                {
                    repository.FindSupportTerritoryByName("US"),
                },
                VideoTrainingSupport = false,
                //MaximumMeetingAttendees = 50,
                //MaximumWebinarAttendees = 0,
                CloudApplicationFeatures = new List<CloudApplicationFeature>()
                {
                    repository.FindFeatureByName("UNLIMITED TRANSACTIONS"),
                    repository.FindFeatureByName("UNLIMITED CUSTOMER RECORDS"),
                    repository.FindFeatureByName("UNLIMITED SUPPLIER RECORDS"),
                    repository.FindFeatureByName("UNLIMITED PRODUCT & SERVICE DESCRIPTIONS"),
                    repository.FindFeatureByName("CREATE INVOICES"),
                    repository.FindFeatureByName("INVOICE-TO-PAYMENT MATCHING"),
                    repository.FindFeatureByName("MULTI-CURRENCY INVOICING"),
                    repository.FindFeatureByName("RECORD BANK PAYMENTS"),
                    repository.FindFeatureByName("CUSTOMISED REPORTS"),
                    repository.FindFeatureByName("SSL SECURITY"),
                    //repository.FindFeatureByName("PROJECT ACCOUNTING"),
                    repository.FindFeatureByName("EXTERNAL ACCESS (FOR ACCOUNTANTS)"),
                    repository.FindFeatureByName("MULTI-USER ACCESS"),
                    repository.FindFeatureByName("MS EXCEL COMPATIBLE"),
                    //repository.FindFeatureByName("FIXED ASSET DEPRECIATION TOOL"),
                    repository.FindFeatureByName("CUSTOMER STATEMENTS"),
                    repository.FindFeatureByName("PURCHASE ORDER SYSTEM"),
                    repository.FindFeatureByName("PAYROLL"),
                    //repository.FindFeatureByName("VAT FILING"),
                    repository.FindFeatureByName("3RD PARTY API"),
                },
                ApplicationCostPerMonth = 19.95M,
                ApplicationCostPerAnnum = 0.00M,
                //CallsPackageCostPerMonth = 0M,
                SetupFee = repository.FindSetupFeeByName("NOT APPLICABLE"),
                MinimumContract = repository.FindMinimumContractByName("12 MONTHS"),
                PaymentFrequency = repository.FindPaymentFrequencyByName("MONTHLY"),
                PaymentOptions = new List<PaymentOption>()
                {
                    repository.FindPaymentOptionByName("CREDIT CARD"),
                    repository.FindPaymentOptionByName("PRE-PAY"),
                },
                FreeTrialPeriod = repository.FindFreeTrialPeriodByName("YES"),
                Category = repository.FindCategoryByName("FINANCIAL"),
                Vendor = repository.FindVendorByName("FRESHBOOKS"),
                Description = repository.GetDescription(),
                AddDate = DateTime.Now,
                #region Ratings,Reviews,Case Studies,White Papers
                Ratings = new List<CloudApplicationRating>()
                {
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                },
                Reviews = new List<CloudApplicationReview>()
                {
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                },
                ThumbnailDocuments = new List<ThumbnailDocument>()
                {
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("WHITE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_WHITE_PAPER_FILEPATH+PDF_TEST_WHITE_PAPER_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_WHITE_PAPER_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_WHITE_PAPER_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_WHITE_PAPER_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("WHITE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_WHITE_PAPER_FILEPATH+PDF_TEST_WHITE_PAPER_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_WHITE_PAPER_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_WHITE_PAPER_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_WHITE_PAPER_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("WHITE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_WHITE_PAPER_FILEPATH+PDF_TEST_WHITE_PAPER_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_WHITE_PAPER_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_WHITE_PAPER_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_WHITE_PAPER_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("CASE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_CASE_STUDY_FILEPATH+PDF_TEST_CASE_STUDY_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_CASE_STUDY_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_CASE_STUDY_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_CASE_STUDY_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("CASE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_CASE_STUDY_FILEPATH+PDF_TEST_CASE_STUDY_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_CASE_STUDY_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_CASE_STUDY_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_CASE_STUDY_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("CASE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_CASE_STUDY_FILEPATH+PDF_TEST_CASE_STUDY_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_CASE_STUDY_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_CASE_STUDY_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_CASE_STUDY_FILENAME,
                    },
                },
                #endregion
            };

            repository.AddCloudApplication(ca);

            #endregion

            #region CLEARBOOKS
            ca = new CloudApplication()
            {
                Brand = "ClearBooks",
                ServiceName = "Premium",
                CompanyURL = "www.clearbooks.co.uk",
                OperatingSystems = new List<Domain.Models.OperatingSystem>()
                {
                    repository.FindOperatingSystemByName("WIN"),
                    repository.FindOperatingSystemByName("MAC"),
                    repository.FindOperatingSystemByName("IPAD")
                },
                //MobilePlatforms = repository.GetAllMobilePlatforms(),
                MobilePlatforms = new List<MobilePlatform>()
                {
                    repository.FindMobilePlatformByName("ANDROID"),
                    repository.FindMobilePlatformByName("IPHONE"),
                    repository.FindMobilePlatformByName("BB"),
                    repository.FindMobilePlatformByName("WIN")
                },
                Browsers = new List<Browser>()
                {
                    repository.FindBrowserByName("Internet Explorer 6"),
                    repository.FindBrowserByName("Internet Explorer 7"),
                    repository.FindBrowserByName("Internet Explorer 8"),
                    repository.FindBrowserByName("Internet Explorer 9"),
                    repository.FindBrowserByName("FIREFOX"),
                    repository.FindBrowserByName("CHROME"),
                    repository.FindBrowserByName("SAFARI"),
                },
                LicenceTypeMinimum = repository.FindLicenceTypeMinimumByName(1),
                LicenceTypeMaximum = repository.FindLicenceTypeMaximumByName(99),
                Languages = new List<Language>()
                {
                    repository.FindLanguageByName("ENGLISH")
                },
                SupportTypes = new List<SupportType>()
                {
                    repository.FindSupportTypeByName("PHONE"),
                    repository.FindSupportTypeByName("ONLINE"),
                    //repository.FindSupportTypeByName("EMAIL")
                },
                SupportHours = repository.FindSupportHoursByName("9AM-5PM"),
                SupportDays = repository.FindSupportDaysByName("7"),
                SupportTerritories = new List<SupportTerritory>()
                {
                    repository.FindSupportTerritoryByName("UK"),
                },
                VideoTrainingSupport = false,
                //MaximumMeetingAttendees = 50,
                //MaximumWebinarAttendees = 0,
                CloudApplicationFeatures = new List<CloudApplicationFeature>()
                {
                    repository.FindFeatureByName("UNLIMITED TRANSACTIONS"),
                    repository.FindFeatureByName("UNLIMITED CUSTOMER RECORDS"),
                    repository.FindFeatureByName("UNLIMITED SUPPLIER RECORDS"),
                    repository.FindFeatureByName("UNLIMITED PRODUCT & SERVICE DESCRIPTIONS"),
                    repository.FindFeatureByName("CREATE INVOICES"),
                    repository.FindFeatureByName("INVOICE-TO-PAYMENT MATCHING"),
                    repository.FindFeatureByName("MULTI-CURRENCY INVOICING"),
                    repository.FindFeatureByName("RECORD BANK PAYMENTS"),
                    repository.FindFeatureByName("CUSTOMISED REPORTS"),
                    repository.FindFeatureByName("SSL SECURITY"),
                    repository.FindFeatureByName("PROJECT ACCOUNTING"),
                    repository.FindFeatureByName("EXTERNAL ACCESS (FOR ACCOUNTANTS)"),
                    repository.FindFeatureByName("MULTI-USER ACCESS"),
                    repository.FindFeatureByName("MS EXCEL COMPATIBLE"),
                    repository.FindFeatureByName("FIXED ASSET DEPRECIATION TOOL"),
                    repository.FindFeatureByName("CUSTOMER STATEMENTS"),
                    repository.FindFeatureByName("PURCHASE ORDER SYSTEM"),
                    repository.FindFeatureByName("PAYROLL"),
                    repository.FindFeatureByName("VAT FILING"),
                    repository.FindFeatureByName("3RD PARTY API"),
                },
                ApplicationCostPerMonth = 15.00M,
                ApplicationCostPerAnnum = 0.00M,
                //CallsPackageCostPerMonth = 0M,
                SetupFee = repository.FindSetupFeeByName("NOT APPLICABLE"),
                MinimumContract = repository.FindMinimumContractByName("12 MONTHS"),
                PaymentFrequency = repository.FindPaymentFrequencyByName("MONTHLY"),
                PaymentOptions = new List<PaymentOption>()
                {
                    repository.FindPaymentOptionByName("CREDIT CARD"),
                    repository.FindPaymentOptionByName("PRE-PAY"),
                },
                FreeTrialPeriod = repository.FindFreeTrialPeriodByName("YES"),
                Category = repository.FindCategoryByName("FINANCIAL"),
                Vendor = repository.FindVendorByName("ClearBooks"),
                Description = repository.GetDescription(),
                AddDate = DateTime.Now,
                #region Ratings,Reviews,Case Studies,White Papers
                Ratings = new List<CloudApplicationRating>()
                {
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                },
                Reviews = new List<CloudApplicationReview>()
                {
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                },
                ThumbnailDocuments = new List<ThumbnailDocument>()
                {
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("WHITE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_WHITE_PAPER_FILEPATH+PDF_TEST_WHITE_PAPER_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_WHITE_PAPER_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_WHITE_PAPER_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_WHITE_PAPER_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("WHITE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_WHITE_PAPER_FILEPATH+PDF_TEST_WHITE_PAPER_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_WHITE_PAPER_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_WHITE_PAPER_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_WHITE_PAPER_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("WHITE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_WHITE_PAPER_FILEPATH+PDF_TEST_WHITE_PAPER_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_WHITE_PAPER_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_WHITE_PAPER_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_WHITE_PAPER_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("CASE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_CASE_STUDY_FILEPATH+PDF_TEST_CASE_STUDY_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_CASE_STUDY_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_CASE_STUDY_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_CASE_STUDY_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("CASE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_CASE_STUDY_FILEPATH+PDF_TEST_CASE_STUDY_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_CASE_STUDY_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_CASE_STUDY_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_CASE_STUDY_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("CASE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_CASE_STUDY_FILEPATH+PDF_TEST_CASE_STUDY_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_CASE_STUDY_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_CASE_STUDY_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_CASE_STUDY_FILENAME,
                    },
                },
                #endregion
            };

            repository.AddCloudApplication(ca);

            #endregion

            #region LEDGERBLE
            ca = new CloudApplication()
            {
                Brand = "ledgerble",
                ServiceName = "Premium",
                CompanyURL = "www.ledgerble.com",
                OperatingSystems = new List<Domain.Models.OperatingSystem>()
                {
                    repository.FindOperatingSystemByName("WIN"),
                    repository.FindOperatingSystemByName("MAC"),
                    repository.FindOperatingSystemByName("IPAD")
                },
                //MobilePlatforms = repository.GetAllMobilePlatforms(),
                MobilePlatforms = new List<MobilePlatform>()
                {
                    repository.FindMobilePlatformByName("ANDROID"),
                    repository.FindMobilePlatformByName("IPHONE"),
                    repository.FindMobilePlatformByName("BB"),
                    repository.FindMobilePlatformByName("WIN")
                },
                Browsers = new List<Browser>()
                {
                    repository.FindBrowserByName("Internet Explorer 6"),
                    repository.FindBrowserByName("Internet Explorer 7"),
                    repository.FindBrowserByName("Internet Explorer 8"),
                    repository.FindBrowserByName("Internet Explorer 9"),
                    repository.FindBrowserByName("FIREFOX"),
                    repository.FindBrowserByName("CHROME"),
                    repository.FindBrowserByName("SAFARI"),
                },
                LicenceTypeMinimum = repository.FindLicenceTypeMinimumByName(1),
                LicenceTypeMaximum = repository.FindLicenceTypeMaximumByName(99),
                Languages = new List<Language>()
                {
                    repository.FindLanguageByName("ENGLISH")
                },
                SupportTypes = new List<SupportType>()
                {
                    //repository.FindSupportTypeByName("PHONE"),
                    repository.FindSupportTypeByName("ONLINE"),
                    //repository.FindSupportTypeByName("EMAIL")
                },
                SupportHours = repository.FindSupportHoursByName("24"),
                SupportDays = repository.FindSupportDaysByName("7"),
                SupportTerritories = new List<SupportTerritory>()
                {
                    repository.FindSupportTerritoryByName("US"),
                },
                VideoTrainingSupport = false,
                //MaximumMeetingAttendees = 50,
                //MaximumWebinarAttendees = 0,
                CloudApplicationFeatures = new List<CloudApplicationFeature>()
                {
                    repository.FindFeatureByName("UNLIMITED TRANSACTIONS"),
                    repository.FindFeatureByName("UNLIMITED CUSTOMER RECORDS"),
                    repository.FindFeatureByName("UNLIMITED SUPPLIER RECORDS"),
                    repository.FindFeatureByName("UNLIMITED PRODUCT & SERVICE DESCRIPTIONS"),
                    repository.FindFeatureByName("CREATE INVOICES"),
                    repository.FindFeatureByName("INVOICE-TO-PAYMENT MATCHING"),
                    //repository.FindFeatureByName("MULTI-CURRENCY INVOICING"),
                    repository.FindFeatureByName("RECORD BANK PAYMENTS"),
                    //repository.FindFeatureByName("CUSTOMISED REPORTS"),
                    repository.FindFeatureByName("SSL SECURITY"),
                    //repository.FindFeatureByName("PROJECT ACCOUNTING"),
                    //repository.FindFeatureByName("EXTERNAL ACCESS (FOR ACCOUNTANTS)"),
                    repository.FindFeatureByName("MULTI-USER ACCESS"),
                    repository.FindFeatureByName("MS EXCEL COMPATIBLE"),
                    //repository.FindFeatureByName("FIXED ASSET DEPRECIATION TOOL"),
                    //repository.FindFeatureByName("CUSTOMER STATEMENTS"),
                    //repository.FindFeatureByName("PURCHASE ORDER SYSTEM"),
                    //repository.FindFeatureByName("PAYROLL"),
                    repository.FindFeatureByName("VAT FILING"),
                    //repository.FindFeatureByName("3RD PARTY API"),
                },
                ApplicationCostPerMonth = 14.00M,
                ApplicationCostPerAnnum = 0.00M,
                //CallsPackageCostPerMonth = 0M,
                SetupFee = repository.FindSetupFeeByName("NOT APPLICABLE"),
                MinimumContract = repository.FindMinimumContractByName("12 MONTHS"),
                PaymentFrequency = repository.FindPaymentFrequencyByName("MONTHLY"),
                PaymentOptions = new List<PaymentOption>()
                {
                    repository.FindPaymentOptionByName("CREDIT CARD"),
                    repository.FindPaymentOptionByName("PRE-PAY"),
                },
                FreeTrialPeriod = repository.FindFreeTrialPeriodByName("YES"),
                Category = repository.FindCategoryByName("FINANCIAL"),
                Vendor = repository.FindVendorByName("ledgerble"),
                Description = repository.GetDescription(),
                AddDate = DateTime.Now,
                #region Ratings,Reviews,Case Studies,White Papers
                Ratings = new List<CloudApplicationRating>()
                {
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                },
                Reviews = new List<CloudApplicationReview>()
                {
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                },
                ThumbnailDocuments = new List<ThumbnailDocument>()
                {
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("WHITE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_WHITE_PAPER_FILEPATH+PDF_TEST_WHITE_PAPER_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_WHITE_PAPER_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_WHITE_PAPER_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_WHITE_PAPER_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("WHITE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_WHITE_PAPER_FILEPATH+PDF_TEST_WHITE_PAPER_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_WHITE_PAPER_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_WHITE_PAPER_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_WHITE_PAPER_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("WHITE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_WHITE_PAPER_FILEPATH+PDF_TEST_WHITE_PAPER_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_WHITE_PAPER_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_WHITE_PAPER_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_WHITE_PAPER_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("CASE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_CASE_STUDY_FILEPATH+PDF_TEST_CASE_STUDY_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_CASE_STUDY_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_CASE_STUDY_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_CASE_STUDY_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("CASE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_CASE_STUDY_FILEPATH+PDF_TEST_CASE_STUDY_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_CASE_STUDY_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_CASE_STUDY_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_CASE_STUDY_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("CASE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_CASE_STUDY_FILEPATH+PDF_TEST_CASE_STUDY_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_CASE_STUDY_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_CASE_STUDY_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_CASE_STUDY_FILENAME,
                    },
                },
                #endregion
            };

            repository.AddCloudApplication(ca);

            #endregion

            #region KASHFLOW
            ca = new CloudApplication()
            {
                Brand = "KashFlow",
                ServiceName = "Accounting",
                CompanyURL = "www.kashflow.com",
                OperatingSystems = new List<Domain.Models.OperatingSystem>()
                {
                    repository.FindOperatingSystemByName("WIN"),
                    repository.FindOperatingSystemByName("MAC"),
                    repository.FindOperatingSystemByName("IPAD")
                },
                //MobilePlatforms = repository.GetAllMobilePlatforms(),
                MobilePlatforms = new List<MobilePlatform>()
                {
                    repository.FindMobilePlatformByName("ANDROID"),
                    repository.FindMobilePlatformByName("IPHONE"),
                    repository.FindMobilePlatformByName("BB"),
                    repository.FindMobilePlatformByName("WIN")
                },
                Browsers = new List<Browser>()
                {
                    repository.FindBrowserByName("Internet Explorer 6"),
                    repository.FindBrowserByName("Internet Explorer 7"),
                    repository.FindBrowserByName("Internet Explorer 8"),
                    repository.FindBrowserByName("Internet Explorer 9"),
                    repository.FindBrowserByName("FIREFOX"),
                    repository.FindBrowserByName("CHROME"),
                    repository.FindBrowserByName("SAFARI"),
                },
                LicenceTypeMinimum = repository.FindLicenceTypeMinimumByName(1),
                LicenceTypeMaximum = repository.FindLicenceTypeMaximumByName(99),
                Languages = new List<Language>()
                {
                    repository.FindLanguageByName("ENGLISH")
                },
                SupportTypes = new List<SupportType>()
                {
                    repository.FindSupportTypeByName("PHONE"),
                    repository.FindSupportTypeByName("ONLINE"),
                    //repository.FindSupportTypeByName("EMAIL")
                },
                SupportHours = repository.FindSupportHoursByName("24"),
                SupportDays = repository.FindSupportDaysByName("7"),
                SupportTerritories = new List<SupportTerritory>()
                {
                    repository.FindSupportTerritoryByName("UK"),
                },
                VideoTrainingSupport = true,
                //MaximumMeetingAttendees = 50,
                //MaximumWebinarAttendees = 0,
                CloudApplicationFeatures = new List<CloudApplicationFeature>()
                {
                    repository.FindFeatureByName("UNLIMITED TRANSACTIONS"),
                    repository.FindFeatureByName("UNLIMITED CUSTOMER RECORDS"),
                    repository.FindFeatureByName("UNLIMITED SUPPLIER RECORDS"),
                    repository.FindFeatureByName("UNLIMITED PRODUCT & SERVICE DESCRIPTIONS"),
                    repository.FindFeatureByName("CREATE INVOICES"),
                    repository.FindFeatureByName("INVOICE-TO-PAYMENT MATCHING"),
                    repository.FindFeatureByName("MULTI-CURRENCY INVOICING"),
                    repository.FindFeatureByName("RECORD BANK PAYMENTS"),
                    repository.FindFeatureByName("CUSTOMISED REPORTS"),
                    repository.FindFeatureByName("SSL SECURITY"),
                    repository.FindFeatureByName("PROJECT ACCOUNTING"),
                    repository.FindFeatureByName("EXTERNAL ACCESS (FOR ACCOUNTANTS)"),
                    repository.FindFeatureByName("MULTI-USER ACCESS"),
                    repository.FindFeatureByName("MS EXCEL COMPATIBLE"),
                    repository.FindFeatureByName("FIXED ASSET DEPRECIATION TOOL"),
                    repository.FindFeatureByName("CUSTOMER STATEMENTS"),
                    repository.FindFeatureByName("PURCHASE ORDER SYSTEM"),
                    repository.FindFeatureByName("PAYROLL"),
                    repository.FindFeatureByName("VAT FILING"),
                    repository.FindFeatureByName("3RD PARTY API"),
                },
                ApplicationCostPerMonth = 15.99M,
                ApplicationCostPerAnnum = 0.00M,
                //CallsPackageCostPerMonth = 0M,
                SetupFee = repository.FindSetupFeeByName("NOT APPLICABLE"),
                MinimumContract = repository.FindMinimumContractByName("12 MONTHS"),
                PaymentFrequency = repository.FindPaymentFrequencyByName("MONTHLY"),
                PaymentOptions = new List<PaymentOption>()
                {
                    repository.FindPaymentOptionByName("CREDIT CARD"),
                    repository.FindPaymentOptionByName("PRE-PAY"),
                },
                FreeTrialPeriod = repository.FindFreeTrialPeriodByName("YES"),
                Category = repository.FindCategoryByName("FINANCIAL"),
                Vendor = repository.FindVendorByName("KashFlow"),
                Description = repository.GetDescription(),
                AddDate = DateTime.Now,
                #region Ratings,Reviews,Case Studies,White Papers
                Ratings = new List<CloudApplicationRating>()
                {
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                },
                Reviews = new List<CloudApplicationReview>()
                {
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                },
                ThumbnailDocuments = new List<ThumbnailDocument>()
                {
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("WHITE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_WHITE_PAPER_FILEPATH+PDF_TEST_WHITE_PAPER_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_WHITE_PAPER_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_WHITE_PAPER_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_WHITE_PAPER_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("WHITE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_WHITE_PAPER_FILEPATH+PDF_TEST_WHITE_PAPER_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_WHITE_PAPER_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_WHITE_PAPER_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_WHITE_PAPER_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("WHITE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_WHITE_PAPER_FILEPATH+PDF_TEST_WHITE_PAPER_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_WHITE_PAPER_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_WHITE_PAPER_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_WHITE_PAPER_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("CASE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_CASE_STUDY_FILEPATH+PDF_TEST_CASE_STUDY_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_CASE_STUDY_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_CASE_STUDY_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_CASE_STUDY_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("CASE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_CASE_STUDY_FILEPATH+PDF_TEST_CASE_STUDY_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_CASE_STUDY_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_CASE_STUDY_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_CASE_STUDY_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("CASE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_CASE_STUDY_FILEPATH+PDF_TEST_CASE_STUDY_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_CASE_STUDY_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_CASE_STUDY_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_CASE_STUDY_FILENAME,
                    },
                },
                #endregion
            };

            repository.AddCloudApplication(ca);

            #endregion

            #region FREEAGENT
            ca = new CloudApplication()
            {
                Brand = "FreeAgent",
                ServiceName = "Sole Trader",
                CompanyURL = "www.freeagentcentral.com",
                OperatingSystems = new List<Domain.Models.OperatingSystem>()
                {
                    repository.FindOperatingSystemByName("WIN"),
                    repository.FindOperatingSystemByName("MAC"),
                    repository.FindOperatingSystemByName("IPAD")
                },
                //MobilePlatforms = repository.GetAllMobilePlatforms(),
                MobilePlatforms = new List<MobilePlatform>()
                {
                    repository.FindMobilePlatformByName("ANDROID"),
                    repository.FindMobilePlatformByName("IPHONE"),
                    repository.FindMobilePlatformByName("BB"),
                    repository.FindMobilePlatformByName("WIN")
                },
                Browsers = new List<Browser>()
                {
                    repository.FindBrowserByName("Internet Explorer 6"),
                    repository.FindBrowserByName("Internet Explorer 7"),
                    repository.FindBrowserByName("Internet Explorer 8"),
                    repository.FindBrowserByName("Internet Explorer 9"),
                    repository.FindBrowserByName("FIREFOX"),
                    repository.FindBrowserByName("CHROME"),
                    repository.FindBrowserByName("SAFARI"),
                },
                LicenceTypeMinimum = repository.FindLicenceTypeMinimumByName(1),
                LicenceTypeMaximum = repository.FindLicenceTypeMaximumByName(99),
                Languages = new List<Language>()
                {
                    repository.FindLanguageByName("ENGLISH")
                },
                SupportTypes = new List<SupportType>()
                {
                    //repository.FindSupportTypeByName("PHONE"),
                    repository.FindSupportTypeByName("ONLINE"),
                    //repository.FindSupportTypeByName("EMAIL")
                },
                SupportHours = repository.FindSupportHoursByName("24"),
                SupportDays = repository.FindSupportDaysByName("7"),
                SupportTerritories = new List<SupportTerritory>()
                {
                    repository.FindSupportTerritoryByName("UK"),
                },
                VideoTrainingSupport = false,
                //MaximumMeetingAttendees = 50,
                //MaximumWebinarAttendees = 0,
                CloudApplicationFeatures = new List<CloudApplicationFeature>()
                {
                    repository.FindFeatureByName("UNLIMITED TRANSACTIONS"),
                    repository.FindFeatureByName("UNLIMITED CUSTOMER RECORDS"),
                    repository.FindFeatureByName("UNLIMITED SUPPLIER RECORDS"),
                    repository.FindFeatureByName("UNLIMITED PRODUCT & SERVICE DESCRIPTIONS"),
                    repository.FindFeatureByName("CREATE INVOICES"),
                    repository.FindFeatureByName("INVOICE-TO-PAYMENT MATCHING"),
                    //repository.FindFeatureByName("MULTI-CURRENCY INVOICING"),
                    repository.FindFeatureByName("RECORD BANK PAYMENTS"),
                    repository.FindFeatureByName("CUSTOMISED REPORTS"),
                    repository.FindFeatureByName("SSL SECURITY"),
                    //repository.FindFeatureByName("PROJECT ACCOUNTING"),
                    //repository.FindFeatureByName("EXTERNAL ACCESS (FOR ACCOUNTANTS)"),
                    repository.FindFeatureByName("MULTI-USER ACCESS"),
                    repository.FindFeatureByName("MS EXCEL COMPATIBLE"),
                    //repository.FindFeatureByName("FIXED ASSET DEPRECIATION TOOL"),
                    //repository.FindFeatureByName("CUSTOMER STATEMENTS"),
                    //repository.FindFeatureByName("PURCHASE ORDER SYSTEM"),
                    //repository.FindFeatureByName("PAYROLL"),
                    repository.FindFeatureByName("VAT FILING"),
                    repository.FindFeatureByName("3RD PARTY API"),
                },
                ApplicationCostPerMonth = 25.00M,
                ApplicationCostPerAnnum = 0.00M,
                //CallsPackageCostPerMonth = 0M,
                SetupFee = repository.FindSetupFeeByName("NOT APPLICABLE"),
                MinimumContract = repository.FindMinimumContractByName("12 MONTHS"),
                PaymentFrequency = repository.FindPaymentFrequencyByName("MONTHLY"),
                PaymentOptions = new List<PaymentOption>()
                {
                    repository.FindPaymentOptionByName("CREDIT CARD"),
                    repository.FindPaymentOptionByName("DEBIT CARD"),
                },
                FreeTrialPeriod = repository.FindFreeTrialPeriodByName("YES"),
                Category = repository.FindCategoryByName("FINANCIAL"),
                Vendor = repository.FindVendorByName("FreeAgent"),
                Description = repository.GetDescription(),
                AddDate = DateTime.Now,
                #region Ratings,Reviews,Case Studies,White Papers
                Ratings = new List<CloudApplicationRating>()
                {
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                },
                Reviews = new List<CloudApplicationReview>()
                {
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                },
                ThumbnailDocuments = new List<ThumbnailDocument>()
                {
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("WHITE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_WHITE_PAPER_FILEPATH+PDF_TEST_WHITE_PAPER_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_WHITE_PAPER_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_WHITE_PAPER_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_WHITE_PAPER_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("WHITE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_WHITE_PAPER_FILEPATH+PDF_TEST_WHITE_PAPER_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_WHITE_PAPER_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_WHITE_PAPER_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_WHITE_PAPER_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("WHITE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_WHITE_PAPER_FILEPATH+PDF_TEST_WHITE_PAPER_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_WHITE_PAPER_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_WHITE_PAPER_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_WHITE_PAPER_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("CASE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_CASE_STUDY_FILEPATH+PDF_TEST_CASE_STUDY_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_CASE_STUDY_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_CASE_STUDY_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_CASE_STUDY_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("CASE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_CASE_STUDY_FILEPATH+PDF_TEST_CASE_STUDY_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_CASE_STUDY_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_CASE_STUDY_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_CASE_STUDY_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("CASE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_CASE_STUDY_FILEPATH+PDF_TEST_CASE_STUDY_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_CASE_STUDY_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_CASE_STUDY_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_CASE_STUDY_FILENAME,
                    },
                },
                #endregion
            };

            repository.AddCloudApplication(ca);

            #endregion

            #region OUTRIGHT
            ca = new CloudApplication()
            {
                Brand = "outright",
                ServiceName = "Accounting",
                CompanyURL = "www.outright.com",
                OperatingSystems = new List<Domain.Models.OperatingSystem>()
                {
                    repository.FindOperatingSystemByName("WIN"),
                    repository.FindOperatingSystemByName("MAC"),
                    repository.FindOperatingSystemByName("IPAD")
                },
                //MobilePlatforms = repository.GetAllMobilePlatforms(),
                MobilePlatforms = new List<MobilePlatform>()
                {
                    repository.FindMobilePlatformByName("ANDROID"),
                    repository.FindMobilePlatformByName("IPHONE"),
                    repository.FindMobilePlatformByName("BB"),
                    repository.FindMobilePlatformByName("WIN")
                },
                Browsers = new List<Browser>()
                {
                    repository.FindBrowserByName("Internet Explorer 6"),
                    repository.FindBrowserByName("Internet Explorer 7"),
                    repository.FindBrowserByName("Internet Explorer 8"),
                    repository.FindBrowserByName("Internet Explorer 9"),
                    repository.FindBrowserByName("FIREFOX"),
                    repository.FindBrowserByName("CHROME"),
                    repository.FindBrowserByName("SAFARI"),
                },
                LicenceTypeMinimum = repository.FindLicenceTypeMinimumByName(1),
                LicenceTypeMaximum = repository.FindLicenceTypeMaximumByName(99),
                Languages = new List<Language>()
                {
                    repository.FindLanguageByName("ENGLISH")
                },
                SupportTypes = new List<SupportType>()
                {
                    //repository.FindSupportTypeByName("PHONE"),
                    repository.FindSupportTypeByName("ONLINE"),
                    //repository.FindSupportTypeByName("EMAIL")
                },
                SupportHours = repository.FindSupportHoursByName("24"),
                SupportDays = repository.FindSupportDaysByName("7"),
                SupportTerritories = new List<SupportTerritory>()
                {
                    repository.FindSupportTerritoryByName("US"),
                },
                VideoTrainingSupport = false,
                //MaximumMeetingAttendees = 50,
                //MaximumWebinarAttendees = 0,
                CloudApplicationFeatures = new List<CloudApplicationFeature>()
                {
                    repository.FindFeatureByName("UNLIMITED TRANSACTIONS"),
                    repository.FindFeatureByName("UNLIMITED CUSTOMER RECORDS"),
                    repository.FindFeatureByName("UNLIMITED SUPPLIER RECORDS"),
                    repository.FindFeatureByName("UNLIMITED PRODUCT & SERVICE DESCRIPTIONS"),
                    repository.FindFeatureByName("CREATE INVOICES"),
                    repository.FindFeatureByName("INVOICE-TO-PAYMENT MATCHING"),
                    //repository.FindFeatureByName("MULTI-CURRENCY INVOICING"),
                    repository.FindFeatureByName("RECORD BANK PAYMENTS"),
                    repository.FindFeatureByName("CUSTOMISED REPORTS"),
                    repository.FindFeatureByName("SSL SECURITY"),
                    //repository.FindFeatureByName("PROJECT ACCOUNTING"),
                    //repository.FindFeatureByName("EXTERNAL ACCESS (FOR ACCOUNTANTS)"),
                    //repository.FindFeatureByName("MULTI-USER ACCESS"),
                    repository.FindFeatureByName("MS EXCEL COMPATIBLE"),
                    //repository.FindFeatureByName("FIXED ASSET DEPRECIATION TOOL"),
                    //repository.FindFeatureByName("CUSTOMER STATEMENTS"),
                    //repository.FindFeatureByName("PURCHASE ORDER SYSTEM"),
                    //repository.FindFeatureByName("PAYROLL"),
                    //repository.FindFeatureByName("VAT FILING"),
                    repository.FindFeatureByName("3RD PARTY API"),
                },
                ApplicationCostPerMonth = 9.95M,
                ApplicationCostPerAnnum = 0.00M,
                //CallsPackageCostPerMonth = 0M,
                SetupFee = repository.FindSetupFeeByName("NOT APPLICABLE"),
                MinimumContract = repository.FindMinimumContractByName("12 MONTHS"),
                PaymentFrequency = repository.FindPaymentFrequencyByName("MONTHLY"),
                PaymentOptions = new List<PaymentOption>()
                {
                    repository.FindPaymentOptionByName("CREDIT CARD"),
                    repository.FindPaymentOptionByName("DEBIT CARD"),
                },
                FreeTrialPeriod = repository.FindFreeTrialPeriodByName("YES"),
                Category = repository.FindCategoryByName("FINANCIAL"),
                Vendor = repository.FindVendorByName("outright"),
                Description = repository.GetDescription(),
                AddDate = DateTime.Now,
                #region Ratings,Reviews,Case Studies,White Papers
                Ratings = new List<CloudApplicationRating>()
                {
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                },
                Reviews = new List<CloudApplicationReview>()
                {
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                },
                ThumbnailDocuments = new List<ThumbnailDocument>()
                {
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("WHITE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_WHITE_PAPER_FILEPATH+PDF_TEST_WHITE_PAPER_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_WHITE_PAPER_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_WHITE_PAPER_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_WHITE_PAPER_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("WHITE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_WHITE_PAPER_FILEPATH+PDF_TEST_WHITE_PAPER_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_WHITE_PAPER_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_WHITE_PAPER_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_WHITE_PAPER_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("WHITE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_WHITE_PAPER_FILEPATH+PDF_TEST_WHITE_PAPER_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_WHITE_PAPER_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_WHITE_PAPER_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_WHITE_PAPER_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("CASE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_CASE_STUDY_FILEPATH+PDF_TEST_CASE_STUDY_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_CASE_STUDY_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_CASE_STUDY_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_CASE_STUDY_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("CASE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_CASE_STUDY_FILEPATH+PDF_TEST_CASE_STUDY_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_CASE_STUDY_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_CASE_STUDY_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_CASE_STUDY_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("CASE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_CASE_STUDY_FILEPATH+PDF_TEST_CASE_STUDY_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_CASE_STUDY_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_CASE_STUDY_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_CASE_STUDY_FILENAME,
                    },
                },
                #endregion
            };

            repository.AddCloudApplication(ca);

            #endregion

            #region ZOHO BOOKS
            ca = new CloudApplication()
            {
                Brand = "ZOHO Books",
                ServiceName = "Books",
                CompanyURL = "www.zoho.com/books",
                OperatingSystems = new List<Domain.Models.OperatingSystem>()
                {
                    repository.FindOperatingSystemByName("WIN"),
                    repository.FindOperatingSystemByName("MAC"),
                    repository.FindOperatingSystemByName("IPAD")
                },
                //MobilePlatforms = repository.GetAllMobilePlatforms(),
                MobilePlatforms = new List<MobilePlatform>()
                {
                    repository.FindMobilePlatformByName("ANDROID"),
                    repository.FindMobilePlatformByName("IPHONE"),
                    repository.FindMobilePlatformByName("BB"),
                    repository.FindMobilePlatformByName("WIN")
                },
                Browsers = new List<Browser>()
                {
                    repository.FindBrowserByName("Internet Explorer 6"),
                    repository.FindBrowserByName("Internet Explorer 7"),
                    repository.FindBrowserByName("Internet Explorer 8"),
                    repository.FindBrowserByName("Internet Explorer 9"),
                    repository.FindBrowserByName("FIREFOX"),
                    repository.FindBrowserByName("CHROME"),
                    repository.FindBrowserByName("SAFARI"),
                },
                LicenceTypeMinimum = repository.FindLicenceTypeMinimumByName(1),
                LicenceTypeMaximum = repository.FindLicenceTypeMaximumByName(99),
                Languages = new List<Language>()
                {
                    repository.FindLanguageByName("ENGLISH")
                },
                SupportTypes = new List<SupportType>()
                {
                    //repository.FindSupportTypeByName("PHONE"),
                    repository.FindSupportTypeByName("ONLINE"),
                    //repository.FindSupportTypeByName("EMAIL")
                },
                SupportHours = repository.FindSupportHoursByName("24"),
                SupportDays = repository.FindSupportDaysByName("7"),
                SupportTerritories = new List<SupportTerritory>()
                {
                    repository.FindSupportTerritoryByName("US"),
                },
                VideoTrainingSupport = false,
                //MaximumMeetingAttendees = 50,
                //MaximumWebinarAttendees = 0,
                CloudApplicationFeatures = new List<CloudApplicationFeature>()
                {
                    repository.FindFeatureByName("UNLIMITED TRANSACTIONS"),
                    repository.FindFeatureByName("UNLIMITED CUSTOMER RECORDS"),
                    repository.FindFeatureByName("UNLIMITED SUPPLIER RECORDS"),
                    repository.FindFeatureByName("UNLIMITED PRODUCT & SERVICE DESCRIPTIONS"),
                    repository.FindFeatureByName("CREATE INVOICES"),
                    repository.FindFeatureByName("INVOICE-TO-PAYMENT MATCHING"),
                    repository.FindFeatureByName("MULTI-CURRENCY INVOICING"),
                    repository.FindFeatureByName("RECORD BANK PAYMENTS"),
                    repository.FindFeatureByName("CUSTOMISED REPORTS"),
                    repository.FindFeatureByName("SSL SECURITY"),
                    repository.FindFeatureByName("PROJECT ACCOUNTING"),
                    repository.FindFeatureByName("EXTERNAL ACCESS (FOR ACCOUNTANTS)"),
                    repository.FindFeatureByName("MULTI-USER ACCESS"),
                    repository.FindFeatureByName("MS EXCEL COMPATIBLE"),
                    repository.FindFeatureByName("FIXED ASSET DEPRECIATION TOOL"),
                    repository.FindFeatureByName("CUSTOMER STATEMENTS"),
                    repository.FindFeatureByName("PURCHASE ORDER SYSTEM"),
                    repository.FindFeatureByName("PAYROLL"),
                    repository.FindFeatureByName("VAT FILING"),
                    repository.FindFeatureByName("3RD PARTY API"),
                },
                ApplicationCostPerMonth = 24.00M,
                ApplicationCostPerAnnum = 240.00M,
                //CallsPackageCostPerMonth = 0M,
                SetupFee = repository.FindSetupFeeByName("NOT APPLICABLE"),
                MinimumContract = repository.FindMinimumContractByName("12 MONTHS"),
                PaymentFrequency = repository.FindPaymentFrequencyByName("MONTHLY"),
                PaymentOptions = new List<PaymentOption>()
                {
                    repository.FindPaymentOptionByName("CREDIT CARD"),
                    repository.FindPaymentOptionByName("DEBIT CARD"),
                },
                FreeTrialPeriod = repository.FindFreeTrialPeriodByName("YES"),
                Category = repository.FindCategoryByName("FINANCIAL"),
                Vendor = repository.FindVendorByName("ZOHO Books"),
                Description = repository.GetDescription(),
                AddDate = DateTime.Now,
                #region Ratings,Reviews,Case Studies,White Papers
                Ratings = new List<CloudApplicationRating>()
                {
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                },
                Reviews = new List<CloudApplicationReview>()
                {
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                },
                ThumbnailDocuments = new List<ThumbnailDocument>()
                {
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("WHITE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_WHITE_PAPER_FILEPATH+PDF_TEST_WHITE_PAPER_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_WHITE_PAPER_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_WHITE_PAPER_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_WHITE_PAPER_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("WHITE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_WHITE_PAPER_FILEPATH+PDF_TEST_WHITE_PAPER_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_WHITE_PAPER_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_WHITE_PAPER_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_WHITE_PAPER_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("WHITE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_WHITE_PAPER_FILEPATH+PDF_TEST_WHITE_PAPER_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_WHITE_PAPER_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_WHITE_PAPER_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_WHITE_PAPER_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("CASE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_CASE_STUDY_FILEPATH+PDF_TEST_CASE_STUDY_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_CASE_STUDY_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_CASE_STUDY_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_CASE_STUDY_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("CASE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_CASE_STUDY_FILEPATH+PDF_TEST_CASE_STUDY_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_CASE_STUDY_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_CASE_STUDY_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_CASE_STUDY_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("CASE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_CASE_STUDY_FILEPATH+PDF_TEST_CASE_STUDY_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_CASE_STUDY_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_CASE_STUDY_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_CASE_STUDY_FILENAME,
                    },
                },
                #endregion
            };

            repository.AddCloudApplication(ca);

            #endregion

            #region ICASHBOOK
            ca = new CloudApplication()
            {
                Brand = "iCashbook",
                ServiceName = "Standard",
                CompanyURL = "www.icashbook.com",
                OperatingSystems = new List<Domain.Models.OperatingSystem>()
                {
                    repository.FindOperatingSystemByName("WIN"),
                    repository.FindOperatingSystemByName("MAC"),
                    repository.FindOperatingSystemByName("IPAD")
                },
                //MobilePlatforms = repository.GetAllMobilePlatforms(),
                MobilePlatforms = new List<MobilePlatform>()
                {
                    repository.FindMobilePlatformByName("ANDROID"),
                    repository.FindMobilePlatformByName("IPHONE"),
                    repository.FindMobilePlatformByName("BB"),
                    repository.FindMobilePlatformByName("WIN")
                },
                Browsers = new List<Browser>()
                {
                    repository.FindBrowserByName("Internet Explorer 6"),
                    repository.FindBrowserByName("Internet Explorer 7"),
                    repository.FindBrowserByName("Internet Explorer 8"),
                    repository.FindBrowserByName("Internet Explorer 9"),
                    repository.FindBrowserByName("FIREFOX"),
                    repository.FindBrowserByName("CHROME"),
                    repository.FindBrowserByName("SAFARI"),
                },
                LicenceTypeMinimum = repository.FindLicenceTypeMinimumByName(1),
                LicenceTypeMaximum = repository.FindLicenceTypeMaximumByName(99),
                Languages = new List<Language>()
                {
                    repository.FindLanguageByName("ENGLISH")
                },
                SupportTypes = new List<SupportType>()
                {
                    //repository.FindSupportTypeByName("PHONE"),
                    repository.FindSupportTypeByName("ONLINE"),
                    //repository.FindSupportTypeByName("EMAIL")
                },
                SupportHours = repository.FindSupportHoursByName("24"),
                SupportDays = repository.FindSupportDaysByName("7"),
                SupportTerritories = new List<SupportTerritory>()
                {
                    repository.FindSupportTerritoryByName("US"),
                },
                VideoTrainingSupport = false,
                //MaximumMeetingAttendees = 50,
                //MaximumWebinarAttendees = 0,
                CloudApplicationFeatures = new List<CloudApplicationFeature>()
                {
                    repository.FindFeatureByName("UNLIMITED TRANSACTIONS"),
                    repository.FindFeatureByName("UNLIMITED CUSTOMER RECORDS"),
                    repository.FindFeatureByName("UNLIMITED SUPPLIER RECORDS"),
                    repository.FindFeatureByName("UNLIMITED PRODUCT & SERVICE DESCRIPTIONS"),
                    repository.FindFeatureByName("CREATE INVOICES"),
                    repository.FindFeatureByName("INVOICE-TO-PAYMENT MATCHING"),
                    //repository.FindFeatureByName("MULTI-CURRENCY INVOICING"),
                    repository.FindFeatureByName("RECORD BANK PAYMENTS"),
                    repository.FindFeatureByName("CUSTOMISED REPORTS"),
                    repository.FindFeatureByName("SSL SECURITY"),
                    //repository.FindFeatureByName("PROJECT ACCOUNTING"),
                    //repository.FindFeatureByName("EXTERNAL ACCESS (FOR ACCOUNTANTS)"),
                    repository.FindFeatureByName("MULTI-USER ACCESS"),
                    repository.FindFeatureByName("MS EXCEL COMPATIBLE"),
                    //repository.FindFeatureByName("FIXED ASSET DEPRECIATION TOOL"),
                    //repository.FindFeatureByName("CUSTOMER STATEMENTS"),
                    //repository.FindFeatureByName("PURCHASE ORDER SYSTEM"),
                    //repository.FindFeatureByName("PAYROLL"),
                    //repository.FindFeatureByName("VAT FILING"),
                    repository.FindFeatureByName("3RD PARTY API"),
                },
                ApplicationCostPerMonth = 19.50M,
                ApplicationCostPerAnnum = 0.00M,
                //CallsPackageCostPerMonth = 0M,
                SetupFee = repository.FindSetupFeeByName("NOT APPLICABLE"),
                MinimumContract = repository.FindMinimumContractByName("12 MONTHS"),
                PaymentFrequency = repository.FindPaymentFrequencyByName("MONTHLY"),
                PaymentOptions = new List<PaymentOption>()
                {
                    repository.FindPaymentOptionByName("CREDIT CARD"),
                    repository.FindPaymentOptionByName("DEBIT CARD"),
                },
                FreeTrialPeriod = repository.FindFreeTrialPeriodByName("YES"),
                Category = repository.FindCategoryByName("FINANCIAL"),
                Vendor = repository.FindVendorByName("iCashbook"),
                Description = repository.GetDescription(),
                AddDate = DateTime.Now,
                #region Ratings,Reviews,Case Studies,White Papers
                Ratings = new List<CloudApplicationRating>()
                {
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                },
                Reviews = new List<CloudApplicationReview>()
                {
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                },
                ThumbnailDocuments = new List<ThumbnailDocument>()
                {
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("WHITE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_WHITE_PAPER_FILEPATH+PDF_TEST_WHITE_PAPER_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_WHITE_PAPER_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_WHITE_PAPER_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_WHITE_PAPER_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("WHITE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_WHITE_PAPER_FILEPATH+PDF_TEST_WHITE_PAPER_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_WHITE_PAPER_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_WHITE_PAPER_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_WHITE_PAPER_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("WHITE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_WHITE_PAPER_FILEPATH+PDF_TEST_WHITE_PAPER_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_WHITE_PAPER_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_WHITE_PAPER_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_WHITE_PAPER_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("CASE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_CASE_STUDY_FILEPATH+PDF_TEST_CASE_STUDY_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_CASE_STUDY_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_CASE_STUDY_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_CASE_STUDY_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("CASE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_CASE_STUDY_FILEPATH+PDF_TEST_CASE_STUDY_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_CASE_STUDY_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_CASE_STUDY_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_CASE_STUDY_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("CASE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_CASE_STUDY_FILEPATH+PDF_TEST_CASE_STUDY_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_CASE_STUDY_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_CASE_STUDY_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_CASE_STUDY_FILENAME,
                    },
                },
                #endregion
            };

            repository.AddCloudApplication(ca);

            #endregion

            #region YENDO
            ca = new CloudApplication()
            {
                Brand = "Yendo",
                ServiceName = "Standard",
                CompanyURL = "www.yendo.com",
                OperatingSystems = new List<Domain.Models.OperatingSystem>()
                {
                    repository.FindOperatingSystemByName("WIN"),
                    repository.FindOperatingSystemByName("MAC"),
                    repository.FindOperatingSystemByName("IPAD")
                },
                //MobilePlatforms = repository.GetAllMobilePlatforms(),
                MobilePlatforms = new List<MobilePlatform>()
                {
                    repository.FindMobilePlatformByName("ANDROID"),
                    repository.FindMobilePlatformByName("IPHONE"),
                    repository.FindMobilePlatformByName("BB"),
                    repository.FindMobilePlatformByName("WIN")
                },
                Browsers = new List<Browser>()
                {
                    repository.FindBrowserByName("Internet Explorer 6"),
                    repository.FindBrowserByName("Internet Explorer 7"),
                    repository.FindBrowserByName("Internet Explorer 8"),
                    repository.FindBrowserByName("Internet Explorer 9"),
                    repository.FindBrowserByName("FIREFOX"),
                    repository.FindBrowserByName("CHROME"),
                    repository.FindBrowserByName("SAFARI"),
                },
                LicenceTypeMinimum = repository.FindLicenceTypeMinimumByName(1),
                LicenceTypeMaximum = repository.FindLicenceTypeMaximumByName(99),
                Languages = new List<Language>()
                {
                    repository.FindLanguageByName("ENGLISH")
                },
                SupportTypes = new List<SupportType>()
                {
                    repository.FindSupportTypeByName("FAQ"),
                    repository.FindSupportTypeByName("TROUBLESHOOT"),
                    //repository.FindSupportTypeByName("EMAIL")
                },
                SupportHours = repository.FindSupportHoursByName("24"),
                SupportDays = repository.FindSupportDaysByName("7"),
                SupportTerritories = new List<SupportTerritory>()
                {
                    repository.FindSupportTerritoryByName("UK"),
                },
                VideoTrainingSupport = false,
                //MaximumMeetingAttendees = 50,
                //MaximumWebinarAttendees = 0,
                CloudApplicationFeatures = new List<CloudApplicationFeature>()
                {
                    repository.FindFeatureByName("UNLIMITED TRANSACTIONS"),
                    repository.FindFeatureByName("UNLIMITED CUSTOMER RECORDS"),
                    repository.FindFeatureByName("UNLIMITED SUPPLIER RECORDS"),
                    repository.FindFeatureByName("UNLIMITED PRODUCT & SERVICE DESCRIPTIONS"),
                    repository.FindFeatureByName("CREATE INVOICES"),
                    repository.FindFeatureByName("INVOICE-TO-PAYMENT MATCHING"),
                    repository.FindFeatureByName("MULTI-CURRENCY INVOICING"),
                    repository.FindFeatureByName("RECORD BANK PAYMENTS"),
                    repository.FindFeatureByName("CUSTOMISED REPORTS"),
                    repository.FindFeatureByName("SSL SECURITY"),
                    repository.FindFeatureByName("PROJECT ACCOUNTING"),
                    repository.FindFeatureByName("EXTERNAL ACCESS (FOR ACCOUNTANTS)"),
                    repository.FindFeatureByName("MULTI-USER ACCESS"),
                    repository.FindFeatureByName("MS EXCEL COMPATIBLE"),
                    repository.FindFeatureByName("FIXED ASSET DEPRECIATION TOOL"),
                    repository.FindFeatureByName("CUSTOMER STATEMENTS"),
                    repository.FindFeatureByName("PURCHASE ORDER SYSTEM"),
                    repository.FindFeatureByName("PAYROLL"),
                    repository.FindFeatureByName("VAT FILING"),
                    repository.FindFeatureByName("3RD PARTY API"),
                },
                ApplicationCostPerMonth = 26.00M,
                ApplicationCostPerAnnum = 0.00M,
                //CallsPackageCostPerMonth = 0M,
                SetupFee = repository.FindSetupFeeByName("NOT APPLICABLE"),
                MinimumContract = repository.FindMinimumContractByName("12 MONTHS"),
                PaymentFrequency = repository.FindPaymentFrequencyByName("MONTHLY"),
                PaymentOptions = new List<PaymentOption>()
                {
                    repository.FindPaymentOptionByName("CREDIT CARD"),
                    repository.FindPaymentOptionByName("DEBIT CARD"),
                },
                FreeTrialPeriod = repository.FindFreeTrialPeriodByName("YES"),
                Category = repository.FindCategoryByName("FINANCIAL"),
                Vendor = repository.FindVendorByName("Yendo"),
                Description = repository.GetDescription(),
                AddDate = DateTime.Now,
                #region Ratings,Reviews,Case Studies,White Papers
                Ratings = new List<CloudApplicationRating>()
                {
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                },
                Reviews = new List<CloudApplicationReview>()
                {
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                },
                ThumbnailDocuments = new List<ThumbnailDocument>()
                {
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("WHITE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_WHITE_PAPER_FILEPATH+PDF_TEST_WHITE_PAPER_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_WHITE_PAPER_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_WHITE_PAPER_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_WHITE_PAPER_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("WHITE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_WHITE_PAPER_FILEPATH+PDF_TEST_WHITE_PAPER_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_WHITE_PAPER_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_WHITE_PAPER_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_WHITE_PAPER_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("WHITE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_WHITE_PAPER_FILEPATH+PDF_TEST_WHITE_PAPER_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_WHITE_PAPER_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_WHITE_PAPER_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_WHITE_PAPER_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("CASE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_CASE_STUDY_FILEPATH+PDF_TEST_CASE_STUDY_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_CASE_STUDY_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_CASE_STUDY_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_CASE_STUDY_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("CASE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_CASE_STUDY_FILEPATH+PDF_TEST_CASE_STUDY_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_CASE_STUDY_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_CASE_STUDY_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_CASE_STUDY_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("CASE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_CASE_STUDY_FILEPATH+PDF_TEST_CASE_STUDY_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_CASE_STUDY_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_CASE_STUDY_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_CASE_STUDY_FILENAME,
                    },
                },
                #endregion
            };

            repository.AddCloudApplication(ca);

            #endregion

            #region INTUIT
            ca = new CloudApplication()
            {
                Brand = "intuit",
                ServiceName = "Online Essentials",
                CompanyURL = "www.intuit.com",
                OperatingSystems = new List<Domain.Models.OperatingSystem>()
                {
                    repository.FindOperatingSystemByName("WIN"),
                    repository.FindOperatingSystemByName("MAC"),
                    repository.FindOperatingSystemByName("IPAD")
                },
                //MobilePlatforms = repository.GetAllMobilePlatforms(),
                MobilePlatforms = new List<MobilePlatform>()
                {
                    repository.FindMobilePlatformByName("ANDROID"),
                    repository.FindMobilePlatformByName("IPHONE"),
                    repository.FindMobilePlatformByName("BB"),
                    repository.FindMobilePlatformByName("WIN")
                },
                Browsers = new List<Browser>()
                {
                    repository.FindBrowserByName("Internet Explorer 6"),
                    repository.FindBrowserByName("Internet Explorer 7"),
                    repository.FindBrowserByName("Internet Explorer 8"),
                    repository.FindBrowserByName("Internet Explorer 9"),
                    repository.FindBrowserByName("FIREFOX"),
                    repository.FindBrowserByName("CHROME"),
                    repository.FindBrowserByName("SAFARI"),
                },
                LicenceTypeMinimum = repository.FindLicenceTypeMinimumByName(1),
                LicenceTypeMaximum = repository.FindLicenceTypeMaximumByName(99),
                Languages = new List<Language>()
                {
                    repository.FindLanguageByName("ENGLISH")
                },
                SupportTypes = new List<SupportType>()
                {
                    //repository.FindSupportTypeByName("PHONE"),
                    repository.FindSupportTypeByName("ONLINE"),
                    repository.FindSupportTypeByName("COMMUNITY")
                },
                SupportHours = repository.FindSupportHoursByName("NOT APPLICABLE"),
                SupportDays = repository.FindSupportDaysByName("NOT APPLICABLE"),
                SupportTerritories = new List<SupportTerritory>()
                {
                    repository.FindSupportTerritoryByName("UK"),
                },
                VideoTrainingSupport = false,
                //MaximumMeetingAttendees = 50,
                //MaximumWebinarAttendees = 0,
                CloudApplicationFeatures = new List<CloudApplicationFeature>()
                {
                    repository.FindFeatureByName("UNLIMITED TRANSACTIONS"),
                    repository.FindFeatureByName("UNLIMITED CUSTOMER RECORDS"),
                    repository.FindFeatureByName("UNLIMITED SUPPLIER RECORDS"),
                    repository.FindFeatureByName("UNLIMITED PRODUCT & SERVICE DESCRIPTIONS"),
                    repository.FindFeatureByName("CREATE INVOICES"),
                    repository.FindFeatureByName("INVOICE-TO-PAYMENT MATCHING"),
                    repository.FindFeatureByName("MULTI-CURRENCY INVOICING"),
                    repository.FindFeatureByName("RECORD BANK PAYMENTS"),
                    repository.FindFeatureByName("CUSTOMISED REPORTS"),
                    repository.FindFeatureByName("SSL SECURITY"),
                    repository.FindFeatureByName("PROJECT ACCOUNTING"),
                    repository.FindFeatureByName("EXTERNAL ACCESS (FOR ACCOUNTANTS)"),
                    repository.FindFeatureByName("MULTI-USER ACCESS"),
                    repository.FindFeatureByName("MS EXCEL COMPATIBLE"),
                    repository.FindFeatureByName("FIXED ASSET DEPRECIATION TOOL"),
                    repository.FindFeatureByName("CUSTOMER STATEMENTS"),
                    repository.FindFeatureByName("PURCHASE ORDER SYSTEM"),
                    repository.FindFeatureByName("PAYROLL"),
                    repository.FindFeatureByName("VAT FILING"),
                    repository.FindFeatureByName("3RD PARTY API"),
                },
                ApplicationCostPerMonth = 24.99M,
                ApplicationCostPerAnnum = 0.00M,
                //CallsPackageCostPerMonth = 0M,
                SetupFee = repository.FindSetupFeeByName("NOT APPLICABLE"),
                MinimumContract = repository.FindMinimumContractByName("12 MONTHS"),
                PaymentFrequency = repository.FindPaymentFrequencyByName("MONTHLY"),
                PaymentOptions = new List<PaymentOption>()
                {
                    repository.FindPaymentOptionByName("CREDIT CARD"),
                    repository.FindPaymentOptionByName("DEBIT CARD"),
                },
                FreeTrialPeriod = repository.FindFreeTrialPeriodByName("YES"),
                Category = repository.FindCategoryByName("FINANCIAL"),
                Vendor = repository.FindVendorByName("intuit"),
                Description = repository.GetDescription(),
                AddDate = DateTime.Now,
                #region Ratings,Reviews,Case Studies,White Papers
                Ratings = new List<CloudApplicationRating>()
                {
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                    new CloudApplicationRating()
                    {
                        CloudApplicationRatingText = repository.GetDescription(),
                        CloudApplicationRatingReviewerCompany = repository.GetDescription(3),
                        CloudApplicationRatingReviewerName = repository.GetDescription(3),
                        CloudApplicationRatingReviewerTitle = repository.GetDescription(3),
                    },
                },
                Reviews = new List<CloudApplicationReview>()
                {
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                    new CloudApplicationReview()
                    {
                        CloudApplicationReviewText = repository.GetDescription(),
                        CloudApplicationReviewDate = DateTime.Now,
                        CloudApplicationReviewPublisherName = "Wilson Miller Business Edition",
                        CloudApplicationReviewHeadline = "CloudCompare buys Microsoft after shares rocket 173% on launch of comparison website",
                    },
                },
                ThumbnailDocuments = new List<ThumbnailDocument>()
                {
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("WHITE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_WHITE_PAPER_FILEPATH+PDF_TEST_WHITE_PAPER_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_WHITE_PAPER_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_WHITE_PAPER_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_WHITE_PAPER_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("WHITE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_WHITE_PAPER_FILEPATH+PDF_TEST_WHITE_PAPER_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_WHITE_PAPER_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_WHITE_PAPER_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_WHITE_PAPER_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("WHITE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_WHITE_PAPER_FILEPATH+PDF_TEST_WHITE_PAPER_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_WHITE_PAPER_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_WHITE_PAPER_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_WHITE_PAPER_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("CASE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_CASE_STUDY_FILEPATH+PDF_TEST_CASE_STUDY_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_CASE_STUDY_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_CASE_STUDY_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_CASE_STUDY_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("CASE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_CASE_STUDY_FILEPATH+PDF_TEST_CASE_STUDY_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_CASE_STUDY_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_CASE_STUDY_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_CASE_STUDY_FILENAME,
                    },
                    new ThumbnailDocument()
                    {
                        ThumbnailDocumentTitle = repository.GetDescription(4),
                        ThumbnailDocumentType = repository.FindThumbnailDocumentTypeByName("CASE"),
                        ThumbnailImage = GhostscriptWrapper.GetPageThumb(PDF_TEST_CASE_STUDY_FILEPATH+PDF_TEST_CASE_STUDY_FILENAME,OUTPUT_FILE_LOCATION + Guid.NewGuid().ToString() + ".jpg", new Random().Next(1,PDF_TEST_CASE_STUDY_PAGE_COUNT), IMAGE_FILE_WIDTH, IMAGE_FILE_HEIGHT),
                        ThumbnailDocumentURL = "http://www.bbc.co.uk",
                        ThumbnailDocumentPhysicalFilePath = PDF_TEST_CASE_STUDY_FILEPATH,
                        ThumbnailDocumentFileName = PDF_TEST_CASE_STUDY_FILENAME,
                    },
                },
                #endregion
            };

            repository.AddCloudApplication(ca);

            #endregion

            #endregion

            #endregion

            #region ADVERTISING IMAGES
            AdvertisingImage ai;
            ai = new AdvertisingImage()
            {
                AdvertisingImagePhysicalFilePath = MPU_FILEPATH,
                AdvertisingImageFileName = MPU_FILE1,
                AdvertisingImageBytes = GetImageAsBytes(MPU_FILEPATH + MPU_FILE1),
                AdvertisingImageType = repository.FindAdvertisingImageTypeByName("MPU"),
            };
            repository.AddAdvertisingImage(ai);
            ai = new AdvertisingImage()
            {
                AdvertisingImagePhysicalFilePath = MPU_FILEPATH,
                AdvertisingImageFileName = MPU_FILE2,
                AdvertisingImageBytes = GetImageAsBytes(MPU_FILEPATH + MPU_FILE2),
                AdvertisingImageType = repository.FindAdvertisingImageTypeByName("MPU"),
            };
            repository.AddAdvertisingImage(ai);
            ai = new AdvertisingImage()
            {
                AdvertisingImagePhysicalFilePath = MPU_FILEPATH,
                AdvertisingImageFileName = MPU_FILE3,
                AdvertisingImageBytes = GetImageAsBytes(MPU_FILEPATH + MPU_FILE3),
                AdvertisingImageType = repository.FindAdvertisingImageTypeByName("MPU"),
            };
            repository.AddAdvertisingImage(ai);
            ai = new AdvertisingImage()
            {
                AdvertisingImagePhysicalFilePath = MPU_FILEPATH,
                AdvertisingImageFileName = MPU_FILE4,
                AdvertisingImageBytes = GetImageAsBytes(MPU_FILEPATH + MPU_FILE4),
                AdvertisingImageType = repository.FindAdvertisingImageTypeByName("MPU"),
            };
            repository.AddAdvertisingImage(ai);
            ai = new AdvertisingImage()
            {
                AdvertisingImagePhysicalFilePath = MPU_FILEPATH,
                AdvertisingImageFileName = MPU_FILE5,
                AdvertisingImageBytes = GetImageAsBytes(MPU_FILEPATH + MPU_FILE5),
                AdvertisingImageType = repository.FindAdvertisingImageTypeByName("MPU"),
            };
            repository.AddAdvertisingImage(ai);
            ai = new AdvertisingImage()
            {
                AdvertisingImagePhysicalFilePath = MPU_FILEPATH,
                AdvertisingImageFileName = MPU_FILE6,
                AdvertisingImageBytes = GetImageAsBytes(MPU_FILEPATH + MPU_FILE6),
                AdvertisingImageType = repository.FindAdvertisingImageTypeByName("MPU"),
            };
            repository.AddAdvertisingImage(ai);
            ai = new AdvertisingImage()
            {
                AdvertisingImagePhysicalFilePath = MPU_FILEPATH,
                AdvertisingImageFileName = MPU_FILE7,
                AdvertisingImageBytes = GetImageAsBytes(MPU_FILEPATH + MPU_FILE7),
                AdvertisingImageType = repository.FindAdvertisingImageTypeByName("MPU"),
            };
            repository.AddAdvertisingImage(ai);
            ai = new AdvertisingImage()
            {
                AdvertisingImagePhysicalFilePath = MPU_FILEPATH,
                AdvertisingImageFileName = MPU_FILE8,
                AdvertisingImageBytes = GetImageAsBytes(MPU_FILEPATH + MPU_FILE8),
                AdvertisingImageType = repository.FindAdvertisingImageTypeByName("MPU"),
            };
            repository.AddAdvertisingImage(ai);
            ai = new AdvertisingImage()
            {
                AdvertisingImagePhysicalFilePath = MPU_FILEPATH,
                AdvertisingImageFileName = MPU_FILE9,
                AdvertisingImageBytes = GetImageAsBytes(MPU_FILEPATH + MPU_FILE9),
                AdvertisingImageType = repository.FindAdvertisingImageTypeByName("MPU"),
            };
            repository.AddAdvertisingImage(ai);
            ai = new AdvertisingImage()
            {
                AdvertisingImagePhysicalFilePath = MPU_FILEPATH,
                AdvertisingImageFileName = MPU_FILE10,
                AdvertisingImageBytes = GetImageAsBytes(MPU_FILEPATH + MPU_FILE10),
                AdvertisingImageType = repository.FindAdvertisingImageTypeByName("MPU"),
            };
            repository.AddAdvertisingImage(ai);
            ai = new AdvertisingImage()
            {
                AdvertisingImagePhysicalFilePath = MPU_FILEPATH,
                AdvertisingImageFileName = MPU_FILE11,
                AdvertisingImageBytes = GetImageAsBytes(MPU_FILEPATH + MPU_FILE11),
                AdvertisingImageType = repository.FindAdvertisingImageTypeByName("MPU"),
            };
            repository.AddAdvertisingImage(ai);

            ai = new AdvertisingImage()
            {
                AdvertisingImagePhysicalFilePath = SKYSCRAPER_FILEPATH,
                AdvertisingImageFileName = SKYSCRAPER_FILE1,
                AdvertisingImageBytes = GetImageAsBytes(SKYSCRAPER_FILEPATH + SKYSCRAPER_FILE1),
                AdvertisingImageType = repository.FindAdvertisingImageTypeByName("SKYSCRAPER"),
            };
            repository.AddAdvertisingImage(ai);

            ai = new AdvertisingImage()
            {
                AdvertisingImagePhysicalFilePath = SKYSCRAPER_FILEPATH,
                AdvertisingImageFileName = SKYSCRAPER_FILE2,
                AdvertisingImageBytes = GetImageAsBytes(SKYSCRAPER_FILEPATH + SKYSCRAPER_FILE2),
                AdvertisingImageType = repository.FindAdvertisingImageTypeByName("SKYSCRAPER"),
            };
            repository.AddAdvertisingImage(ai);

            ai = new AdvertisingImage()
            {
                AdvertisingImagePhysicalFilePath = SKYSCRAPER_FILEPATH,
                AdvertisingImageFileName = SKYSCRAPER_FILE3,
                AdvertisingImageBytes = GetImageAsBytes(SKYSCRAPER_FILEPATH + SKYSCRAPER_FILE3),
                AdvertisingImageType = repository.FindAdvertisingImageTypeByName("SKYSCRAPER"),
            };
            repository.AddAdvertisingImage(ai);

            ai = new AdvertisingImage()
            {
                AdvertisingImagePhysicalFilePath = SKYSCRAPER_FILEPATH,
                AdvertisingImageFileName = SKYSCRAPER_FILE4,
                AdvertisingImageBytes = GetImageAsBytes(SKYSCRAPER_FILEPATH + SKYSCRAPER_FILE4),
                AdvertisingImageType = repository.FindAdvertisingImageTypeByName("SKYSCRAPER"),
            };
            repository.AddAdvertisingImage(ai);

            #endregion

            #region TAGS
            Tag t;

            #region PRIMARY

            #region WEB CONFERENCING PRIMARY
            t = new Tag()
            {
                TagName = "Conferences",
                Category = repository.FindCategoryByName("WEB CONFERENCING"),
                TagType = repository.FindTagTypeByName("PRIMARY"),
            };
            repository.AddTag(t);

            t = new Tag()
            {
                TagName = "Webinar",
                Category = repository.FindCategoryByName("WEB CONFERENCING"),
                TagType = repository.FindTagTypeByName("PRIMARY"),
            };
            repository.AddTag(t);
            t = new Tag()
            {
                TagName = "Meetings",
                Category = repository.FindCategoryByName("WEB CONFERENCING"),
                TagType = repository.FindTagTypeByName("PRIMARY"),
            };
            repository.AddTag(t);

            t = new Tag()
            {
                TagName = "Online",
                Category = repository.FindCategoryByName("WEB CONFERENCING"),
                TagType = repository.FindTagTypeByName("PRIMARY"),
            };
            repository.AddTag(t);
            t = new Tag()
            {
                TagName = "Business",
                Category = repository.FindCategoryByName("WEB CONFERENCING"),
                TagType = repository.FindTagTypeByName("PRIMARY"),
            };
            repository.AddTag(t);
            t = new Tag()
            {
                TagName = "Audio",
                Category = repository.FindCategoryByName("WEB CONFERENCING"),
                TagType = repository.FindTagTypeByName("PRIMARY"),
            };
            repository.AddTag(t);
            t = new Tag()
            {
                TagName = "Presentations",
                Category = repository.FindCategoryByName("WEB CONFERENCING"),
                TagType = repository.FindTagTypeByName("PRIMARY"),
            };
            repository.AddTag(t);
            #endregion

            #region VOICE PRIMARY
            t = new Tag()
            {
                TagName = "Communications",
                Category = repository.FindCategoryByName("VOICE"),
                TagType = repository.FindTagTypeByName("PRIMARY"),
            };
            repository.AddTag(t);

            t = new Tag()
            {
                TagName = "Voice",
                Category = repository.FindCategoryByName("VOICE"),
                TagType = repository.FindTagTypeByName("PRIMARY"),
            };
            repository.AddTag(t);
            t = new Tag()
            {
                TagName = "Call Center",
                Category = repository.FindCategoryByName("VOICE"),
                TagType = repository.FindTagTypeByName("PRIMARY"),
            };
            repository.AddTag(t);

            t = new Tag()
            {
                TagName = "Telephone",
                Category = repository.FindCategoryByName("VOICE"),
                TagType = repository.FindTagTypeByName("PRIMARY"),
            };
            repository.AddTag(t);
            t = new Tag()
            {
                TagName = "PBX",
                Category = repository.FindCategoryByName("VOICE"),
                TagType = repository.FindTagTypeByName("PRIMARY"),
            };
            repository.AddTag(t);
            t = new Tag()
            {
                TagName = "VoIP",
                Category = repository.FindCategoryByName("VOICE"),
                TagType = repository.FindTagTypeByName("PRIMARY"),
            };
            repository.AddTag(t);
            t = new Tag()
            {
                TagName = "Cheap",
                Category = repository.FindCategoryByName("VOICE"),
                TagType = repository.FindTagTypeByName("PRIMARY"),
            };
            repository.AddTag(t);
            #endregion

            #region STORAGE AND BACKUP PRIMARY
            t = new Tag()
            {
                TagName = "Data",
                Category = repository.FindCategoryByName("STORAGE AND BACKUP"),
                TagType = repository.FindTagTypeByName("PRIMARY"),
            };
            repository.AddTag(t);

            t = new Tag()
            {
                TagName = "Back Up",
                Category = repository.FindCategoryByName("STORAGE AND BACKUP"),
                TagType = repository.FindTagTypeByName("PRIMARY"),
            };
            repository.AddTag(t);
            t = new Tag()
            {
                TagName = "USB",
                Category = repository.FindCategoryByName("STORAGE AND BACKUP"),
                TagType = repository.FindTagTypeByName("PRIMARY"),
            };
            repository.AddTag(t);

            t = new Tag()
            {
                TagName = "Drive",
                Category = repository.FindCategoryByName("STORAGE AND BACKUP"),
                TagType = repository.FindTagTypeByName("PRIMARY"),
            };
            repository.AddTag(t);
            t = new Tag()
            {
                TagName = "Storage",
                Category = repository.FindCategoryByName("STORAGE AND BACKUP"),
                TagType = repository.FindTagTypeByName("PRIMARY"),
            };
            repository.AddTag(t);
            t = new Tag()
            {
                TagName = "Sync",
                Category = repository.FindCategoryByName("STORAGE AND BACKUP"),
                TagType = repository.FindTagTypeByName("PRIMARY"),
            };
            repository.AddTag(t);
            t = new Tag()
            {
                TagName = "File",
                Category = repository.FindCategoryByName("STORAGE AND BACKUP"),
                TagType = repository.FindTagTypeByName("PRIMARY"),
            };
            repository.AddTag(t);
            #endregion

            #region SECURITY PRIMARY
            t = new Tag()
            {
                TagName = "Anti Virus",
                Category = repository.FindCategoryByName("SECURITY"),
                TagType = repository.FindTagTypeByName("PRIMARY"),
            };
            repository.AddTag(t);

            t = new Tag()
            {
                TagName = "Protect",
                Category = repository.FindCategoryByName("SECURITY"),
                TagType = repository.FindTagTypeByName("PRIMARY"),
            };
            repository.AddTag(t);
            t = new Tag()
            {
                TagName = "Safe",
                Category = repository.FindCategoryByName("SECURITY"),
                TagType = repository.FindTagTypeByName("PRIMARY"),
            };
            repository.AddTag(t);

            t = new Tag()
            {
                TagName = "Malware",
                Category = repository.FindCategoryByName("SECURITY"),
                TagType = repository.FindTagTypeByName("PRIMARY"),
            };
            repository.AddTag(t);
            t = new Tag()
            {
                TagName = "Spam",
                Category = repository.FindCategoryByName("SECURITY"),
                TagType = repository.FindTagTypeByName("PRIMARY"),
            };
            repository.AddTag(t);
            t = new Tag()
            {
                TagName = "Encryption",
                Category = repository.FindCategoryByName("SECURITY"),
                TagType = repository.FindTagTypeByName("PRIMARY"),
            };
            repository.AddTag(t);
            #endregion

            #region OFFICE PRIMARY
            t = new Tag()
            {
                TagName = "Management",
                Category = repository.FindCategoryByName("OFFICE"),
                TagType = repository.FindTagTypeByName("PRIMARY"),
            };
            repository.AddTag(t);

            t = new Tag()
            {
                TagName = "Microsoft",
                Category = repository.FindCategoryByName("OFFICE"),
                TagType = repository.FindTagTypeByName("PRIMARY"),
            };
            repository.AddTag(t);
            t = new Tag()
            {
                TagName = "Suite",
                Category = repository.FindCategoryByName("OFFICE"),
                TagType = repository.FindTagTypeByName("PRIMARY"),
            };
            repository.AddTag(t);

            t = new Tag()
            {
                TagName = "Presentations",
                Category = repository.FindCategoryByName("OFFICE"),
                TagType = repository.FindTagTypeByName("PRIMARY"),
            };
            repository.AddTag(t);
            t = new Tag()
            {
                TagName = "Spreadsheet",
                Category = repository.FindCategoryByName("OFFICE"),
                TagType = repository.FindTagTypeByName("PRIMARY"),
            };
            repository.AddTag(t);
            t = new Tag()
            {
                TagName = "Documents",
                Category = repository.FindCategoryByName("OFFICE"),
                TagType = repository.FindTagTypeByName("PRIMARY"),
            };
            repository.AddTag(t);
            #endregion

            #region CUSTOMER MANAGEMENT PRIMARY
            t = new Tag()
            {
                TagName = "CRM",
                Category = repository.FindCategoryByName("CUSTOMER MANAGEMENT"),
                TagType = repository.FindTagTypeByName("PRIMARY"),
            };
            repository.AddTag(t);

            t = new Tag()
            {
                TagName = "Relationship",
                Category = repository.FindCategoryByName("CUSTOMER MANAGEMENT"),
                TagType = repository.FindTagTypeByName("PRIMARY"),
            };
            repository.AddTag(t);
            t = new Tag()
            {
                TagName = "Software",
                Category = repository.FindCategoryByName("CUSTOMER MANAGEMENT"),
                TagType = repository.FindTagTypeByName("PRIMARY"),
            };
            repository.AddTag(t);

            t = new Tag()
            {
                TagName = "Businesses",
                Category = repository.FindCategoryByName("CUSTOMER MANAGEMENT"),
                TagType = repository.FindTagTypeByName("PRIMARY"),
            };
            repository.AddTag(t);
            t = new Tag()
            {
                TagName = "Sales",
                Category = repository.FindCategoryByName("CUSTOMER MANAGEMENT"),
                TagType = repository.FindTagTypeByName("PRIMARY"),
            };
            repository.AddTag(t);
            t = new Tag()
            {
                TagName = "Database",
                Category = repository.FindCategoryByName("CUSTOMER MANAGEMENT"),
                TagType = repository.FindTagTypeByName("PRIMARY"),
            };
            repository.AddTag(t);
            #endregion

            #region EMAIL PRIMARY
            t = new Tag()
            {
                TagName = "Mail",
                Category = repository.FindCategoryByName("EMAIL"),
                TagType = repository.FindTagTypeByName("PRIMARY"),
            };
            repository.AddTag(t);

            t = new Tag()
            {
                TagName = "Contact",
                Category = repository.FindCategoryByName("EMAIL"),
                TagType = repository.FindTagTypeByName("PRIMARY"),
            };
            repository.AddTag(t);
            t = new Tag()
            {
                TagName = "Messages",
                Category = repository.FindCategoryByName("EMAIL"),
                TagType = repository.FindTagTypeByName("PRIMARY"),
            };
            repository.AddTag(t);

            t = new Tag()
            {
                TagName = "Outlook",
                Category = repository.FindCategoryByName("EMAIL"),
                TagType = repository.FindTagTypeByName("PRIMARY"),
            };
            repository.AddTag(t);
            t = new Tag()
            {
                TagName = "Exchange",
                Category = repository.FindCategoryByName("EMAIL"),
                TagType = repository.FindTagTypeByName("PRIMARY"),
            };
            repository.AddTag(t);
            t = new Tag()
            {
                TagName = "Webmail",
                Category = repository.FindCategoryByName("EMAIL"),
                TagType = repository.FindTagTypeByName("PRIMARY"),
            };
            repository.AddTag(t);
            #endregion

            #endregion

            #region SECONDARY

            #region WEB CONFERENCING SECONDARY
            t = new Tag()
            {
                TagName = "Teleconferencing",
                Category = repository.FindCategoryByName("WEB CONFERENCING"),
                TagType = repository.FindTagTypeByName("SECONDARY"),
            };
            repository.AddTag(t);

            t = new Tag()
            {
                TagName = "Chat",
                Category = repository.FindCategoryByName("WEB CONFERENCING"),
                TagType = repository.FindTagTypeByName("SECONDARY"),
            };
            repository.AddTag(t);
            t = new Tag()
            {
                TagName = "Video",
                Category = repository.FindCategoryByName("WEB CONFERENCING"),
                TagType = repository.FindTagTypeByName("SECONDARY"),
            };
            repository.AddTag(t);

            t = new Tag()
            {
                TagName = "Events",
                Category = repository.FindCategoryByName("WEB CONFERENCING"),
                TagType = repository.FindTagTypeByName("SECONDARY"),
            };
            repository.AddTag(t);
            t = new Tag()
            {
                TagName = "Sharing",
                Category = repository.FindCategoryByName("WEB CONFERENCING"),
                TagType = repository.FindTagTypeByName("SECONDARY"),
            };
            repository.AddTag(t);
            t = new Tag()
            {
                TagName = "Collaboration",
                Category = repository.FindCategoryByName("WEB CONFERENCING"),
                TagType = repository.FindTagTypeByName("SECONDARY"),
            };
            repository.AddTag(t);
            #endregion

            #region VOICE SECONDARY
            t = new Tag()
            {
                TagName = "Sound",
                Category = repository.FindCategoryByName("VOICE"),
                TagType = repository.FindTagTypeByName("SECONDARY"),
            };
            repository.AddTag(t);

            t = new Tag()
            {
                TagName = "IVR",
                Category = repository.FindCategoryByName("VOICE"),
                TagType = repository.FindTagTypeByName("SECONDARY"),
            };
            repository.AddTag(t);
            t = new Tag()
            {
                TagName = "Centrex",
                Category = repository.FindCategoryByName("VOICE"),
                TagType = repository.FindTagTypeByName("SECONDARY"),
            };
            repository.AddTag(t);

            t = new Tag()
            {
                TagName = "Calling",
                Category = repository.FindCategoryByName("VOICE"),
                TagType = repository.FindTagTypeByName("SECONDARY"),
            };
            repository.AddTag(t);
            t = new Tag()
            {
                TagName = "Headsets",
                Category = repository.FindCategoryByName("VOICE"),
                TagType = repository.FindTagTypeByName("SECONDARY"),
            };
            repository.AddTag(t);
            t = new Tag()
            {
                TagName = "Recorder",
                Category = repository.FindCategoryByName("VOICE"),
                TagType = repository.FindTagTypeByName("SECONDARY"),
            };
            repository.AddTag(t);
            #endregion

            #region STORAGE AND BACKUP SECONDARY
            t = new Tag()
            {
                TagName = "Computers",
                Category = repository.FindCategoryByName("STORAGE AND BACKUP"),
                TagType = repository.FindTagTypeByName("SECONDARY"),
            };
            repository.AddTag(t);

            t = new Tag()
            {
                TagName = "Portable",
                Category = repository.FindCategoryByName("STORAGE AND BACKUP"),
                TagType = repository.FindTagTypeByName("SECONDARY"),
            };
            repository.AddTag(t);
            t = new Tag()
            {
                TagName = "Container",
                Category = repository.FindCategoryByName("STORAGE AND BACKUP"),
                TagType = repository.FindTagTypeByName("SECONDARY"),
            };
            repository.AddTag(t);

            t = new Tag()
            {
                TagName = "Folders",
                Category = repository.FindCategoryByName("STORAGE AND BACKUP"),
                TagType = repository.FindTagTypeByName("SECONDARY"),
            };
            repository.AddTag(t);
            t = new Tag()
            {
                TagName = "Copy",
                Category = repository.FindCategoryByName("STORAGE AND BACKUP"),
                TagType = repository.FindTagTypeByName("SECONDARY"),
            };
            repository.AddTag(t);
            t = new Tag()
            {
                TagName = "DR",
                Category = repository.FindCategoryByName("STORAGE AND BACKUP"),
                TagType = repository.FindTagTypeByName("SECONDARY"),
            };
            repository.AddTag(t);
            #endregion

            #region SECURITY SECONDARY
            t = new Tag()
            {
                TagName = "Firewall",
                Category = repository.FindCategoryByName("SECURITY"),
                TagType = repository.FindTagTypeByName("SECONDARY"),
            };
            repository.AddTag(t);

            t = new Tag()
            {
                TagName = "Threat",
                Category = repository.FindCategoryByName("SECURITY"),
                TagType = repository.FindTagTypeByName("SECONDARY"),
            };
            repository.AddTag(t);
            t = new Tag()
            {
                TagName = "Protection",
                Category = repository.FindCategoryByName("SECURITY"),
                TagType = repository.FindTagTypeByName("SECONDARY"),
            };
            repository.AddTag(t);

            t = new Tag()
            {
                TagName = "Data",
                Category = repository.FindCategoryByName("SECURITY"),
                TagType = repository.FindTagTypeByName("SECONDARY"),
            };
            repository.AddTag(t);
            t = new Tag()
            {
                TagName = "Attack",
                Category = repository.FindCategoryByName("SECURITY"),
                TagType = repository.FindTagTypeByName("SECONDARY"),
            };
            repository.AddTag(t);
            t = new Tag()
            {
                TagName = "Hacking",
                Category = repository.FindCategoryByName("SECURITY"),
                TagType = repository.FindTagTypeByName("SECONDARY"),
            };
            repository.AddTag(t);
            #endregion

            #region OFFICE SECONDARY
            t = new Tag()
            {
                TagName = "Windows",
                Category = repository.FindCategoryByName("OFFICE"),
                TagType = repository.FindTagTypeByName("SECONDARY"),
            };
            repository.AddTag(t);

            t = new Tag()
            {
                TagName = "Application",
                Category = repository.FindCategoryByName("OFFICE"),
                TagType = repository.FindTagTypeByName("SECONDARY"),
            };
            repository.AddTag(t);
            t = new Tag()
            {
                TagName = "Downloads",
                Category = repository.FindCategoryByName("OFFICE"),
                TagType = repository.FindTagTypeByName("SECONDARY"),
            };
            repository.AddTag(t);

            t = new Tag()
            {
                TagName = "Word",
                Category = repository.FindCategoryByName("OFFICE"),
                TagType = repository.FindTagTypeByName("SECONDARY"),
            };
            repository.AddTag(t);
            t = new Tag()
            {
                TagName = "Excel",
                Category = repository.FindCategoryByName("OFFICE"),
                TagType = repository.FindTagTypeByName("SECONDARY"),
            };
            repository.AddTag(t);
            t = new Tag()
            {
                TagName = "PowerPoint",
                Category = repository.FindCategoryByName("OFFICE"),
                TagType = repository.FindTagTypeByName("SECONDARY"),
            };
            repository.AddTag(t);
            #endregion

            #region CUSTOMER MANAGEMENT SECONDARY
            t = new Tag()
            {
                TagName = "Contact",
                Category = repository.FindCategoryByName("CUSTOMER MANAGEMENT"),
                TagType = repository.FindTagTypeByName("SECONDARY"),
            };
            repository.AddTag(t);

            t = new Tag()
            {
                TagName = "Support",
                Category = repository.FindCategoryByName("CUSTOMER MANAGEMENT"),
                TagType = repository.FindTagTypeByName("SECONDARY"),
            };
            repository.AddTag(t);
            t = new Tag()
            {
                TagName = "Reseach",
                Category = repository.FindCategoryByName("CUSTOMER MANAGEMENT"),
                TagType = repository.FindTagTypeByName("SECONDARY"),
            };
            repository.AddTag(t);

            t = new Tag()
            {
                TagName = "Leads",
                Category = repository.FindCategoryByName("CUSTOMER MANAGEMENT"),
                TagType = repository.FindTagTypeByName("SECONDARY"),
            };
            repository.AddTag(t);
            t = new Tag()
            {
                TagName = "Marketing",
                Category = repository.FindCategoryByName("CUSTOMER MANAGEMENT"),
                TagType = repository.FindTagTypeByName("SECONDARY"),
            };
            repository.AddTag(t);
            t = new Tag()
            {
                TagName = "Client",
                Category = repository.FindCategoryByName("CUSTOMER MANAGEMENT"),
                TagType = repository.FindTagTypeByName("SECONDARY"),
            };
            repository.AddTag(t);
            #endregion

            #region EMAIL PRIMARY
            t = new Tag()
            {
                TagName = "Marketing",
                Category = repository.FindCategoryByName("EMAIL"),
                TagType = repository.FindTagTypeByName("SECONDARY"),
            };
            repository.AddTag(t);

            t = new Tag()
            {
                TagName = "Server",
                Category = repository.FindCategoryByName("EMAIL"),
                TagType = repository.FindTagTypeByName("SECONDARY"),
            };
            repository.AddTag(t);
            t = new Tag()
            {
                TagName = "Incoming",
                Category = repository.FindCategoryByName("EMAIL"),
                TagType = repository.FindTagTypeByName("SECONDARY"),
            };
            repository.AddTag(t);

            t = new Tag()
            {
                TagName = "Addresses",
                Category = repository.FindCategoryByName("EMAIL"),
                TagType = repository.FindTagTypeByName("SECONDARY"),
            };
            repository.AddTag(t);
            t = new Tag()
            {
                TagName = "Accounts",
                Category = repository.FindCategoryByName("EMAIL"),
                TagType = repository.FindTagTypeByName("SECONDARY"),
            };
            repository.AddTag(t);
            #endregion

            #endregion

            #region TERTIARY

            #region WEB CONFERENCING TERTIARY
            t = new Tag()
            {
                TagName = "Call",
                Category = repository.FindCategoryByName("WEB CONFERENCING"),
                TagType = repository.FindTagTypeByName("TERTIARY"),
            };
            repository.AddTag(t);

            t = new Tag()
            {
                TagName = "Easy",
                Category = repository.FindCategoryByName("WEB CONFERENCING"),
                TagType = repository.FindTagTypeByName("TERTIARY"),
            };
            repository.AddTag(t);
            t = new Tag()
            {
                TagName = "Remote",
                Category = repository.FindCategoryByName("WEB CONFERENCING"),
                TagType = repository.FindTagTypeByName("TERTIARY"),
            };
            repository.AddTag(t);

            t = new Tag()
            {
                TagName = "Software",
                Category = repository.FindCategoryByName("WEB CONFERENCING"),
                TagType = repository.FindTagTypeByName("TERTIARY"),
            };
            repository.AddTag(t);
            #endregion

            #region VOICE TERTIARY
            t = new Tag()
            {
                TagName = "Professional",
                Category = repository.FindCategoryByName("VOICE"),
                TagType = repository.FindTagTypeByName("TERTIARY"),
            };
            repository.AddTag(t);

            t = new Tag()
            {
                TagName = "Features",
                Category = repository.FindCategoryByName("VOICE"),
                TagType = repository.FindTagTypeByName("TERTIARY"),
            };
            repository.AddTag(t);
            t = new Tag()
            {
                TagName = "Mobile",
                Category = repository.FindCategoryByName("VOICE"),
                TagType = repository.FindTagTypeByName("TERTIARY"),
            };
            repository.AddTag(t);

            t = new Tag()
            {
                TagName = "Handset",
                Category = repository.FindCategoryByName("VOICE"),
                TagType = repository.FindTagTypeByName("TERTIARY"),
            };
            repository.AddTag(t);
            t = new Tag()
            {
                TagName = "Software",
                Category = repository.FindCategoryByName("VOICE"),
                TagType = repository.FindTagTypeByName("TERTIARY"),
            };
            repository.AddTag(t);
            #endregion

            #region STORAGE AND BACKUP TERTIARY
            t = new Tag()
            {
                TagName = "Network",
                Category = repository.FindCategoryByName("STORAGE AND BACKUP"),
                TagType = repository.FindTagTypeByName("TERTIARY"),
            };
            repository.AddTag(t);

            t = new Tag()
            {
                TagName = "Upload",
                Category = repository.FindCategoryByName("STORAGE AND BACKUP"),
                TagType = repository.FindTagTypeByName("TERTIARY"),
            };
            repository.AddTag(t);
            t = new Tag()
            {
                TagName = "Lock",
                Category = repository.FindCategoryByName("STORAGE AND BACKUP"),
                TagType = repository.FindTagTypeByName("TERTIARY"),
            };
            repository.AddTag(t);

            t = new Tag()
            {
                TagName = "Share",
                Category = repository.FindCategoryByName("STORAGE AND BACKUP"),
                TagType = repository.FindTagTypeByName("TERTIARY"),
            };
            repository.AddTag(t);
            t = new Tag()
            {
                TagName = "Safe",
                Category = repository.FindCategoryByName("STORAGE AND BACKUP"),
                TagType = repository.FindTagTypeByName("TERTIARY"),
            };
            repository.AddTag(t);
            #endregion

            #region SECURITY TERTIARY
            t = new Tag()
            {
                TagName = "Hackers",
                Category = repository.FindCategoryByName("SECURITY"),
                TagType = repository.FindTagTypeByName("TERTIARY"),
            };
            repository.AddTag(t);

            t = new Tag()
            {
                TagName = "Software",
                Category = repository.FindCategoryByName("SECURITY"),
                TagType = repository.FindTagTypeByName("TERTIARY"),
            };
            repository.AddTag(t);
            t = new Tag()
            {
                TagName = "Cloud",
                Category = repository.FindCategoryByName("SECURITY"),
                TagType = repository.FindTagTypeByName("TERTIARY"),
            };
            repository.AddTag(t);

            t = new Tag()
            {
                TagName = "Spyware",
                Category = repository.FindCategoryByName("SECURITY"),
                TagType = repository.FindTagTypeByName("TERTIARY"),
            };
            repository.AddTag(t);
            t = new Tag()
            {
                TagName = "Scanning",
                Category = repository.FindCategoryByName("SECURITY"),
                TagType = repository.FindTagTypeByName("TERTIARY"),
            };
            repository.AddTag(t);
            #endregion

            #region OFFICE TERTIARY
            t = new Tag()
            {
                TagName = "Computer",
                Category = repository.FindCategoryByName("OFFICE"),
                TagType = repository.FindTagTypeByName("TERTIARY"),
            };
            repository.AddTag(t);

            t = new Tag()
            {
                TagName = "Productivity",
                Category = repository.FindCategoryByName("OFFICE"),
                TagType = repository.FindTagTypeByName("TERTIARY"),
            };
            repository.AddTag(t);
            t = new Tag()
            {
                TagName = "Sharing",
                Category = repository.FindCategoryByName("OFFICE"),
                TagType = repository.FindTagTypeByName("TERTIARY"),
            };
            repository.AddTag(t);

            t = new Tag()
            {
                TagName = "Create",
                Category = repository.FindCategoryByName("OFFICE"),
                TagType = repository.FindTagTypeByName("TERTIARY"),
            };
            repository.AddTag(t);
            t = new Tag()
            {
                TagName = "Multimedia",
                Category = repository.FindCategoryByName("OFFICE"),
                TagType = repository.FindTagTypeByName("TERTIARY"),
            };
            repository.AddTag(t);
            #endregion

            #region CUSTOMER MANAGEMENT TERTIARY
            t = new Tag()
            {
                TagName = "Management",
                Category = repository.FindCategoryByName("CUSTOMER MANAGEMENT"),
                TagType = repository.FindTagTypeByName("TERTIARY"),
            };
            repository.AddTag(t);

            t = new Tag()
            {
                TagName = "Forecasting",
                Category = repository.FindCategoryByName("CUSTOMER MANAGEMENT"),
                TagType = repository.FindTagTypeByName("TERTIARY"),
            };
            repository.AddTag(t);
            t = new Tag()
            {
                TagName = "Chart",
                Category = repository.FindCategoryByName("CUSTOMER MANAGEMENT"),
                TagType = repository.FindTagTypeByName("TERTIARY"),
            };
            repository.AddTag(t);

            t = new Tag()
            {
                TagName = "Information",
                Category = repository.FindCategoryByName("CUSTOMER MANAGEMENT"),
                TagType = repository.FindTagTypeByName("TERTIARY"),
            };
            repository.AddTag(t);
            t = new Tag()
            {
                TagName = "Demand",
                Category = repository.FindCategoryByName("CUSTOMER MANAGEMENT"),
                TagType = repository.FindTagTypeByName("TERTIARY"),
            };
            repository.AddTag(t);
            #endregion

            #region EMAIL TERTIARY
            t = new Tag()
            {
                TagName = "SMTP",
                Category = repository.FindCategoryByName("EMAIL"),
                TagType = repository.FindTagTypeByName("TERTIARY"),
            };
            repository.AddTag(t);

            t = new Tag()
            {
                TagName = "POP3",
                Category = repository.FindCategoryByName("EMAIL"),
                TagType = repository.FindTagTypeByName("TERTIARY"),
            };
            repository.AddTag(t);
            t = new Tag()
            {
                TagName = "Windows",
                Category = repository.FindCategoryByName("EMAIL"),
                TagType = repository.FindTagTypeByName("TERTIARY"),
            };
            repository.AddTag(t);

            t = new Tag()
            {
                TagName = "Merge",
                Category = repository.FindCategoryByName("EMAIL"),
                TagType = repository.FindTagTypeByName("TERTIARY"),
            };
            repository.AddTag(t);
            #endregion

            #endregion

            #region PHRASES

            #region WEB CONFERENCING PHRASES
            t = new Tag()
            {
                TagName = "Online Meeting",
                Category = repository.FindCategoryByName("WEB CONFERENCING"),
                TagType = repository.FindTagTypeByName("PHRASE"),
            };
            repository.AddTag(t);

            t = new Tag()
            {
                TagName = "Free Software",
                Category = repository.FindCategoryByName("WEB CONFERENCING"),
                TagType = repository.FindTagTypeByName("PHRASE"),
            };
            repository.AddTag(t);
            t = new Tag()
            {
                TagName = "Remote Meeting",
                Category = repository.FindCategoryByName("WEB CONFERENCING"),
                TagType = repository.FindTagTypeByName("PHRASE"),
            };
            repository.AddTag(t);

            #endregion

            #region VOICE PHRASES
            t = new Tag()
            {
                TagName = "Telephone System",
                Category = repository.FindCategoryByName("VOICE"),
                TagType = repository.FindTagTypeByName("PHRASE"),
            };
            repository.AddTag(t);

            t = new Tag()
            {
                TagName = "Hosted PBX",
                Category = repository.FindCategoryByName("VOICE"),
                TagType = repository.FindTagTypeByName("PHRASE"),
            };
            repository.AddTag(t);
            t = new Tag()
            {
                TagName = "Virtual PBX",
                Category = repository.FindCategoryByName("VOICE"),
                TagType = repository.FindTagTypeByName("PHRASE"),
            };
            repository.AddTag(t);

            t = new Tag()
            {
                TagName = "Business Phone",
                Category = repository.FindCategoryByName("VOICE"),
                TagType = repository.FindTagTypeByName("PHRASE"),
            };
            repository.AddTag(t);
            t = new Tag()
            {
                TagName = "Phone System",
                Category = repository.FindCategoryByName("VOICE"),
                TagType = repository.FindTagTypeByName("PHRASE"),
            };
            repository.AddTag(t);
            #endregion

            #region STORAGE AND BACKUP PHRASES
            t = new Tag()
            {
                TagName = "Hard Drive",
                Category = repository.FindCategoryByName("STORAGE AND BACKUP"),
                TagType = repository.FindTagTypeByName("PHRASE"),
            };
            repository.AddTag(t);

            t = new Tag()
            {
                TagName = "Hard Disk",
                Category = repository.FindCategoryByName("STORAGE AND BACKUP"),
                TagType = repository.FindTagTypeByName("PHRASE"),
            };
            repository.AddTag(t);
            t = new Tag()
            {
                TagName = "Network Attached",
                Category = repository.FindCategoryByName("STORAGE AND BACKUP"),
                TagType = repository.FindTagTypeByName("PHRASE"),
            };
            repository.AddTag(t);

            t = new Tag()
            {
                TagName = "Business Continuity",
                Category = repository.FindCategoryByName("STORAGE AND BACKUP"),
                TagType = repository.FindTagTypeByName("PHRASE"),
            };
            repository.AddTag(t);
            t = new Tag()
            {
                TagName = "Disaster Recovery",
                Category = repository.FindCategoryByName("STORAGE AND BACKUP"),
                TagType = repository.FindTagTypeByName("PHRASE"),
            };
            repository.AddTag(t);
            #endregion

            #region SECURITY PHRASES
            t = new Tag()
            {
                TagName = "Web Security",
                Category = repository.FindCategoryByName("SECURITY"),
                TagType = repository.FindTagTypeByName("PHRASE"),
            };
            repository.AddTag(t);

            t = new Tag()
            {
                TagName = "Security Software",
                Category = repository.FindCategoryByName("SECURITY"),
                TagType = repository.FindTagTypeByName("PHRASE"),
            };
            repository.AddTag(t);
            t = new Tag()
            {
                TagName = "Downloads",
                Category = repository.FindCategoryByName("SECURITY"),
                TagType = repository.FindTagTypeByName("PHRASE"),
            };
            repository.AddTag(t);

            #endregion

            #region OFFICE PHRASES
            t = new Tag()
            {
                TagName = "Business Office",
                Category = repository.FindCategoryByName("OFFICE"),
                TagType = repository.FindTagTypeByName("PHRASE"),
            };
            repository.AddTag(t);

            t = new Tag()
            {
                TagName = "Office Software",
                Category = repository.FindCategoryByName("OFFICE"),
                TagType = repository.FindTagTypeByName("PHRASE"),
            };
            repository.AddTag(t);
            t = new Tag()
            {
                TagName = "Desktop Software",
                Category = repository.FindCategoryByName("OFFICE"),
                TagType = repository.FindTagTypeByName("PHRASE"),
            };
            repository.AddTag(t);

            #endregion

            #region CUSTOMER MANAGEMENT PHRASES
            t = new Tag()
            {
                TagName = "Customer Relationship Management",
                Category = repository.FindCategoryByName("CUSTOMER MANAGEMENT"),
                TagType = repository.FindTagTypeByName("PHRASE"),
            };
            repository.AddTag(t);

            t = new Tag()
            {
                TagName = "Customer Services",
                Category = repository.FindCategoryByName("CUSTOMER MANAGEMENT"),
                TagType = repository.FindTagTypeByName("PHRASE"),
            };
            repository.AddTag(t);
            t = new Tag()
            {
                TagName = "Salesforce Automation",
                Category = repository.FindCategoryByName("CUSTOMER MANAGEMENT"),
                TagType = repository.FindTagTypeByName("PHRASE"),
            };
            repository.AddTag(t);

            t = new Tag()
            {
                TagName = "Trouble Ticket",
                Category = repository.FindCategoryByName("CUSTOMER MANAGEMENT"),
                TagType = repository.FindTagTypeByName("PHRASE"),
            };
            repository.AddTag(t);
            t = new Tag()
            {
                TagName = "Contact Management",
                Category = repository.FindCategoryByName("CUSTOMER MANAGEMENT"),
                TagType = repository.FindTagTypeByName("PHRASE"),
            };
            repository.AddTag(t);
            #endregion

            #region EMAIL PHRASES
            t = new Tag()
            {
                TagName = "Email Service",
                Category = repository.FindCategoryByName("EMAIL"),
                TagType = repository.FindTagTypeByName("PHRASE"),
            };
            repository.AddTag(t);

            t = new Tag()
            {
                TagName = "Company Email",
                Category = repository.FindCategoryByName("EMAIL"),
                TagType = repository.FindTagTypeByName("PHRASE"),
            };
            repository.AddTag(t);
            t = new Tag()
            {
                TagName = "Business Email",
                Category = repository.FindCategoryByName("EMAIL"),
                TagType = repository.FindTagTypeByName("PHRASE"),
            };
            repository.AddTag(t);

            #endregion

            #endregion

            #region VERNACULAR

            #region WEB CONFERENCING VERNACULAR
            t = new Tag()
            {
                TagName = "Desktop sharing",
                Category = repository.FindCategoryByName("WEB CONFERENCING"),
                TagType = repository.FindTagTypeByName("VERNACULAR"),
            };
            repository.AddTag(t);

            t = new Tag()
            {
                TagName = "Video conferencing",
                Category = repository.FindCategoryByName("WEB CONFERENCING"),
                TagType = repository.FindTagTypeByName("VERNACULAR"),
            };
            repository.AddTag(t);
            t = new Tag()
            {
                TagName = "Screen sharing",
                Category = repository.FindCategoryByName("WEB CONFERENCING"),
                TagType = repository.FindTagTypeByName("VERNACULAR"),
            };
            repository.AddTag(t);
            t = new Tag()
            {
                TagName = "Remote support",
                Category = repository.FindCategoryByName("WEB CONFERENCING"),
                TagType = repository.FindTagTypeByName("VERNACULAR"),
            };
            repository.AddTag(t);

            t = new Tag()
            {
                TagName = "Audio Conferencing",
                Category = repository.FindCategoryByName("WEB CONFERENCING"),
                TagType = repository.FindTagTypeByName("VERNACULAR"),
            };
            repository.AddTag(t);
            t = new Tag()
            {
                TagName = "Web conference",
                Category = repository.FindCategoryByName("WEB CONFERENCING"),
                TagType = repository.FindTagTypeByName("VERNACULAR"),
            };
            repository.AddTag(t);
            t = new Tag()
            {
                TagName = "Free web conferencing",
                Category = repository.FindCategoryByName("WEB CONFERENCING"),
                TagType = repository.FindTagTypeByName("VERNACULAR"),
            };
            repository.AddTag(t);

            t = new Tag()
            {
                TagName = "Collaborate online",
                Category = repository.FindCategoryByName("WEB CONFERENCING"),
                TagType = repository.FindTagTypeByName("VERNACULAR"),
            };
            repository.AddTag(t);
            t = new Tag()
            {
                TagName = "Online Service Solution",
                Category = repository.FindCategoryByName("WEB CONFERENCING"),
                TagType = repository.FindTagTypeByName("VERNACULAR"),
            };
            repository.AddTag(t);
            t = new Tag()
            {
                TagName = "Web conferencing",
                Category = repository.FindCategoryByName("WEB CONFERENCING"),
                TagType = repository.FindTagTypeByName("VERNACULAR"),
            };
            repository.AddTag(t);

            t = new Tag()
            {
                TagName = "Online collaboration",
                Category = repository.FindCategoryByName("WEB CONFERENCING"),
                TagType = repository.FindTagTypeByName("VERNACULAR"),
            };
            repository.AddTag(t);
            t = new Tag()
            {
                TagName = "Web meeting",
                Category = repository.FindCategoryByName("WEB CONFERENCING"),
                TagType = repository.FindTagTypeByName("VERNACULAR"),
            };
            repository.AddTag(t);

            #endregion

            #region VOICE VERNACULAR
            t = new Tag()
            {
                TagName = "Voice services",
                Category = repository.FindCategoryByName("VOICE"),
                TagType = repository.FindTagTypeByName("VERNACULAR"),
            };
            repository.AddTag(t);

            t = new Tag()
            {
                TagName = "Business phone solutions",
                Category = repository.FindCategoryByName("VOICE"),
                TagType = repository.FindTagTypeByName("VERNACULAR"),
            };
            repository.AddTag(t);
            t = new Tag()
            {
                TagName = "Online Service",
                Category = repository.FindCategoryByName("VOICE"),
                TagType = repository.FindTagTypeByName("VERNACULAR"),
            };
            repository.AddTag(t);

            t = new Tag()
            {
                TagName = "VoIP Systems",
                Category = repository.FindCategoryByName("VOICE"),
                TagType = repository.FindTagTypeByName("VERNACULAR"),
            };
            repository.AddTag(t);
            t = new Tag()
            {
                TagName = "VoIP call solutions",
                Category = repository.FindCategoryByName("VOICE"),
                TagType = repository.FindTagTypeByName("VERNACULAR"),
            };
            repository.AddTag(t);
            t = new Tag()
            {
                TagName = "VoIP Service",
                Category = repository.FindCategoryByName("VOICE"),
                TagType = repository.FindTagTypeByName("VERNACULAR"),
            };
            repository.AddTag(t);

            t = new Tag()
            {
                TagName = "PC-to-phone",
                Category = repository.FindCategoryByName("VOICE"),
                TagType = repository.FindTagTypeByName("VERNACULAR"),
            };
            repository.AddTag(t);
            t = new Tag()
            {
                TagName = "Communications Services",
                Category = repository.FindCategoryByName("VOICE"),
                TagType = repository.FindTagTypeByName("VERNACULAR"),
            };
            repository.AddTag(t);

            t = new Tag()
            {
                TagName = "Hosted phone systems",
                Category = repository.FindCategoryByName("VOICE"),
                TagType = repository.FindTagTypeByName("VERNACULAR"),
            };
            repository.AddTag(t);
            t = new Tag()
            {
                TagName = "Online voicemail",
                Category = repository.FindCategoryByName("VOICE"),
                TagType = repository.FindTagTypeByName("VERNACULAR"),
            };
            repository.AddTag(t);
            t = new Tag()
            {
                TagName = "Phone service",
                Category = repository.FindCategoryByName("VOICE"),
                TagType = repository.FindTagTypeByName("VERNACULAR"),
            };
            repository.AddTag(t);

            t = new Tag()
            {
                TagName = "Business communications",
                Category = repository.FindCategoryByName("VOICE"),
                TagType = repository.FindTagTypeByName("VERNACULAR"),
            };
            repository.AddTag(t);
            t = new Tag()
            {
                TagName = "Digital",
                Category = repository.FindCategoryByName("VOICE"),
                TagType = repository.FindTagTypeByName("VERNACULAR"),
            };
            repository.AddTag(t);

            t = new Tag()
            {
                TagName = "Internet phone",
                Category = repository.FindCategoryByName("VOICE"),
                TagType = repository.FindTagTypeByName("VERNACULAR"),
            };
            repository.AddTag(t);
            t = new Tag()
            {
                TagName = "Online phone service",
                Category = repository.FindCategoryByName("VOICE"),
                TagType = repository.FindTagTypeByName("VERNACULAR"),
            };
            repository.AddTag(t);
            t = new Tag()
            {
                TagName = "VoIP Internet phone",
                Category = repository.FindCategoryByName("VOICE"),
                TagType = repository.FindTagTypeByName("VERNACULAR"),
            };
            repository.AddTag(t);

            t = new Tag()
            {
                TagName = "VoIP Providers",
                Category = repository.FindCategoryByName("VOICE"),
                TagType = repository.FindTagTypeByName("VERNACULAR"),
            };
            repository.AddTag(t);
            t = new Tag()
            {
                TagName = "Wireless communications services",
                Category = repository.FindCategoryByName("VOICE"),
                TagType = repository.FindTagTypeByName("VERNACULAR"),
            };
            repository.AddTag(t);

            t = new Tag()
            {
                TagName = "Business VoIP",
                Category = repository.FindCategoryByName("VOICE"),
                TagType = repository.FindTagTypeByName("VERNACULAR"),
            };
            repository.AddTag(t);
            t = new Tag()
            {
                TagName = "VoIP telephone solutions",
                Category = repository.FindCategoryByName("VOICE"),
                TagType = repository.FindTagTypeByName("VERNACULAR"),
            };
            repository.AddTag(t);
            t = new Tag()
            {
                TagName = "Business Class Hosted VoIP",
                Category = repository.FindCategoryByName("VOICE"),
                TagType = repository.FindTagTypeByName("VERNACULAR"),
            };
            repository.AddTag(t);
            t = new Tag()
            {
                TagName = "Customised VoIP Solutions",
                Category = repository.FindCategoryByName("VOICE"),
                TagType = repository.FindTagTypeByName("VERNACULAR"),
            };
            repository.AddTag(t);
            #endregion

            #region STORAGE AND BACKUP VERNACULAR
            t = new Tag()
            {
                TagName = "Online storage",
                Category = repository.FindCategoryByName("STORAGE AND BACKUP"),
                TagType = repository.FindTagTypeByName("VERNACULAR"),
            };
            repository.AddTag(t);

            t = new Tag()
            {
                TagName = "Online backup",
                Category = repository.FindCategoryByName("STORAGE AND BACKUP"),
                TagType = repository.FindTagTypeByName("VERNACULAR"),
            };
            repository.AddTag(t);
            t = new Tag()
            {
                TagName = "Cloud backup",
                Category = repository.FindCategoryByName("STORAGE AND BACKUP"),
                TagType = repository.FindTagTypeByName("VERNACULAR"),
            };
            repository.AddTag(t);

            t = new Tag()
            {
                TagName = "PC backup",
                Category = repository.FindCategoryByName("STORAGE AND BACKUP"),
                TagType = repository.FindTagTypeByName("VERNACULAR"),
            };
            repository.AddTag(t);
            t = new Tag()
            {
                TagName = "Store files online",
                Category = repository.FindCategoryByName("STORAGE AND BACKUP"),
                TagType = repository.FindTagTypeByName("VERNACULAR"),
            };
            repository.AddTag(t);
            t = new Tag()
            {
                TagName = "Online storage services",
                Category = repository.FindCategoryByName("STORAGE AND BACKUP"),
                TagType = repository.FindTagTypeByName("VERNACULAR"),
            };
            repository.AddTag(t);

            t = new Tag()
            {
                TagName = "Online cloud storage",
                Category = repository.FindCategoryByName("STORAGE AND BACKUP"),
                TagType = repository.FindTagTypeByName("VERNACULAR"),
            };
            repository.AddTag(t);
            t = new Tag()
            {
                TagName = "Backup solutions",
                Category = repository.FindCategoryByName("STORAGE AND BACKUP"),
                TagType = repository.FindTagTypeByName("VERNACULAR"),
            };
            repository.AddTag(t);

            t = new Tag()
            {
                TagName = "Manage",
                Category = repository.FindCategoryByName("STORAGE AND BACKUP"),
                TagType = repository.FindTagTypeByName("VERNACULAR"),
            };
            repository.AddTag(t);
            t = new Tag()
            {
                TagName = "Edit",
                Category = repository.FindCategoryByName("STORAGE AND BACKUP"),
                TagType = repository.FindTagTypeByName("VERNACULAR"),
            };
            repository.AddTag(t);
            t = new Tag()
            {
                TagName = "Cloud storage",
                Category = repository.FindCategoryByName("STORAGE AND BACKUP"),
                TagType = repository.FindTagTypeByName("VERNACULAR"),
            };
            repository.AddTag(t);

            t = new Tag()
            {
                TagName = "Unlimited online backup",
                Category = repository.FindCategoryByName("STORAGE AND BACKUP"),
                TagType = repository.FindTagTypeByName("VERNACULAR"),
            };
            repository.AddTag(t);
            t = new Tag()
            {
                TagName = "Online file storage",
                Category = repository.FindCategoryByName("STORAGE AND BACKUP"),
                TagType = repository.FindTagTypeByName("VERNACULAR"),
            };
            repository.AddTag(t);

            t = new Tag()
            {
                TagName = "Off-site managed storage",
                Category = repository.FindCategoryByName("STORAGE AND BACKUP"),
                TagType = repository.FindTagTypeByName("VERNACULAR"),
            };
            repository.AddTag(t);
            t = new Tag()
            {
                TagName = "Online backup providers",
                Category = repository.FindCategoryByName("STORAGE AND BACKUP"),
                TagType = repository.FindTagTypeByName("VERNACULAR"),
            };
            repository.AddTag(t);
            t = new Tag()
            {
                TagName = "Cloud file backup",
                Category = repository.FindCategoryByName("STORAGE AND BACKUP"),
                TagType = repository.FindTagTypeByName("VERNACULAR"),
            };
            repository.AddTag(t);

            t = new Tag()
            {
                TagName = "Server backup",
                Category = repository.FindCategoryByName("STORAGE AND BACKUP"),
                TagType = repository.FindTagTypeByName("VERNACULAR"),
            };
            repository.AddTag(t);
            t = new Tag()
            {
                TagName = "Disaster recovery",
                Category = repository.FindCategoryByName("STORAGE AND BACKUP"),
                TagType = repository.FindTagTypeByName("VERNACULAR"),
            };
            repository.AddTag(t);

            t = new Tag()
            {
                TagName = "Remote backup",
                Category = repository.FindCategoryByName("STORAGE AND BACKUP"),
                TagType = repository.FindTagTypeByName("VERNACULAR"),
            };
            repository.AddTag(t);
            t = new Tag()
            {
                TagName = "Data backup",
                Category = repository.FindCategoryByName("STORAGE AND BACKUP"),
                TagType = repository.FindTagTypeByName("VERNACULAR"),
            };
            repository.AddTag(t);
            t = new Tag()
            {
                TagName = "Computer backup",
                Category = repository.FindCategoryByName("STORAGE AND BACKUP"),
                TagType = repository.FindTagTypeByName("VERNACULAR"),
            };
            repository.AddTag(t);

            t = new Tag()
            {
                TagName = "Backup software",
                Category = repository.FindCategoryByName("STORAGE AND BACKUP"),
                TagType = repository.FindTagTypeByName("VERNACULAR"),
            };
            repository.AddTag(t);
            t = new Tag()
            {
                TagName = "Internet backup",
                Category = repository.FindCategoryByName("STORAGE AND BACKUP"),
                TagType = repository.FindTagTypeByName("VERNACULAR"),
            };
            repository.AddTag(t);

            t = new Tag()
            {
                TagName = "Online IT Backup",
                Category = repository.FindCategoryByName("STORAGE AND BACKUP"),
                TagType = repository.FindTagTypeByName("VERNACULAR"),
            };
            repository.AddTag(t);
            t = new Tag()
            {
                TagName = "Business Data backup",
                Category = repository.FindCategoryByName("STORAGE AND BACKUP"),
                TagType = repository.FindTagTypeByName("VERNACULAR"),
            };
            repository.AddTag(t);
            t = new Tag()
            {
                TagName = "Integrated file sharing",
                Category = repository.FindCategoryByName("STORAGE AND BACKUP"),
                TagType = repository.FindTagTypeByName("VERNACULAR"),
            };
            repository.AddTag(t);

            t = new Tag()
            {
                TagName = "Cloud backup servers",
                Category = repository.FindCategoryByName("STORAGE AND BACKUP"),
                TagType = repository.FindTagTypeByName("VERNACULAR"),
            };
            repository.AddTag(t);
            t = new Tag()
            {
                TagName = "Secure",
                Category = repository.FindCategoryByName("STORAGE AND BACKUP"),
                TagType = repository.FindTagTypeByName("VERNACULAR"),
            };
            repository.AddTag(t);
            #endregion

            #region SECURITY VERNACULAR
            t = new Tag()
            {
                TagName = "Online protection",
                Category = repository.FindCategoryByName("SECURITY"),
                TagType = repository.FindTagTypeByName("VERNACULAR"),
            };
            repository.AddTag(t);

            t = new Tag()
            {
                TagName = "Internet security",
                Category = repository.FindCategoryByName("SECURITY"),
                TagType = repository.FindTagTypeByName("VERNACULAR"),
            };
            repository.AddTag(t);
            t = new Tag()
            {
                TagName = "Browser security",
                Category = repository.FindCategoryByName("SECURITY"),
                TagType = repository.FindTagTypeByName("VERNACULAR"),
            };
            repository.AddTag(t);
            t = new Tag()
            {
                TagName = "Network security",
                Category = repository.FindCategoryByName("SECURITY"),
                TagType = repository.FindTagTypeByName("VERNACULAR"),
            };
            repository.AddTag(t);

            t = new Tag()
            {
                TagName = "Online security ",
                Category = repository.FindCategoryByName("SECURITY"),
                TagType = repository.FindTagTypeByName("VERNACULAR"),
            };
            repository.AddTag(t);
            t = new Tag()
            {
                TagName = "Virus protection",
                Category = repository.FindCategoryByName("SECURITY"),
                TagType = repository.FindTagTypeByName("VERNACULAR"),
            };
            repository.AddTag(t);
            t = new Tag()
            {
                TagName = "Anti-virus",
                Category = repository.FindCategoryByName("SECURITY"),
                TagType = repository.FindTagTypeByName("VERNACULAR"),
            };
            repository.AddTag(t);

            t = new Tag()
            {
                TagName = "Anti-spyware",
                Category = repository.FindCategoryByName("SECURITY"),
                TagType = repository.FindTagTypeByName("VERNACULAR"),
            };
            repository.AddTag(t);
            t = new Tag()
            {
                TagName = "Security solutions",
                Category = repository.FindCategoryByName("SECURITY"),
                TagType = repository.FindTagTypeByName("VERNACULAR"),
            };
            repository.AddTag(t);
            t = new Tag()
            {
                TagName = "digital privacy",
                Category = repository.FindCategoryByName("SECURITY"),
                TagType = repository.FindTagTypeByName("VERNACULAR"),
            };
            repository.AddTag(t);

            t = new Tag()
            {
                TagName = "Internet safety",
                Category = repository.FindCategoryByName("SECURITY"),
                TagType = repository.FindTagTypeByName("VERNACULAR"),
            };
            repository.AddTag(t);
            t = new Tag()
            {
                TagName = "Security software",
                Category = repository.FindCategoryByName("SECURITY"),
                TagType = repository.FindTagTypeByName("VERNACULAR"),
            };
            repository.AddTag(t);
            t = new Tag()
            {
                TagName = "Data security",
                Category = repository.FindCategoryByName("SECURITY"),
                TagType = repository.FindTagTypeByName("VERNACULAR"),
            };
            repository.AddTag(t);

            t = new Tag()
            {
                TagName = "Disaster recovery",
                Category = repository.FindCategoryByName("SECURITY"),
                TagType = repository.FindTagTypeByName("VERNACULAR"),
            };
            repository.AddTag(t);
            t = new Tag()
            {
                TagName = "Complete protection",
                Category = repository.FindCategoryByName("SECURITY"),
                TagType = repository.FindTagTypeByName("VERNACULAR"),
            };
            repository.AddTag(t);

            #endregion

            #region OFFICE VERNACULAR
            t = new Tag()
            {
                TagName = "Office cloud solutions",
                Category = repository.FindCategoryByName("OFFICE"),
                TagType = repository.FindTagTypeByName("VERNACULAR"),
            };
            repository.AddTag(t);

            t = new Tag()
            {
                TagName = "Office suite",
                Category = repository.FindCategoryByName("OFFICE"),
                TagType = repository.FindTagTypeByName("VERNACULAR"),
            };
            repository.AddTag(t);
            t = new Tag()
            {
                TagName = "Office software packages",
                Category = repository.FindCategoryByName("OFFICE"),
                TagType = repository.FindTagTypeByName("VERNACULAR"),
            };
            repository.AddTag(t);
            t = new Tag()
            {
                TagName = "Productivity suite",
                Category = repository.FindCategoryByName("OFFICE"),
                TagType = repository.FindTagTypeByName("VERNACULAR"),
            };
            repository.AddTag(t);

            t = new Tag()
            {
                TagName = "Office web apps",
                Category = repository.FindCategoryByName("OFFICE"),
                TagType = repository.FindTagTypeByName("VERNACULAR"),
            };
            repository.AddTag(t);
            t = new Tag()
            {
                TagName = "Online office",
                Category = repository.FindCategoryByName("OFFICE"),
                TagType = repository.FindTagTypeByName("VERNACULAR"),
            };
            repository.AddTag(t);
            t = new Tag()
            {
                TagName = "Collaborate",
                Category = repository.FindCategoryByName("OFFICE"),
                TagType = repository.FindTagTypeByName("VERNACULAR"),
            };
            repository.AddTag(t);

            t = new Tag()
            {
                TagName = "Mobile office",
                Category = repository.FindCategoryByName("OFFICE"),
                TagType = repository.FindTagTypeByName("VERNACULAR"),
            };
            repository.AddTag(t);
            t = new Tag()
            {
                TagName = "Office applications",
                Category = repository.FindCategoryByName("OFFICE"),
                TagType = repository.FindTagTypeByName("VERNACULAR"),
            };
            repository.AddTag(t);

            #endregion

            #region CUSTOMER MANAGEMENT VERNACULAR
            t = new Tag()
            {
                TagName = "Online client management",
                Category = repository.FindCategoryByName("CUSTOMER MANAGEMENT"),
                TagType = repository.FindTagTypeByName("VERNACULAR"),
            };
            repository.AddTag(t);

            t = new Tag()
            {
                TagName = "manage",
                Category = repository.FindCategoryByName("CUSTOMER MANAGEMENT"),
                TagType = repository.FindTagTypeByName("VERNACULAR"),
            };
            repository.AddTag(t);
            t = new Tag()
            {
                TagName = "Web CRM Systems",
                Category = repository.FindCategoryByName("CUSTOMER MANAGEMENT"),
                TagType = repository.FindTagTypeByName("VERNACULAR"),
            };
            repository.AddTag(t);

            t = new Tag()
            {
                TagName = "Online CRM",
                Category = repository.FindCategoryByName("CUSTOMER MANAGEMENT"),
                TagType = repository.FindTagTypeByName("VERNACULAR"),
            };
            repository.AddTag(t);
            t = new Tag()
            {
                TagName = "Hosted CRM",
                Category = repository.FindCategoryByName("CUSTOMER MANAGEMENT"),
                TagType = repository.FindTagTypeByName("VERNACULAR"),
            };
            repository.AddTag(t);
            t = new Tag()
            {
                TagName = "Service management",
                Category = repository.FindCategoryByName("CUSTOMER MANAGEMENT"),
                TagType = repository.FindTagTypeByName("VERNACULAR"),
            };
            repository.AddTag(t);

            t = new Tag()
            {
                TagName = "On-Demand CRM solutions",
                Category = repository.FindCategoryByName("CUSTOMER MANAGEMENT"),
                TagType = repository.FindTagTypeByName("VERNACULAR"),
            };
            repository.AddTag(t);
            t = new Tag()
            {
                TagName = "Customer management solutions",
                Category = repository.FindCategoryByName("CUSTOMER MANAGEMENT"),
                TagType = repository.FindTagTypeByName("VERNACULAR"),
            };
            repository.AddTag(t);

            t = new Tag()
            {
                TagName = "Customer Intelligence",
                Category = repository.FindCategoryByName("CUSTOMER MANAGEMENT"),
                TagType = repository.FindTagTypeByName("VERNACULAR"),
            };
            repository.AddTag(t);
            t = new Tag()
            {
                TagName = "Feedback Solutions",
                Category = repository.FindCategoryByName("CUSTOMER MANAGEMENT"),
                TagType = repository.FindTagTypeByName("VERNACULAR"),
            };
            repository.AddTag(t);
            t = new Tag()
            {
                TagName = "Cloud based",
                Category = repository.FindCategoryByName("CUSTOMER MANAGEMENT"),
                TagType = repository.FindTagTypeByName("VERNACULAR"),
            };
            repository.AddTag(t);

            t = new Tag()
            {
                TagName = "CRM online cloud",
                Category = repository.FindCategoryByName("CUSTOMER MANAGEMENT"),
                TagType = repository.FindTagTypeByName("VERNACULAR"),
            };
            repository.AddTag(t);
            t = new Tag()
            {
                TagName = "Web based CRM software",
                Category = repository.FindCategoryByName("CUSTOMER MANAGEMENT"),
                TagType = repository.FindTagTypeByName("VERNACULAR"),
            };
            repository.AddTag(t);

            #endregion

            #region EMAIL VERNACULAR
            t = new Tag()
            {
                TagName = "Email account",
                Category = repository.FindCategoryByName("EMAIL"),
                TagType = repository.FindTagTypeByName("VERNACULAR"),
            };
            repository.AddTag(t);

            t = new Tag()
            {
                TagName = "Secure access",
                Category = repository.FindCategoryByName("EMAIL"),
                TagType = repository.FindTagTypeByName("VERNACULAR"),
            };
            repository.AddTag(t);
            t = new Tag()
            {
                TagName = "Business email",
                Category = repository.FindCategoryByName("EMAIL"),
                TagType = repository.FindTagTypeByName("VERNACULAR"),
            };
            repository.AddTag(t);
            t = new Tag()
            {
                TagName = "Inbox",
                Category = repository.FindCategoryByName("EMAIL"),
                TagType = repository.FindTagTypeByName("VERNACULAR"),
            };
            repository.AddTag(t);

            t = new Tag()
            {
                TagName = "Unlimited storage",
                Category = repository.FindCategoryByName("EMAIL"),
                TagType = repository.FindTagTypeByName("VERNACULAR"),
            };
            repository.AddTag(t);
            t = new Tag()
            {
                TagName = "Sign in",
                Category = repository.FindCategoryByName("EMAIL"),
                TagType = repository.FindTagTypeByName("VERNACULAR"),
            };
            repository.AddTag(t);
            t = new Tag()
            {
                TagName = "Web based",
                Category = repository.FindCategoryByName("EMAIL"),
                TagType = repository.FindTagTypeByName("VERNACULAR"),
            };
            repository.AddTag(t);

            t = new Tag()
            {
                TagName = "Webmail ",
                Category = repository.FindCategoryByName("EMAIL"),
                TagType = repository.FindTagTypeByName("VERNACULAR"),
            };
            repository.AddTag(t);
            t = new Tag()
            {
                TagName = "mobile device support",
                Category = repository.FindCategoryByName("EMAIL"),
                TagType = repository.FindTagTypeByName("VERNACULAR"),
            };
            repository.AddTag(t);
            t = new Tag()
            {
                TagName = "Secure storage",
                Category = repository.FindCategoryByName("EMAIL"),
                TagType = repository.FindTagTypeByName("VERNACULAR"),
            };
            repository.AddTag(t);

            t = new Tag()
            {
                TagName = "Spam protection",
                Category = repository.FindCategoryByName("EMAIL"),
                TagType = repository.FindTagTypeByName("VERNACULAR"),
            };
            repository.AddTag(t);
            t = new Tag()
            {
                TagName = "Email management",
                Category = repository.FindCategoryByName("EMAIL"),
                TagType = repository.FindTagTypeByName("VERNACULAR"),
            };
            repository.AddTag(t);

            #endregion

            #endregion

            #endregion

            #region CONTENTTEXT
            ContentText ct;
            string data;
            string compositeID;

            #region CATEGORIES TITLES
            data = "Conferencing overview";
            ct = new ContentText
            {
                NiceName = "Title for Conferencing",
                ContentTextType = repository.FindContentTextTypeByName("CONFERENCING_CATEGORY_TITLE"),
                ContentTextData = data,
            };
            repository.AddContentText(ct);

            data = "Project management";
            ct = new ContentText
            {
                NiceName = "Title for Project management",
                ContentTextType = repository.FindContentTextTypeByName("PROJECTMANAGEMENT_CATEGORY_TITLE"),
                ContentTextData = data,
            };
            repository.AddContentText(ct);

            data = "Storage & back-up";
            ct = new ContentText
            {
                NiceName = "Title for Storage & back-up",
                ContentTextType = repository.FindContentTextTypeByName("STORAGEANDBACKUP_CATEGORY_TITLE"),
                ContentTextData = data,
            };
            repository.AddContentText(ct);

            data = "Email";
            ct = new ContentText
            {
                NiceName = "Title for Email",
                ContentTextType = repository.FindContentTextTypeByName("EMAIL_CATEGORY_TITLE"),
                ContentTextData = data,
            };
            repository.AddContentText(ct);

            data = "Financial";
            ct = new ContentText
            {
                NiceName = "Title for Financial",
                ContentTextType = repository.FindContentTextTypeByName("FINANCIAL_CATEGORY_TITLE"),
                ContentTextData = data,
            };
            repository.AddContentText(ct);

            data = "Office";
            ct = new ContentText
            {
                NiceName = "Title for Office",
                ContentTextType = repository.FindContentTextTypeByName("OFFICE_CATEGORY_TITLE"),
                ContentTextData = data,
            };
            repository.AddContentText(ct);

            data = "Voice";
            ct = new ContentText
            {
                NiceName = "Title for Voice",
                ContentTextType = repository.FindContentTextTypeByName("VOICE_CATEGORY_TITLE"),
                ContentTextData = data,
            };
            repository.AddContentText(ct);

            data = "Customer management";
            ct = new ContentText
            {
                NiceName = "Title for Customer management",
                ContentTextType = repository.FindContentTextTypeByName("CUSTOMERMANAGEMENT_CATEGORY_TITLE"),
                ContentTextData = data,
            };
            repository.AddContentText(ct);

            #endregion

            #region CATEGORIES BODIES
            #region CONFERENCING
            data = "Meetings are simply unavoidable and part of everyday life. Thankfully, instead of spending endless hours on the road or travelling by train or plane there is now an easier and faster way to connect to customers, colleagues and suppliers. Using your PC, laptop or smartphone you can simply schedule a web conference.";
            ct = new ContentText
            {
                NiceName = "Body for Conferencing",
                ContentTextType = repository.FindContentTextTypeByName("CONFERENCING_CATEGORY_BODY"),
                ContentTextData = data,
                BodyOrder = 1,
            };
            repository.AddContentText(ct);

            data = "Think of it as digital ‘teleportation’ where you can set-up or join a meeting instantly and invite participants out of thin air to answer specific questions or queries. Also the ability to share documents and work together on one screen is fantastic compared to a somewhat crowded and huddled affair in the real world.You can even record meetings for absentees. Once you add up the cost of travel and time, web conferencing is unbeatable value for money.";
            ct = new ContentText
            {
                NiceName = "Body for Conferencing",
                ContentTextType = repository.FindContentTextTypeByName("CONFERENCING_CATEGORY_BODY"),
                ContentTextData = data,
                BodyOrder = 2,
            };
            repository.AddContentText(ct);

            data = "Some providers even use high-definition audio and video which is why we still recommend flossing! Now at Compare Cloudware, we’re not suggesting you replace all physical meetings with virtual sessions but is does mean you can prioritise the appointments that should be done face-to-face and with a firm handshake. Just remember that sometimes even customers prefer to have a virtual cup of coffee rather than entertain.";
            ct = new ContentText
            {
                NiceName = "Body for Conferencing",
                ContentTextType = repository.FindContentTextTypeByName("CONFERENCING_CATEGORY_BODY"),
                ContentTextData = data,
                BodyOrder = 3,
            };
            repository.AddContentText(ct);
            #endregion

            #region PROJECT MANAGEMENT
            data = "Most of us try our upmost to manage our lives with a dose of common sense, perhaps the occasional ‘to do’ list and maybe even mark a calendar with a special event. For the most part that’s OK but sometimes we need a little extra help and that’s what this category is all about.";
            ct = new ContentText
            {
                NiceName = "Body for Project Management",
                ContentTextType = repository.FindContentTextTypeByName("PROJECTMANAGEMENT_CATEGORY_BODY"),
                ContentTextData = data,
                BodyOrder = 1,
            };
            repository.AddContentText(ct);

            data = "Successful project management is about keeping track of all the important (and seemingly unimportant things) in our more complex endeavours. Making sure certain tasks don’t fall between the cracks will help prevent wasted time, increased costs and rising blood pressure. So whether you’re building an extension, re-fitting a kitchen, developing an app, keeping tabs on an important assignment or even doing a work project outside your normal comfort zone, we suggest ditching the self-made ‘to do’ list (yes, even on a spreadsheet) and get something that can really help ease the burden.";
            ct = new ContentText
            {
                NiceName = "Body for Project Management",
                ContentTextType = repository.FindContentTextTypeByName("PROJECTMANAGEMENT_CATEGORY_BODY"),
                ContentTextData = data,
                BodyOrder = 2,
            };
            repository.AddContentText(ct);

            data = "Now of course you may be able to afford hiring a professional project manager or, better still, actually be one. So if you‘re already a skilled schemer you may find something new here that can help you keep on top of your game.";
            ct = new ContentText
            {
                NiceName = "Body for Project Management",
                ContentTextType = repository.FindContentTextTypeByName("PROJECTMANAGEMENT_CATEGORY_BODY"),
                ContentTextData = data,
                BodyOrder = 3,
            };
            repository.AddContentText(ct);
            #endregion

            #region STORAGE & BACK-UP
            data = "We humans love collecting things until we’re bursting to the brim with a lifetime of possessions and souvenirs. After a while we usually head to IKEA to box-up old keepsakes and maybe put those boxes in the cupboard, loft or garage for safe-keeping. Ultimately, we either get rid of the accumulating odds and ends or maybe decide to go to a yellow painted self-storage facility!";
            ct = new ContentText
            {
                NiceName = "Body for Storage & Back-Up",
                ContentTextType = repository.FindContentTextTypeByName("STORAGEANDBACKUP_CATEGORY_BODY"),
                ContentTextData = data,
                BodyOrder = 1,
            };
            repository.AddContentText(ct);

            data = "Now what about your digital life? Instead of having important files, photos and videos spread across multiple computers and moving them around when you buy new devices, wouldn’t be simpler and safer to have all those digital belongings in one manageable place? We think it is. So don’t wait for the ‘blue screen of death’, a stolen smartphone or laptop or even a fire (especially if you happen to live on a remote Caribbean island!) to ruin your digital existence.";
            ct = new ContentText
            {
                NiceName = "Body for Storage & Back-Up",
                ContentTextType = repository.FindContentTextTypeByName("STORAGEANDBACKUP_CATEGORY_BODY"),
                ContentTextData = data,
                BodyOrder = 2,
            };
            repository.AddContentText(ct);

            data = "Whether it is a lifetime of memories, a treasured music library or essential work documents, storage in the cloud is safer than houses.";
            ct = new ContentText
            {
                NiceName = "Body for Storage & Back-Up",
                ContentTextType = repository.FindContentTextTypeByName("STORAGEANDBACKUP_CATEGORY_BODY"),
                ContentTextData = data,
                BodyOrder = 3,
            };
            repository.AddContentText(ct);
            #endregion

            #region EMAIL
            data = "Email is one of life’s little treasures isn’t it? In fact with all the spam, junk mail, holiday competitions, cash prizes and coupons, finding the email message you want can sometimes feel like searching for hidden Aztec gold. So ask yourself the question, when was the last time you reviewed your email set-up? Go on admit it, it was probably when the X-Files was still on primetime.";
            ct = new ContentText
            {
                NiceName = "Body for Email",
                ContentTextType = repository.FindContentTextTypeByName("EMAIL_CATEGORY_BODY"),
                ContentTextData = data,
                BodyOrder = 1,
            };
            repository.AddContentText(ct);

            data = "Now whisper it quietly but email has lived in the Cloud for quite a while and our guess is that you’re already using it with at least one account somewhere in your digital life; whether at home or out and about on your smartphone. For most businesses, however, there are two catches:-";
            ct = new ContentText
            {
                NiceName = "Body for Email",
                ContentTextType = repository.FindContentTextTypeByName("EMAIL_CATEGORY_BODY"),
                ContentTextData = data,
                BodyOrder = 2,
            };
            repository.AddContentText(ct);

            data = "1. Keeping your email address that everybody knows.";
            ct = new ContentText
            {
                NiceName = "Body for Email",
                ContentTextType = repository.FindContentTextTypeByName("EMAIL_CATEGORY_BODY"),
                ContentTextData = data,
                BodyOrder = 3,
            };
            repository.AddContentText(ct);

            data = "2. How to ditch the expensive DIY email server that sits in the corner of the cupboard with the other blinking boxes!";
            ct = new ContentText
            {
                NiceName = "Body for Email",
                ContentTextType = repository.FindContentTextTypeByName("EMAIL_CATEGORY_BODY"),
                ContentTextData = data,
                BodyOrder = 4,
            };
            repository.AddContentText(ct);

            data = "Well, like everything in the Cloud, you don’t need a dedicated box of electronics to run anything and migrating to another provider with your existing email address is simple and straightforward. Even better you can archive all your email in the Cloud for instant back-up and disaster recovery. And for those of you that are still promoting your Internet Service Provider (ISP) brand in your email address? Shame on you, you’re missing the biggest marketing opportunity since the printing press!";
            ct = new ContentText
            {
                NiceName = "Body for Email",
                ContentTextType = repository.FindContentTextTypeByName("EMAIL_CATEGORY_BODY"),
                ContentTextData = data,
                BodyOrder = 5,
            };
            repository.AddContentText(ct);
            #endregion

            #region FINANCIAL
            data = "Are you still using spreadsheets to track your spending and payments? Are you still manually cross-referencing bank statements? Or worse, creating customer invoices using a word processor? Keeping track of the pennies is tough enough without creating more mess to try and keep on top of it all. Of course spreadsheets may have been a step-up from the handwritten ledger book but let’s be honest it’s still a major hassle.";
            ct = new ContentText
            {
                NiceName = "Body for Financial",
                ContentTextType = repository.FindContentTextTypeByName("FINANCIAL_CATEGORY_BODY"),
                ContentTextData = data,
                BodyOrder = 1,
            };
            repository.AddContentText(ct);

            data = "Whether you work from home, run a shop or look after a medium sized business, there is a cloudware service for you that makes finance and accounts a picnic rather than a dog’s dinner! So whether it is recording bank payments, looking at cashflow, creating invoices, running a payroll or helping with the tax return, you’ll find something tailored to your needs in this category.";
            ct = new ContentText
            {
                NiceName = "Body for Financial",
                ContentTextType = repository.FindContentTextTypeByName("FINANCIAL_CATEGORY_BODY"),
                ContentTextData = data,
                BodyOrder = 2,
            };
            repository.AddContentText(ct);

            data = "The good news is that if it does all get too much you can give access to your accountant to help tidy things up, now try and do that with a spreadsheet!";
            ct = new ContentText
            {
                NiceName = "Body for Financial",
                ContentTextType = repository.FindContentTextTypeByName("FINANCIAL_CATEGORY_BODY"),
                ContentTextData = data,
                BodyOrder = 3,
            };
            repository.AddContentText(ct);
            #endregion

            #region OFFICE
            data = "Do you buy expensive pre-loaded software because it’s less hassle than downloading or using CDs? We have all been guilty of that particular offence but now it’s no longer a sin that needs committing.";
            ct = new ContentText
            {
                NiceName = "Body for Office",
                ContentTextType = repository.FindContentTextTypeByName("OFFICE_CATEGORY_BODY"),
                ContentTextData = data,
                BodyOrder = 1,
            };
            repository.AddContentText(ct);

            data = "Like all cloud services, office applications and services are delivered on-demand, cheaper than their downloaded counterparts and using the latest version (so no more expensive upgrades!) With most office applications you can even work offline. Even better is the ability for members of a team to work on the same document in real time and retrieve files they need directly from the Cloud rather than somebody’s hard drive.";
            ct = new ContentText
            {
                NiceName = "Body for Office",
                ContentTextType = repository.FindContentTextTypeByName("OFFICE_CATEGORY_BODY"),
                ContentTextData = data,
                BodyOrder = 2,
            };
            repository.AddContentText(ct);

            data = "You can also forget about USB storage keys and emailing large documents, all you need is a username and a password to access your documents from anywhere. In addition to the standard fare of office suites, there is an abundance of specialist applications that enable office features on your smartphone, publish directly to a website, integrate with social media or even develop slick presentations with video. So unless you’re downloading yet another office software update or security patch, what are you waiting for?";
            ct = new ContentText
            {
                NiceName = "Body for Office",
                ContentTextType = repository.FindContentTextTypeByName("OFFICE_CATEGORY_BODY"),
                ContentTextData = data,
                BodyOrder = 3,
            };
            repository.AddContentText(ct);
            #endregion

            #region VOICE
            data = "The humble phone, great isn’t it? When all else fails at least you can pick-up the phone and talk to somebody. The reality is that one standard phone line only goes so far, well in fact one conversation at a time! How many calls are you missing from prospective customers or worse can existing customers get through to you? In the past, the answer was to get an expensive phone system and multiple phone lines.";
            ct = new ContentText
            {
                NiceName = "Body for Voice",
                ContentTextType = repository.FindContentTextTypeByName("VOICE_CATEGORY_BODY"),
                ContentTextData = data,
                BodyOrder = 1,
            };
            repository.AddContentText(ct);

            data = "Now with Cloud based phone systems you can have up to 8 lines with a single broadband connection with the ability to add smart functionality such as who answers the phone, automatic call routing, out-of-hours messaging, call forwarding, music-on-hold and separate direct dial extensions.Some providers even offer sophisticated call centre functionality with the ability to record calls.";
            ct = new ContentText
            {
                NiceName = "Body for Voice",
                ContentTextType = repository.FindContentTextTypeByName("VOICE_CATEGORY_BODY"),
                ContentTextData = data,
                BodyOrder = 2,
            };
            repository.AddContentText(ct);

            data = "In most cases you can keep your existing number and buy additional extensions as you need them even for staff located in different offices or at home. You won’t need to buy any dedicated phone equipment, it’s literally just another application available on-demand from the Cloud.";
            ct = new ContentText
            {
                NiceName = "Body for Voice",
                ContentTextType = repository.FindContentTextTypeByName("VOICE_CATEGORY_BODY"),
                ContentTextData = data,
                BodyOrder = 3,
            };
            repository.AddContentText(ct);
            #endregion

            #region CUSTOMER MANAGEMENT
            data = "What is your most important business asset? Well aside from that top of the range coffee machine that makes dreamy cappuccino, it should be your customer (even if you happen to be Costa Coffee!). The cold hard truth, however, is that customers are often neglected instead of being cherished and nurtured like an eggnog latte at Christmas. Frankly, if you have only a couple of clients you can probably get away with personal after-sales calls, spreadsheets and invoices created on a word processor.";
            ct = new ContentText
            {
                NiceName = "Body for Customer Management",
                ContentTextType = repository.FindContentTextTypeByName("CUSTOMERMANAGEMENT_CATEGORY_BODY"),
                ContentTextData = data,
                BodyOrder = 1,
            };
            repository.AddContentText(ct);

            data = "The reality is that if you’re out and about, have more than a handful of clients and a few staff that need to share customer information, you need something better than scraps of paper, post-it notes, email and office software. With Cloud based customer relationship management (known in the IT trade as CRM), you can keep in touch with customers or prospective customers at a touch of a button.";
            ct = new ContentText
            {
                NiceName = "Body for Customer Management",
                ContentTextType = repository.FindContentTextTypeByName("CUSTOMERMANAGEMENT_CATEGORY_BODY"),
                ContentTextData = data,
                BodyOrder = 2,
            };
            repository.AddContentText(ct);

            data = "Most services are easy to set-up and even work with cloud based email and phone systems. You can even integrate enquiry forms on your website to generate new business or help existing customers whilst using your smartphone to keep on top of what’s happening. Before you know it, you’ll be running customer campaigns, running a virtual helpdesk and forecasting sales like the big boys but at a tiny fraction of the cost!.";
            ct = new ContentText
            {
                NiceName = "Body for Customer Management",
                ContentTextType = repository.FindContentTextTypeByName("CUSTOMERMANAGEMENT_CATEGORY_BODY"),
                ContentTextData = data,
                BodyOrder = 3,
            };
            repository.AddContentText(ct);
            #endregion

            #endregion

            #region CLOUDWARE EXPLAINED
            data = "Cloudware is changing the way companies, enterprises and organisations work, but what exactly is it, what are the advantages and why is it generating so much interest? This short guide will give you the answers and turn you into a cloudware expert.";
            ct = new ContentText
            {
                NiceName = "",
                ContentTextType = repository.FindContentTextTypeByName("CLOUDWAREEXPLAINED_TITLE"),
                ContentTextData = data,
                BodyOrder = 1,
            };
            repository.AddContentText(ct);

            
            compositeID = Guid.NewGuid().ToString();
            data = "What is cloudware?";
            ct = new ContentText
            {
                NiceName = "",
                CompositeID = compositeID,
                ContentTextType = repository.FindContentTextTypeByName("CLOUDWAREEXPLAINED_SECTION_TITLE"),
                ContentTextData = data,
                BodyOrder = 1,
            };
            repository.AddContentText(ct);
            data = "Cloudware is any application or service delivered through an internet browser to PCs, laptops or smartphones. Users don’t need to buy and install software on their machines, and neither do they need high-end hardware. Because everything is accessed through the cloud, an internet connection is all that is required.";
            ct = new ContentText
            {
                NiceName = "",
                CompositeID = compositeID,
                ContentTextType = repository.FindContentTextTypeByName("CLOUDWAREEXPLAINED_SECTION_BODY"),
                ContentTextData = data,
                BodyOrder = 1,
            };
            repository.AddContentText(ct);


            compositeID = Guid.NewGuid().ToString();
            data = "Why ‘cloud’ and ‘cloudware’?";
            ct = new ContentText
            {
                NiceName = "",
                CompositeID = compositeID,
                ContentTextType = repository.FindContentTextTypeByName("CLOUDWAREEXPLAINED_SECTION_TITLE"),
                ContentTextData = data,
                BodyOrder = 2,
            };
            repository.AddContentText(ct);
            data = "The term ‘cloud’ derives from the use of a cloud-shaped symbol in system diagrams that show the set of services and technologies required to deliver applications over the Internet in real-time. ‘Cloudware’ is a natural and logical extension to express how it differs from traditional hardware and software.";
            ct = new ContentText
            {
                NiceName = "",
                CompositeID = compositeID,
                ContentTextType = repository.FindContentTextTypeByName("CLOUDWAREEXPLAINED_SECTION_BODY"),
                ContentTextData = data,
                BodyOrder = 2,
            };
            repository.AddContentText(ct);


            compositeID = Guid.NewGuid().ToString();
            data = "How long has cloudware been around?";
            ct = new ContentText
            {
                NiceName = "",
                CompositeID = compositeID,
                ContentTextType = repository.FindContentTextTypeByName("CLOUDWAREEXPLAINED_SECTION_TITLE"),
                ContentTextData = data,
                BodyOrder = 3,
            };
            repository.AddContentText(ct);
            data = "Longer than you think. Hotmail, for example, has been providing its web-based email service since 1996. Salesforce.com, one of the world’s most popular Customer Relationship Management solutions that is delivered online and paid for on a subscription basis, started up in 1999.";
            ct = new ContentText
            {
                NiceName = "",
                CompositeID = compositeID,
                ContentTextType = repository.FindContentTextTypeByName("CLOUDWAREEXPLAINED_SECTION_BODY"),
                ContentTextData = data,
                BodyOrder = 3,
            };
            repository.AddContentText(ct);


            compositeID = Guid.NewGuid().ToString();
            data = "Why the increased interest in cloudware?";
            ct = new ContentText
            {
                NiceName = "",
                CompositeID = compositeID,
                ContentTextType = repository.FindContentTextTypeByName("CLOUDWAREEXPLAINED_SECTION_TITLE"),
                ContentTextData = data,
                BodyOrder = 4,
            };
            repository.AddContentText(ct);
            data = "The spread of the internet, in particular broadband access on a range of devices, has moved cloudware from a niche position into the mainstream. Users now know that, wherever they are, they can access cloudware applications and services on their PC, laptop or smartphone.";
            ct = new ContentText
            {
                NiceName = "",
                CompositeID = compositeID,
                ContentTextType = repository.FindContentTextTypeByName("CLOUDWAREEXPLAINED_SECTION_BODY"),
                ContentTextData = data,
                BodyOrder = 4,
            };
            repository.AddContentText(ct);


            compositeID = Guid.NewGuid().ToString();
            data = "What are the operating benefits of cloudware?";
            ct = new ContentText
            {
                NiceName = "",
                CompositeID = compositeID,
                ContentTextType = repository.FindContentTextTypeByName("CLOUDWAREEXPLAINED_SECTION_TITLE"),
                ContentTextData = data,
                BodyOrder = 5,
            };
            repository.AddContentText(ct);
            data = "The three major operating benefits are time, simplicity and flexibility. With a traditional hardware/software-based setup, companies and organisations need to install, maintain and update applications on multiple machines. In addition, servers are often required to store and back up data. Because Cloudware is accessed online, all of the maintenance and storage is handled by the cloudware provider. Users can literally sit down and work without having to address any technical issues. Companies and organisations, meanwhile, can make moves, adds and changes in seconds.";
            ct = new ContentText
            {
                NiceName = "",
                CompositeID = compositeID,
                ContentTextType = repository.FindContentTextTypeByName("CLOUDWAREEXPLAINED_SECTION_BODY"),
                ContentTextData = data,
                BodyOrder = 5,
            };
            repository.AddContentText(ct);


            compositeID = Guid.NewGuid().ToString();
            data = "What are the cost advantages of cloudware?";
            ct = new ContentText
            {
                NiceName = "",
                CompositeID = compositeID,
                ContentTextType = repository.FindContentTextTypeByName("CLOUDWAREEXPLAINED_SECTION_TITLE"),
                ContentTextData = data,
                BodyOrder = 6,
            };
            repository.AddContentText(ct);
            data = "The first major cost advantage of cloudware is that it moves the cost of using applications and services from capital expenditure to operating expenditure. Rather than paying a large up-front sum for software, it is paid for on a subscription basis, so businesses only pay for what they actually need. The second cost advantage is that cloudware can be accessed on any PC, laptop or smartphone with an internet browser, reducing the need to invest in the latest hardware. The third advantage is that cloudware applications and services can be turned on or off as required, so seasonal fluctuations in business can be accommodated without penalties.";
            ct = new ContentText
            {
                NiceName = "",
                CompositeID = compositeID,
                ContentTextType = repository.FindContentTextTypeByName("CLOUDWAREEXPLAINED_SECTION_BODY"),
                ContentTextData = data,
                BodyOrder = 6,
            };
            repository.AddContentText(ct);


            compositeID = Guid.NewGuid().ToString();
            data = "What types of organisations use cloudware?";
            ct = new ContentText
            {
                NiceName = "",
                CompositeID = compositeID,
                ContentTextType = repository.FindContentTextTypeByName("CLOUDWAREEXPLAINED_SECTION_TITLE"),
                ContentTextData = data,
                BodyOrder = 7,
            };
            repository.AddContentText(ct);
            data = "Every type of organisation, business, enterprise and public sector body is now turning to cloudware as a viable, cost-effective solution. For enterprises, it simplifies complicated IT infrastructures. For growing businesses, it allows them to access applications and services that, until now, have been prohibitively expensive.";
            ct = new ContentText
            {
                NiceName = "",
                CompositeID = compositeID,
                ContentTextType = repository.FindContentTextTypeByName("CLOUDWAREEXPLAINED_SECTION_BODY"),
                ContentTextData = data,
                BodyOrder = 7,
            };
            repository.AddContentText(ct);


            compositeID = Guid.NewGuid().ToString();
            data = "What is available as cloudware?";
            ct = new ContentText
            {
                NiceName = "",
                CompositeID = compositeID,
                ContentTextType = repository.FindContentTextTypeByName("CLOUDWAREEXPLAINED_SECTION_TITLE"),
                ContentTextData = data,
                BodyOrder = 8,
            };
            repository.AddContentText(ct);
            data = "Think of e-mail or project management, CRM or web conferencing, storage and backup or finance, security or office applications, and there will be a cloudware solution that can help your business. You can check the full listing of categories here but check back soon. The cloudware market is growing quickly.";
            ct = new ContentText
            {
                NiceName = "",
                CompositeID = compositeID,
                ContentTextType = repository.FindContentTextTypeByName("CLOUDWAREEXPLAINED_SECTION_BODY"),
                ContentTextData = data,
                BodyOrder = 8,
            };
            repository.AddContentText(ct);


            compositeID = Guid.NewGuid().ToString();
            data = "What does my company need to run cloudware?";
            ct = new ContentText
            {
                NiceName = "",
                CompositeID = compositeID,
                ContentTextType = repository.FindContentTextTypeByName("CLOUDWAREEXPLAINED_SECTION_TITLE"),
                ContentTextData = data,
                BodyOrder = 9,
            };
            repository.AddContentText(ct);
            data = "A broadband internet connection and a PC or laptop. That’s it. Because cloudware is delivered through the cloud, and because the data it generates is stored in the cloud, all you need to run cloudware is access to the internet and a web browser like Internet Explorer.";
            ct = new ContentText
            {
                NiceName = "",
                CompositeID = compositeID,
                ContentTextType = repository.FindContentTextTypeByName("CLOUDWAREEXPLAINED_SECTION_BODY"),
                ContentTextData = data,
                BodyOrder = 9,
            };
            repository.AddContentText(ct);


            compositeID = Guid.NewGuid().ToString();
            data = "Can I integrate cloudware with other applications?";
            ct = new ContentText
            {
                NiceName = "",
                CompositeID = compositeID,
                ContentTextType = repository.FindContentTextTypeByName("CLOUDWAREEXPLAINED_SECTION_TITLE"),
                ContentTextData = data,
                BodyOrder = 10,
            };
            repository.AddContentText(ct);
            data = "It depends on the cloudware itself. Some cloudware applications and services can be integrated with standard business applications, others are independent. The best way to find out is to use our online comparison tool which will show you where integration is a key feature.";
            ct = new ContentText
            {
                NiceName = "",
                CompositeID = compositeID,
                ContentTextType = repository.FindContentTextTypeByName("CLOUDWAREEXPLAINED_SECTION_BODY"),
                ContentTextData = data,
                BodyOrder = 10,
            };
            repository.AddContentText(ct);

            #endregion

            #region 10 REASONS FOR USING CLOUDWARE
            //data = "10 REASONS FOR USING CLOUDWARE";
            //ct = new ContentText
            //{
            //    NiceName = "",
            //    ContentTextType = repository.FindContentTextTypeByName("10REASONSFORUSINGCLOUDWARE_TITLE"),
            //    ContentTextData = data,
            //    BodyOrder = 1,
            //};
            //repository.AddContentText(ct);


            compositeID = Guid.NewGuid().ToString();
            data = "Lower costs";
            ct = new ContentText
            {
                NiceName = "",
                CompositeID = compositeID,
                ContentTextType = repository.FindContentTextTypeByName("10REASONSFORUSINGCLOUDWARE_SECTION_TITLE"),
                ContentTextData = data,
                BodyOrder = 1,
            };
            repository.AddContentText(ct);
            data = "As a Pay-As-You-Go service, accessing Cloudware involves no big up-front capital sum or on-going commitment. You pay a low monthly subscription which can be ended when you choose.";
            ct = new ContentText
            {
                NiceName = "",
                CompositeID = compositeID,
                ContentTextType = repository.FindContentTextTypeByName("10REASONSFORUSINGCLOUDWARE_SECTION_BODY"),
                ContentTextData = data,
                BodyOrder = 1,
            };
            repository.AddContentText(ct);


            compositeID = Guid.NewGuid().ToString();
            data = "Scalability";
            ct = new ContentText
            {
                NiceName = "",
                CompositeID = compositeID,
                ContentTextType = repository.FindContentTextTypeByName("10REASONSFORUSINGCLOUDWARE_SECTION_TITLE"),
                ContentTextData = data,
                BodyOrder = 2,
            };
            repository.AddContentText(ct);
            data = "Growing businesses often have fluctuations in their business cycle. Cloudware lets you ride those fluctuations so that the cost you pay reflects the usage you need. You can increase or reduce the number of users when you want to without penalty.";
            ct = new ContentText
            {
                NiceName = "",
                CompositeID = compositeID,
                ContentTextType = repository.FindContentTextTypeByName("10REASONSFORUSINGCLOUDWARE_SECTION_BODY"),
                ContentTextData = data,
                BodyOrder = 2,
            };
            repository.AddContentText(ct);


            compositeID = Guid.NewGuid().ToString();
            data = "Reduced risk";
            ct = new ContentText
            {
                NiceName = "",
                CompositeID = compositeID,
                ContentTextType = repository.FindContentTextTypeByName("10REASONSFORUSINGCLOUDWARE_SECTION_TITLE"),
                ContentTextData = data,
                BodyOrder = 3,
            };
            repository.AddContentText(ct);
            data = "Backing up data is a necessity in any business. By its very nature, Cloudware applications backs up data continuously, providing an instant business continuity advantage.";
            ct = new ContentText
            {
                NiceName = "",
                CompositeID = compositeID,
                ContentTextType = repository.FindContentTextTypeByName("10REASONSFORUSINGCLOUDWARE_SECTION_BODY"),
                ContentTextData = data,
                BodyOrder = 3,
            };
            repository.AddContentText(ct);


            compositeID = Guid.NewGuid().ToString();
            data = "Simpler IT setup";
            ct = new ContentText
            {
                NiceName = "",
                CompositeID = compositeID,
                ContentTextType = repository.FindContentTextTypeByName("10REASONSFORUSINGCLOUDWARE_SECTION_TITLE"),
                ContentTextData = data,
                BodyOrder = 4,
            };
            repository.AddContentText(ct);
            data = "As businesses grow, the need to offer more and more users more and more applications on their PCs, laptops and smartphones can become an IT headache. Because cloudware and the data it generates is accessed remotely, it removes the need for a large IT infrastructure.";
            ct = new ContentText
            {
                NiceName = "",
                CompositeID = compositeID,
                ContentTextType = repository.FindContentTextTypeByName("10REASONSFORUSINGCLOUDWARE_SECTION_BODY"),
                ContentTextData = data,
                BodyOrder = 4,
            };
            repository.AddContentText(ct);


            compositeID = Guid.NewGuid().ToString();
            data = "Enterprise-class applications";
            ct = new ContentText
            {
                NiceName = "",
                CompositeID = compositeID,
                ContentTextType = repository.FindContentTextTypeByName("10REASONSFORUSINGCLOUDWARE_SECTION_TITLE"),
                ContentTextData = data,
                BodyOrder = 5,
            };
            repository.AddContentText(ct);
            data = "For years, enterprises have been able to use complicated, costly applications that have kept them ahead of growing businesses. Cloudware levels the playing field by offering high-end applications to everyone at a much lower entry cost.";
            ct = new ContentText
            {
                NiceName = "",
                CompositeID = compositeID,
                ContentTextType = repository.FindContentTextTypeByName("10REASONSFORUSINGCLOUDWARE_SECTION_BODY"),
                ContentTextData = data,
                BodyOrder = 5,
            };
            repository.AddContentText(ct);


            compositeID = Guid.NewGuid().ToString();
            data = "Automated updates";
            ct = new ContentText
            {
                NiceName = "",
                CompositeID = compositeID,
                ContentTextType = repository.FindContentTextTypeByName("10REASONSFORUSINGCLOUDWARE_SECTION_TITLE"),
                ContentTextData = data,
                BodyOrder = 6,
            };
            repository.AddContentText(ct);
            data = "Traditional software ties businesses in to an endless round of updates, patches and fixes, many of which have to be installed on lots of different PCs, laptops and smartphones. Cloudware is updated automatically in the background so users are always using the latest, most advanced applications.";
            ct = new ContentText
            {
                NiceName = "",
                CompositeID = compositeID,
                ContentTextType = repository.FindContentTextTypeByName("10REASONSFORUSINGCLOUDWARE_SECTION_BODY"),
                ContentTextData = data,
                BodyOrder = 6,
            };
            repository.AddContentText(ct);


            compositeID = Guid.NewGuid().ToString();
            data = "Anywhere accessibility";
            ct = new ContentText
            {
                NiceName = "",
                CompositeID = compositeID,
                ContentTextType = repository.FindContentTextTypeByName("10REASONSFORUSINGCLOUDWARE_SECTION_TITLE"),
                ContentTextData = data,
                BodyOrder = 7,
            };
            repository.AddContentText(ct);
            data = "Rather than being tied to the office, cloudware frees users to access the applications they want and the data they need, anywhere they happen to be that has an internet connection.";
            ct = new ContentText
            {
                NiceName = "",
                CompositeID = compositeID,
                ContentTextType = repository.FindContentTextTypeByName("10REASONSFORUSINGCLOUDWARE_SECTION_BODY"),
                ContentTextData = data,
                BodyOrder = 7,
            };
            repository.AddContentText(ct);


            compositeID = Guid.NewGuid().ToString();
            data = "Any device access";
            ct = new ContentText
            {
                NiceName = "",
                CompositeID = compositeID,
                ContentTextType = repository.FindContentTextTypeByName("10REASONSFORUSINGCLOUDWARE_SECTION_TITLE"),
                ContentTextData = data,
                BodyOrder = 8,
            };
            repository.AddContentText(ct);
            data = "Business users might start work on a PC in the office, continue on a laptop at home and use a smartphone to check on some details in a meeting. Cloudware makes everything far easier because different versions of the same application do not need to be installed on multiple devices. Any device can be used to access the same applications and data.";
            ct = new ContentText
            {
                NiceName = "",
                CompositeID = compositeID,
                ContentTextType = repository.FindContentTextTypeByName("10REASONSFORUSINGCLOUDWARE_SECTION_BODY"),
                ContentTextData = data,
                BodyOrder = 8,
            };
            repository.AddContentText(ct);


            compositeID = Guid.NewGuid().ToString();
            data = "Speed of access";
            ct = new ContentText
            {
                NiceName = "",
                CompositeID = compositeID,
                ContentTextType = repository.FindContentTextTypeByName("10REASONSFORUSINGCLOUDWARE_SECTION_TITLE"),
                ContentTextData = data,
                BodyOrder = 9,
            };
            repository.AddContentText(ct);
            data = "Installing new applications — and ensuring they work with existing applications and other devices — can take an age. With cloudware, users can choose the application they want and start using it in minutes, sometimes seconds.";
            ct = new ContentText
            {
                NiceName = "",
                CompositeID = compositeID,
                ContentTextType = repository.FindContentTextTypeByName("10REASONSFORUSINGCLOUDWARE_SECTION_BODY"),
                ContentTextData = data,
                BodyOrder = 9,
            };
            repository.AddContentText(ct);


            compositeID = Guid.NewGuid().ToString();
            data = "A wider choice";
            ct = new ContentText
            {
                NiceName = "",
                CompositeID = compositeID,
                ContentTextType = repository.FindContentTextTypeByName("10REASONSFORUSINGCLOUDWARE_SECTION_TITLE"),
                ContentTextData = data,
                BodyOrder = 10,
            };
            repository.AddContentText(ct);
            data = "Business users have been limited in the past in terms of the number and type of applications they can use to enhance their efficiency and competitiveness. The cloudware market is growing exponentially with developers and vendors creating and sourcing a wide variety of applications.";
            ct = new ContentText
            {
                NiceName = "",
                CompositeID = compositeID,
                ContentTextType = repository.FindContentTextTypeByName("10REASONSFORUSINGCLOUDWARE_SECTION_BODY"),
                ContentTextData = data,
                BodyOrder = 10,
            };
            repository.AddContentText(ct);

            #endregion

            #region WHAT DOES MY BUSINESS NEED TO RUN CLOUDWARE
            data = "Cloudware is changing the way companies and organisations do business. Naturally, however, there will be some reservations about turning to a subscription-based software service.";
            ct = new ContentText
            {
                NiceName = "",
                ContentTextType = repository.FindContentTextTypeByName("WHATDOESMYBUSINESSNEEDTORUNCLOUDWARE_TITLE"),
                ContentTextData = data,
                BodyOrder = 1,
            };
            repository.AddContentText(ct);

            data = "We’ve tried to answer the most commonly asked questions about how to ensure your business is ready for cloudware below, but if you have other questions, take a look through the Forums to see if they have been asked before, or raise the question yourself.";
            ct = new ContentText
            {
                NiceName = "",
                ContentTextType = repository.FindContentTextTypeByName("WHATDOESMYBUSINESSNEEDTORUNCLOUDWARE_SUBTITLE"),
                ContentTextData = data,
                BodyOrder = 1,
            };
            repository.AddContentText(ct);

            compositeID = Guid.NewGuid().ToString();
            data = "What versions of browsers are required?";
            ct = new ContentText
            {
                NiceName = "",
                CompositeID = compositeID,
                ContentTextType = repository.FindContentTextTypeByName("WHATDOESMYBUSINESSNEEDTORUNCLOUDWARE_SECTION_TITLE"),
                ContentTextData = data,
                BodyOrder = 1,
            };
            repository.AddContentText(ct);
            data = "Most cloudware applications and services run with all of the most popular internet browsers including Internet Explorer, Firefox and Safari. They will normally run using older versions of the browsers, but for optimum performance we recommend downloading the latest version. For specific details, check the ‘Internet Browser’ section of the comparison table.";
            ct = new ContentText
            {
                NiceName = "",
                CompositeID = compositeID,
                ContentTextType = repository.FindContentTextTypeByName("WHATDOESMYBUSINESSNEEDTORUNCLOUDWARE_SECTION_BODY"),
                ContentTextData = data,
                BodyOrder = 1,
            };
            repository.AddContentText(ct);


            compositeID = Guid.NewGuid().ToString();
            data = "What broadband speed is required?";
            ct = new ContentText
            {
                NiceName = "",
                CompositeID = compositeID,
                ContentTextType = repository.FindContentTextTypeByName("WHATDOESMYBUSINESSNEEDTORUNCLOUDWARE_SECTION_TITLE"),
                ContentTextData = data,
                BodyOrder = 2,
            };
            repository.AddContentText(ct);
            data = "Cloudware applications and services are designed to run on any broadband connection, whether at home, in the office, or through a mobile. Do be aware, however, that typical business broadband speeds are around 20 Mpbs, while broadband speeds at home and on mobiles are lower. Applications and services will therefore always run faster in office environments.";
            ct = new ContentText
            {
                NiceName = "",
                CompositeID = compositeID,
                ContentTextType = repository.FindContentTextTypeByName("WHATDOESMYBUSINESSNEEDTORUNCLOUDWARE_SECTION_BODY"),
                ContentTextData = data,
                BodyOrder = 2,
            };
            repository.AddContentText(ct);


            compositeID = Guid.NewGuid().ToString();
            data = "How many users can access the same cloudware at the same time?";
            ct = new ContentText
            {
                NiceName = "",
                CompositeID = compositeID,
                ContentTextType = repository.FindContentTextTypeByName("WHATDOESMYBUSINESSNEEDTORUNCLOUDWARE_SECTION_TITLE"),
                ContentTextData = data,
                BodyOrder = 3,
            };
            repository.AddContentText(ct);
            data = "This depends on the cloudware application or service being used. Some products are limited to a small number of users, others can be accessed by hundreds of users. Check the ‘Users’ section in the comparison table to confirm the exact number.";
            ct = new ContentText
            {
                NiceName = "",
                CompositeID = compositeID,
                ContentTextType = repository.FindContentTextTypeByName("WHATDOESMYBUSINESSNEEDTORUNCLOUDWARE_SECTION_BODY"),
                ContentTextData = data,
                BodyOrder = 3,
            };
            repository.AddContentText(ct);


            compositeID = Guid.NewGuid().ToString();
            data = "What mobile platforms are supported?";
            ct = new ContentText
            {
                NiceName = "",
                CompositeID = compositeID,
                ContentTextType = repository.FindContentTextTypeByName("WHATDOESMYBUSINESSNEEDTORUNCLOUDWARE_SECTION_TITLE"),
                ContentTextData = data,
                BodyOrder = 4,
            };
            repository.AddContentText(ct);
            data = "The three major mobile platforms in the UK — Apple, BlackBerry and Android — are supported by cloudware applications and services, with some vendors working on one or two platforms and others working on all of them. When you compare different products, check the ‘Mobile platform’ feature to ensure your mobile platform is included.";
            ct = new ContentText
            {
                NiceName = "",
                CompositeID = compositeID,
                ContentTextType = repository.FindContentTextTypeByName("WHATDOESMYBUSINESSNEEDTORUNCLOUDWARE_SECTION_BODY"),
                ContentTextData = data,
                BodyOrder = 4,
            };
            repository.AddContentText(ct);


            compositeID = Guid.NewGuid().ToString();
            data = "What level of mobile broadband is required?";
            ct = new ContentText
            {
                NiceName = "",
                CompositeID = compositeID,
                ContentTextType = repository.FindContentTextTypeByName("WHATDOESMYBUSINESSNEEDTORUNCLOUDWARE_SECTION_TITLE"),
                ContentTextData = data,
                BodyOrder = 5,
            };
            repository.AddContentText(ct);
            data = "One of the big advantages of Cloudware applications and services is their ability to be accessed on mobile devices like smartphones. To ensure the optimum performance, we recommend a minimum 3G connection. Check with your mobile phone provider to ensure your mobile devices are 3G.";
            ct = new ContentText
            {
                NiceName = "",
                CompositeID = compositeID,
                ContentTextType = repository.FindContentTextTypeByName("WHATDOESMYBUSINESSNEEDTORUNCLOUDWARE_SECTION_BODY"),
                ContentTextData = data,
                BodyOrder = 5,
            };
            repository.AddContentText(ct);


            compositeID = Guid.NewGuid().ToString();
            data = "What firewall considerations are required?";
            ct = new ContentText
            {
                NiceName = "",
                CompositeID = compositeID,
                ContentTextType = repository.FindContentTextTypeByName("WHATDOESMYBUSINESSNEEDTORUNCLOUDWARE_SECTION_TITLE"),
                ContentTextData = data,
                BodyOrder = 6,
            };
            repository.AddContentText(ct);
            data = "… to be researched …";
            ct = new ContentText
            {
                NiceName = "",
                CompositeID = compositeID,
                ContentTextType = repository.FindContentTextTypeByName("WHATDOESMYBUSINESSNEEDTORUNCLOUDWARE_SECTION_BODY"),
                ContentTextData = data,
                BodyOrder = 6,
            };
            repository.AddContentText(ct);


            compositeID = Guid.NewGuid().ToString();
            data = "What’s required for internet telephony/VoIP?";
            ct = new ContentText
            {
                NiceName = "",
                CompositeID = compositeID,
                ContentTextType = repository.FindContentTextTypeByName("WHATDOESMYBUSINESSNEEDTORUNCLOUDWARE_SECTION_TITLE"),
                ContentTextData = data,
                BodyOrder = 7,
            };
            repository.AddContentText(ct);
            data = "… to be researched …";
            ct = new ContentText
            {
                NiceName = "",
                CompositeID = compositeID,
                ContentTextType = repository.FindContentTextTypeByName("WHATDOESMYBUSINESSNEEDTORUNCLOUDWARE_SECTION_BODY"),
                ContentTextData = data,
                BodyOrder = 7,
            };
            repository.AddContentText(ct);


            compositeID = Guid.NewGuid().ToString();
            data = "What settings need to be turned on within the O/S";
            ct = new ContentText
            {
                NiceName = "",
                CompositeID = compositeID,
                ContentTextType = repository.FindContentTextTypeByName("WHATDOESMYBUSINESSNEEDTORUNCLOUDWARE_SECTION_TITLE"),
                ContentTextData = data,
                BodyOrder = 8,
            };
            repository.AddContentText(ct);
            data = "Cloudware applications and services typically use a combination of plug-ins and Java. This allows them to work on multiple devices. You should therefore check the preferences in your browser settings to ensure plug-ins, Java and JavaScript are all enabled.";
            ct = new ContentText
            {
                NiceName = "",
                CompositeID = compositeID,
                ContentTextType = repository.FindContentTextTypeByName("WHATDOESMYBUSINESSNEEDTORUNCLOUDWARE_SECTION_BODY"),
                ContentTextData = data,
                BodyOrder = 8,
            };
            repository.AddContentText(ct);



            #endregion

            #region ABOUT US
            data = "About us";
            ct = new ContentText
            {
                NiceName = "",
                ContentTextType = repository.FindContentTextTypeByName("ABOUTUS_TITLE"),
                ContentTextData = data,
                BodyOrder = 1,
            };
            repository.AddContentText(ct);
            data = "About us";
            ct = new ContentText
            {
                NiceName = "",
                CompositeID = compositeID,
                ContentTextType = repository.FindContentTextTypeByName("ABOUTUS_SECTION_TITLE"),
                ContentTextData = data,
                BodyOrder = 1,
            };
            repository.AddContentText(ct);
            data = "Cloudware, or Software as a Service (SaaS), has been around for a long time. Think of Hotmail or Salesforce.com and you get the picture. What hasn’t emerged until now is a one-stop resource for the research, comparison and selection of cloudware.";
            ct = new ContentText
            {
                NiceName = "",
                CompositeID = compositeID,
                ContentTextType = repository.FindContentTextTypeByName("ABOUTUS_SECTION_BODY"),
                ContentTextData = data,
                BodyOrder = 1,
            };
            repository.AddContentText(ct);
            data = "That’s where Compare Cloudware steps in. As the first website to recognise the importance of choice, independent advice and easy access to cloud providers, we cut through the hype and confusion of choosing on-demand software and services.";
            ct = new ContentText
            {
                NiceName = "",
                CompositeID = compositeID,
                ContentTextType = repository.FindContentTextTypeByName("ABOUTUS_SECTION_BODY"),
                ContentTextData = data,
                BodyOrder = 2,
            };
            repository.AddContentText(ct);
            data = "With a solid understanding of marketing and sales, cloud technologies and services, we provide the first comprehensive digital sales channel for vendors and a trusted source of advice for growing businesses.";
            ct = new ContentText
            {
                NiceName = "",
                CompositeID = compositeID,
                ContentTextType = repository.FindContentTextTypeByName("ABOUTUS_SECTION_BODY"),
                ContentTextData = data,
                BodyOrder = 3,
            };
            repository.AddContentText(ct);
            data = "For vendors and businesses alike, Compare Cloudware offers a user experience that is focused on what they really need. Vendors can target growing businesses efficiently and cost-effectively. Businesses can access a unique guide to services and applications available in the cloud and use an online comparison tool to find the perfect solution.";
            ct = new ContentText
            {
                NiceName = "",
                CompositeID = compositeID,
                ContentTextType = repository.FindContentTextTypeByName("ABOUTUS_SECTION_BODY"),
                ContentTextData = data,
                BodyOrder = 4,
            };
            repository.AddContentText(ct);
            data = "Compare Cloudware. We’re opening the cloud for business.";
            ct = new ContentText
            {
                NiceName = "",
                CompositeID = compositeID,
                ContentTextType = repository.FindContentTextTypeByName("ABOUTUS_SECTION_BODY"),
                ContentTextData = data,
                BodyOrder = 5,
                IsBold = true,
            };
            repository.AddContentText(ct);
            #endregion

            #region MANAGEMENT TEAM
            data = "Management team";
            ct = new ContentText
            {
                NiceName = "",
                ContentTextType = repository.FindContentTextTypeByName("MANAGEMENTTEAM_TITLE"),
                ContentTextData = data,
                BodyOrder = 1,
            };
            repository.AddContentText(ct);

            compositeID = Guid.NewGuid().ToString();
            data = "Compare Cloudware was founded by a team of professionals who have been at the forefront of the IT sector for many years. Their combined knowledge of the technologies and systems of virtually every major IT provider has provided the insight necessary to make Compare Cloudware a unique one-stop marketplace for cloudware users and vendors.";
            ct = new ContentText
            {
                NiceName = "",
                CompositeID = compositeID,
                ContentTextType = repository.FindContentTextTypeByName("MANAGEMENTTEAM_SECTION_TITLE"),
                ContentTextData = data,
                BodyOrder = 1,
            };
            repository.AddContentText(ct);
            compositeID = Guid.NewGuid().ToString();
            data = "Andrew Miller, Managing Director";
            ct = new ContentText
            {
                NiceName = "",
                CompositeID = compositeID,
                ContentTextType = repository.FindContentTextTypeByName("MANAGEMENTTEAM_SECTION_TITLE"),
                ContentTextData = data,
                BodyOrder = 2,
                IsBold = true,
                ContentTextGraphic = GetImageAsBytes(PORTRAIT_FILEPATH + PORTRAIT_ANDREW),
            };
            repository.AddContentText(ct);
            data = "As the Managing Director of Wilson Miller, a leading technology marketing agency, Andrew has worked with some of the leading brands in information and technology including AT&T, HP, Cisco, McAfee, Cable&Wireless, and NEC. He has over 20 years’ experience in marketing and technology and has previously worked with major players like the WPP Group and PricewaterhouseCoopers.";
            ct = new ContentText
            {
                NiceName = "",
                CompositeID = compositeID,
                ContentTextType = repository.FindContentTextTypeByName("MANAGEMENTTEAM_SECTION_BODY"),
                ContentTextData = data,
                BodyOrder = 2,
            };
            repository.AddContentText(ct);
            compositeID = Guid.NewGuid().ToString();
            data = "Gary Gould, Director";
            ct = new ContentText
            {
                NiceName = "",
                CompositeID = compositeID,
                ContentTextType = repository.FindContentTextTypeByName("MANAGEMENTTEAM_SECTION_TITLE"),
                ContentTextData = data,
                BodyOrder = 3,
                IsBold = true,
                ContentTextGraphic = GetImageAsBytes(PORTRAIT_FILEPATH + PORTRAIT_GARY),
            };
            repository.AddContentText(ct);
            data = "Prior to his current role as EMEA Theatre Marketing Director for Panduit, Gary was the Global Launch marketing lead for Cisco Systems, covering the service provider, broadcast and enterprise technology franchises. An active member of two leading technology sector marketing associations and a long-standing associate of the CIM, Gary has over 15 years’ experience in the IT and Communications sector and has worked with major brands including BT, Verizon, Virgin Media, and Cable&Wireless.";
            ct = new ContentText
            {
                NiceName = "",
                CompositeID = compositeID,
                ContentTextType = repository.FindContentTextTypeByName("MANAGEMENTTEAM_SECTION_BODY"),
                ContentTextData = data,
                BodyOrder = 3,
            };
            repository.AddContentText(ct);
            compositeID = Guid.NewGuid().ToString();
            data = "Ian Wilson, Director";
            ct = new ContentText
            {
                NiceName = "",
                CompositeID = compositeID,
                ContentTextType = repository.FindContentTextTypeByName("MANAGEMENTTEAM_SECTION_TITLE"),
                ContentTextData = data,
                BodyOrder = 4,
                IsBold = true,
                ContentTextGraphic = GetImageAsBytes(PORTRAIT_FILEPATH + PORTRAIT_IAN),
            };
            repository.AddContentText(ct);
            data = "Ian Wilson is the founder and Creative Director of Wilson Miller, a leading technology marketing agency. For the last 15 years, he has created marketing campaigns for many leading technology brands including Cisco, Telewest, RSA Security, ICL, Verizon and Demon. Prior to founding Wilson Miller, Ian spent 15 years working in creative roles for flagship agencies such as JWT, McCann Erickson and Holmes & Marchant.";
            ct = new ContentText
            {
                NiceName = "",
                CompositeID = compositeID,
                ContentTextType = repository.FindContentTextTypeByName("MANAGEMENTTEAM_SECTION_BODY"),
                ContentTextData = data,
                BodyOrder = 4,
            };
            repository.AddContentText(ct);
            compositeID = Guid.NewGuid().ToString();
            data = "Caroline Read, Finance Director";
            ct = new ContentText
            {
                NiceName = "",
                CompositeID = compositeID,
                ContentTextType = repository.FindContentTextTypeByName("MANAGEMENTTEAM_SECTION_TITLE"),
                ContentTextData = data,
                BodyOrder = 5,
                IsBold = true,
                ContentTextGraphic = GetImageAsBytes(PORTRAIT_FILEPATH + PORTRAIT_CAROLINE),
            };
            repository.AddContentText(ct);
            data = "Caroline joined the Wilson Miller Group in 1999, bringing with her a wealth of experience in media accountancy, having previously worked in Fleet Street for several years. Key to Caroline’s skills is a deep understanding of the Wilson Miller concept and need for flexibility and understanding that each client has different requirements and therefore an individual approach to finance is required.";
            ct = new ContentText
            {
                NiceName = "",
                CompositeID = compositeID,
                ContentTextType = repository.FindContentTextTypeByName("MANAGEMENTTEAM_SECTION_BODY"),
                ContentTextData = data,
                BodyOrder = 5,
            };
            repository.AddContentText(ct);
            #endregion

            #region VISION


            data = "Vision";
            ct = new ContentText
            {
                NiceName = "",
                ContentTextType = repository.FindContentTextTypeByName("VISION_TITLE"),
                ContentTextData = data,
                BodyOrder = 1,
            };
            repository.AddContentText(ct);
            data = "Cloudware, or Software as a Service (SaaS), is moving into the mainstream. Its ability to reduce costs and simplify IT operations has been known for a long time, and the expansion of broadband internet access has now moved it from the wish-list to the to-do list for many businesses.";
            ct = new ContentText
            {
                NiceName = "",
                CompositeID = compositeID,
                ContentTextType = repository.FindContentTextTypeByName("VISION_SECTION_BODY"),
                ContentTextData = data,
                BodyOrder = 1,
            };
            repository.AddContentText(ct);
            data = "A few concerns remain, however. How do you shortlist and compare the hundreds of cloudware solutions out there? How do you cut through the jargon and get to the meat of the argument: what it can do for you? And how do you know that the cloudware you choose will deliver on its promise?";
            ct = new ContentText
            {
                NiceName = "",
                ContentTextType = repository.FindContentTextTypeByName("VISION_SECTION_BODY"),
                ContentTextData = data,
                BodyOrder = 2,
            };
            repository.AddContentText(ct);
            data = "That’s what Compare Cloudware is all about. Our vision is to be the one trusted source any business needs for any kind of cloudware.";
            ct = new ContentText
            {
                NiceName = "",
                ContentTextType = repository.FindContentTextTypeByName("VISION_SECTION_BODY"),
                ContentTextData = data,
                BodyOrder = 3,
            };
            repository.AddContentText(ct);
            data = "A source that can be relied upon to simplify the selection and shortlist process for business, streamline the sales process for cloudware providers, and provide an open, honest forum for everything to do with cloudware.";
            ct = new ContentText
            {
                NiceName = "",
                ContentTextType = repository.FindContentTextTypeByName("VISION_SECTION_BODY"),
                ContentTextData = data,
                BodyOrder = 4,
            };
            repository.AddContentText(ct);
            #endregion

            #region FAQS
            data = "FAQs";
            ct = new ContentText
            {
                NiceName = "",
                ContentTextType = repository.FindContentTextTypeByName("FAQS_TITLE"),
                ContentTextData = data,
                BodyOrder = 1,
            };
            repository.AddContentText(ct);
            data = "What is Compare Cloudware?";
            ct = new ContentText
            {
                NiceName = "",
                ContentTextType = repository.FindContentTextTypeByName("FAQS_SECTION_TITLE"),
                ContentTextData = data,
                BodyOrder = 1,
            };
            repository.AddContentText(ct);
            data = "Compare Cloudware is the first ever website to provide a comprehensive, neutral and user-friendly online guide to services and applications available in the Cloud. In seconds, potential users can identify and find the cloudware they need, alongside reviews and user opinions that will inform them if it is the cloudware they really want.";
            ct = new ContentText
            {
                NiceName = "",
                ContentTextType = repository.FindContentTextTypeByName("FAQS_SECTION_BODY"),
                ContentTextData = data,
                BodyOrder = 1,
            };
            repository.AddContentText(ct);
            data = "Who is Compare Cloudware aimed at?";
            ct = new ContentText
            {
                NiceName = "",
                ContentTextType = repository.FindContentTextTypeByName("FAQS_SECTION_TITLE"),
                ContentTextData = data,
                BodyOrder = 2,
            };
            repository.AddContentText(ct);
            data = "There are two audiences for Compare Cloudware. Potential users can use a dynamic comparison tool to find the cloudware they need — and compare it with similar offerings. Vendors, meanwhile, can access a cost-effective route to the growing businesses they want to talk to.";
            ct = new ContentText
            {
                NiceName = "",
                ContentTextType = repository.FindContentTextTypeByName("FAQS_SECTION_BODY"),
                ContentTextData = data,
                BodyOrder = 2,
            };
            repository.AddContentText(ct);
            data = "How does Compare Cloudware operate?";
            ct = new ContentText
            {
                NiceName = "",
                ContentTextType = repository.FindContentTextTypeByName("FAQS_SECTION_TITLE"),
                ContentTextData = data,
                BodyOrder = 3,
            };
            repository.AddContentText(ct);
            data = "At Compare Cloudware, we actively seek cloudware vendors and offer them the opportunity to feature their services and applications on the website. In every cloudware category, we are building relationships with every established and emerging vendor, so that potential users have a genuine opportunity to compare similar products and decide which is the best option for their needs.";
            ct = new ContentText
            {
                NiceName = "",
                ContentTextType = repository.FindContentTextTypeByName("FAQS_SECTION_BODY"),
                ContentTextData = data,
                BodyOrder = 3,
            };
            repository.AddContentText(ct);
            data = "Do I pay Compare Cloudware when I trial or subscribe to Cloudware?";
            ct = new ContentText
            {
                NiceName = "",
                ContentTextType = repository.FindContentTextTypeByName("FAQS_SECTION_TITLE"),
                ContentTextData = data,
                BodyOrder = 4,
            };
            repository.AddContentText(ct);
            data = "No — Compare Cloudware operates on a commission basis with cloudware vendors. End-users enjoy every commercial advantage normally offered by vendors, including free trials and low price subscriptions.";
            ct = new ContentText
            {
                NiceName = "",
                ContentTextType = repository.FindContentTextTypeByName("FAQS_SECTION_BODY"),
                ContentTextData = data,
                BodyOrder = 4,
            };
            repository.AddContentText(ct);
            data = "Can I register my cloudware service or application for inclusion?";
            ct = new ContentText
            {
                NiceName = "",
                ContentTextType = repository.FindContentTextTypeByName("FAQS_SECTION_TITLE"),
                ContentTextData = data,
                BodyOrder = 5,
            };
            repository.AddContentText(ct);
            data = "Yes — we’re always looking for cloudware vendors who want an easy, cost-effective route to demonstrate and market their products. Call us on 0000 000000 and we’ll arrange a meeting to discuss the opportunities in more detail.";
            ct = new ContentText
            {
                NiceName = "",
                ContentTextType = repository.FindContentTextTypeByName("FAQS_SECTION_BODY"),
                ContentTextData = data,
                BodyOrder = 5,
            };
            repository.AddContentText(ct);
            data = "Is Compare Cloudware really vendor neutral?";
            ct = new ContentText
            {
                NiceName = "",
                ContentTextType = repository.FindContentTextTypeByName("FAQS_SECTION_TITLE"),
                ContentTextData = data,
                BodyOrder = 6,
            };
            repository.AddContentText(ct);
            data = "Yes, it is. The comparison engine that drives Compare Cloudware has been developed to provide a true comparison of cloudware services and applications based on a fixed set of features. End-users gain because the comparison is factual. Vendors gain because it highlights the key advantages of their products.";
            ct = new ContentText
            {
                NiceName = "",
                ContentTextType = repository.FindContentTextTypeByName("FAQS_SECTION_BODY"),
                ContentTextData = data,
                BodyOrder = 6,
            };
            repository.AddContentText(ct);
            #endregion

            #region CAREERS
            data = "Careers at Compare Cloudware";
            ct = new ContentText
            {
                NiceName = "",
                ContentTextType = repository.FindContentTextTypeByName("CAREERS_TITLE"),
                ContentTextData = data,
                BodyOrder = 1,
            };
            repository.AddContentText(ct);
            data = "Careers at Compare Cloudware";
            ct = new ContentText
            {
                NiceName = "",
                ContentTextType = repository.FindContentTextTypeByName("CAREERS_SECTION_TITLE"),
                ContentTextData = data,
                BodyOrder = 1,
            };
            repository.AddContentText(ct);
            data = "Compare Cloudware is growing fast. Based in a Grade 2 listed building half an hour from London, we’re the pioneers in a rapidly transforming and dynamic market.";
            ct = new ContentText
            {
                NiceName = "",
                ContentTextType = repository.FindContentTextTypeByName("CAREERS_SECTION_BODY"),
                ContentTextData = data,
                BodyOrder = 1,
            };
            repository.AddContentText(ct);
            data = "We’re always interested in hearing from sales and marketing professionals with significant experience in the cloud and broader IT solutions. If you’d like to join an exciting and expanding business at the forefront of cloud technologies, please contact us.";
            ct = new ContentText
            {
                NiceName = "",
                ContentTextType = repository.FindContentTextTypeByName("CAREERS_SECTION_BODY"),
                ContentTextData = data,
                BodyOrder = 2,
            };
            repository.AddContentText(ct);
            data = "Please email us at #EMAILcareers@comparecloudware.com#EMAIL or fill out the inquiry form below:";
            ct = new ContentText
            {
                NiceName = "",
                ContentTextType = repository.FindContentTextTypeByName("CAREERS_SECTION_BODY"),
                ContentTextData = data,
                BodyOrder = 3,
                IsEmailLink = true,
            };
            repository.AddContentText(ct);
            #endregion

            #region PRESS
            data = "Press";
            ct = new ContentText
            {
                NiceName = "",
                ContentTextType = repository.FindContentTextTypeByName("PRESS_TITLE"),
                ContentTextData = data,
                BodyOrder = 1,
            };
            repository.AddContentText(ct);
            data = "Press";
            ct = new ContentText
            {
                NiceName = "",
                ContentTextType = repository.FindContentTextTypeByName("PRESS_SECTION_TITLE"),
                ContentTextData = data,
                BodyOrder = 1,
            };
            repository.AddContentText(ct);
            data = "To be written...Ga. Et audis eate soluptur, si te imolupt aturit, vollore nimpora tiurem et accus a nostiur mi, nobissunt, ommo maionse re volora qui occuptior sanimpo repudan demporrum est quibus, que lam qui am iliassequo qui teseque exces aut dunt in escidit dolores ecerchita secae doluptas expedi verferi Press Kit maxim lautem rem atecum, Please email us at #EMAILpress@comparecloudware.com#EMAIL.";
            ct = new ContentText
            {
                NiceName = "",
                ContentTextType = repository.FindContentTextTypeByName("PRESS_SECTION_BODY"),
                ContentTextData = data,
                BodyOrder = 1,
                IsEmailLink = true,
            };
            repository.AddContentText(ct);
            data = "Clouduser.com Dec 15 - 2012";
            ct = new ContentText
            {
                NiceName = "",
                ContentTextType = repository.FindContentTextTypeByName("PRESS_SECTION_BODY"),
                ContentTextData = data,
                BodyOrder = 2,
            };
            repository.AddContentText(ct);
            data = "Compare Cloudware changes the way we buy";
            ct = new ContentText
            {
                NiceName = "",
                ContentTextType = repository.FindContentTextTypeByName("PRESS_SECTION_BODY"),
                ContentTextData = data,
                BodyOrder = 3,
                IsBold = true,
                IsUnderline = true,
            };
            repository.AddContentText(ct);
            data = "accus a nostiur mi, nobissunt, ommo maionse re volora qui occuptior sanimpo repudan demporrum est quibus, que lam qui am iliasse.";
            ct = new ContentText
            {
                NiceName = "",
                ContentTextType = repository.FindContentTextTypeByName("PRESS_SECTION_BODY"),
                ContentTextData = data,
                BodyOrder = 4,
            };
            repository.AddContentText(ct);
            data = "IT World Dec 15 - 2012";
            ct = new ContentText
            {
                NiceName = "",
                ContentTextType = repository.FindContentTextTypeByName("PRESS_SECTION_BODY"),
                ContentTextData = data,
                BodyOrder = 5,
            };
            repository.AddContentText(ct);
            data = "Compare Cloudware changes the way we buy";
            ct = new ContentText
            {
                NiceName = "",
                ContentTextType = repository.FindContentTextTypeByName("PRESS_SECTION_BODY"),
                ContentTextData = data,
                BodyOrder = 6,
                IsUnderline = true,
                IsBold = true,
            };
            repository.AddContentText(ct);
            data = "ommo maionse re volora qui occuptior sanimpo repudan demporrum est quibus, que lam qui am iliassequo qui teseque exces aut dunt.";
            ct = new ContentText
            {
                NiceName = "",
                ContentTextType = repository.FindContentTextTypeByName("PRESS_SECTION_BODY"),
                ContentTextData = data,
                BodyOrder = 7,
            };
            repository.AddContentText(ct);
            data = "Cloud Surfer Weekly Dec 15 - 2012";
            ct = new ContentText
            {
                NiceName = "",
                ContentTextType = repository.FindContentTextTypeByName("PRESS_SECTION_BODY"),
                ContentTextData = data,
                BodyOrder = 8,
            };
            repository.AddContentText(ct);
            data = "Compare Cloudware changes the way we buy";
            ct = new ContentText
            {
                NiceName = "",
                ContentTextType = repository.FindContentTextTypeByName("PRESS_SECTION_BODY"),
                ContentTextData = data,
                BodyOrder = 9,
                IsUnderline = true,
                IsBold = true,
            };
            repository.AddContentText(ct);
            data = "que lam qui am iliassequo qui teseque exces aut dunt in escidit dolores ecerchita secae doluptas expedi verferi.";
            ct = new ContentText
            {
                NiceName = "",
                ContentTextType = repository.FindContentTextTypeByName("PRESS_SECTION_BODY"),
                ContentTextData = data,
                BodyOrder = 10,
            };
            repository.AddContentText(ct);

            #endregion

            #region CONTACT US
            data = "Contact us";
            ct = new ContentText
            {
                NiceName = "",
                ContentTextType = repository.FindContentTextTypeByName("CONTACTUS_TITLE"),
                ContentTextData = data,
                BodyOrder = 1,
            };
            repository.AddContentText(ct);
            data = "Contact us";
            ct = new ContentText
            {
                NiceName = "",
                ContentTextType = repository.FindContentTextTypeByName("CONTACTUS_SECTION_TITLE"),
                ContentTextData = data,
                BodyOrder = 1,
            };
            repository.AddContentText(ct);
            data = "Compare Cloudware";
            ct = new ContentText
            {
                NiceName = "",
                ContentTextType = repository.FindContentTextTypeByName("CONTACTUS_SECTION_BODY"),
                ContentTextData = data,
                BodyOrder = 1,
            };
            repository.AddContentText(ct);
            data = "87-91 Springfield Road";
            ct = new ContentText
            {
                NiceName = "",
                ContentTextType = repository.FindContentTextTypeByName("CONTACTUS_SECTION_BODY"),
                ContentTextData = data,
                BodyOrder = 1,
            };
            repository.AddContentText(ct);
            data = "Chelmsford CM2 6JL";
            ct = new ContentText
            {
                NiceName = "",
                ContentTextType = repository.FindContentTextTypeByName("CONTACTUS_SECTION_BODY"),
                ContentTextData = data,
                BodyOrder = 1,
            };
            repository.AddContentText(ct);
            data = "United Kingdom";
            ct = new ContentText
            {
                NiceName = "",
                ContentTextType = repository.FindContentTextTypeByName("CONTACTUS_SECTION_BODY"),
                ContentTextData = data,
                BodyOrder = 1,
            };
            repository.AddContentText(ct);
            data = "T: +44 (0)1245 258700";
            ct = new ContentText
            {
                NiceName = "",
                ContentTextType = repository.FindContentTextTypeByName("CONTACTUS_SECTION_BODY"),
                ContentTextData = data,
                BodyOrder = 1,
            };
            repository.AddContentText(ct);
            data = "E: #EMAILinfo@comparecloudware.com#EMAIL";
            ct = new ContentText
            {
                NiceName = "",
                ContentTextType = repository.FindContentTextTypeByName("CONTACTUS_SECTION_BODY"),
                ContentTextData = data,
                BodyOrder = 1,
                IsEmailLink = true,
            };
            repository.AddContentText(ct);
            data = "Alternatively you can submit your inquiry using the form below:";
            ct = new ContentText
            {
                NiceName = "",
                ContentTextType = repository.FindContentTextTypeByName("CONTACTUS_SECTION_BODY"),
                ContentTextData = data,
                BodyOrder = 1,
            };
            repository.AddContentText(ct);

            #endregion

            #endregion

        }

        public void InsertRatings(ICloudCompareContext context, Random r)
        {
            foreach (CloudApplication ca in context.CloudApplications)
            {

                ca.AverageOverallRating = (decimal)r.NextDouble()*100;
                ca.AverageEaseOfUse = (decimal)r.NextDouble() * 100;
                ca.AverageValueForMoney = (decimal)r.NextDouble() * 100;
                ca.AverageFunctionality = (decimal)r.NextDouble() * 100;

                foreach (CloudApplicationRating car in ca.Ratings)
                {
                    car.CloudApplicationOverallRating = (decimal)r.NextDouble() * 100;
                    car.CloudApplicationEaseOfUse = (decimal)r.NextDouble() * 100;
                    car.CloudApplicationValueForMoney = (decimal)r.NextDouble() * 100;
                    car.CloudApplicationFunctionality = (decimal)r.NextDouble() * 100;
                }
            }
        }

        public byte[] GetImageAsBytes(string outputPath)
        {
            //string outputPath = MPU_FILEPATH + MPU_FILE1;
            //System.Drawing.Image i = System.Drawing.Image.FromFile(outputPath);
            //FileStream fs = new FileStream(outputPath, FileMode.Open,FileAccess.Read);
            //BinaryReader br = new BinaryReader(fs);
            //byte[] image = br.ReadBytes((int)fs.Length);
            byte[] image2 = File.ReadAllBytes(outputPath);
            return image2;
        }
    }
}
